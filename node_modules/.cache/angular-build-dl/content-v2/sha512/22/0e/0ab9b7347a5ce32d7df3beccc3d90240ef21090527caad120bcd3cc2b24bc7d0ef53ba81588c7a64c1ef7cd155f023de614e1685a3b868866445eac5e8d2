(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["physical-examinations-physical-examinations-module"],{

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/pages/physical-examinations/physical-examinations.page.html":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/pages/physical-examinations/physical-examinations.page.html ***!
  \*******************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<app-headerbar title=\"Physical Examinations\"></app-headerbar>\r\n\r\n<ion-content>\r\n  <ion-refresher slot=\"fixed\" pullFactor=\"0.5\" pullMin=\"100\" pullMax=\"200\" (ionRefresh)=\"doRefreshPhysicalExamination($event)\">\r\n    <ion-refresher-content></ion-refresher-content>\r\n  </ion-refresher>\r\n  <div class=\"testServer\" *ngIf=\"loginService.inTestServer\">\r\n    TEST SERVER CONNECTED\r\n  </div>\r\n  <div class=\"wrapper\" style=\"margin-top:0px\">\r\n    <!-- Findings -->\r\n    <ion-list >\r\n      <ion-list-header class=\"underlined-header\">\r\n        <ion-label>Physical Examination List: <app-modified-b-toast [modifiedBy]=\"pe_modified.modified_by\" [modifiedDate]=\"pe_modified.modified_dt\"></app-modified-b-toast></ion-label>\r\n      </ion-list-header>\r\n    </ion-list>\r\n    <form #examinationFinding=\"ngForm\" (ngSubmit)=\"onSaveFindings(examinationFinding)\">\r\n      <div *ngFor=\"let finding of findings; let j = index\" class=\"physicalExamSection\">\r\n          <!-- finding.tabOpen = !finding.tabOpen -->\r\n        <ion-item button (click)=\"onExpandFindings(j)\" detail=\"false\" lines=\"none\">\r\n          <ion-icon slot=\"end\" name=\"arrow-forward\" *ngIf=\"!finding.tabOpen\"></ion-icon>\r\n          <ion-icon slot=\"end\" name=\"arrow-down\" *ngIf=\"finding.tabOpen\"></ion-icon>\r\n          <ion-label class=\"redLabel\" [color]=\"(selectedFindings[j]) && (selectedFindings[j].value.length <= 0 || (j == 0  && selectedFindings[j].value.length > 0 && selectedFindings[j].value[0].id == 2 && selectedFindings[j].others.length <= 0)) ? 'danger':'dark'\">{{finding.key}}</ion-label>\r\n        </ion-item>\r\n        <div [hidden]=\"!finding.tabOpen\">\r\n          <ion-list style=\"margin: 0px !important\">\r\n            <ion-item *ngFor=\"let g of finding.value[0]; let i = index\" [hidden]=\"g.id === 'others'\" lines=\"none\" >\r\n              <div class=\"findingsCheckBoxGroup\" >\r\n                <ion-checkbox color=\"medium\"  [disabled]=\"g.disabled || !examinationSave || !peAllowEdit\" [(ngModel)]=\"g.checked\" [ngModelOptions]=\"{standalone: true}\" slot=\"start\" (click)=\"onFindingCheckSelect(j, i)\"></ion-checkbox>\r\n                <ion-label class=\"textLabel\" [color]=\"(selectedFindings[j]) && (selectedFindings[j].value.length <= 0 || (j == 0  && selectedFindings[j].value.length > 0 && selectedFindings[j].value[0].id == 2 && selectedFindings[j].others.length <= 0)) ? 'danger':'dark'\">{{g.text}}</ion-label>\r\n              </div>\r\n            </ion-item>\r\n          </ion-list>\r\n          <div class=\"findingsOthersGroup\" *ngIf=\"finding.hasRemarks\">\r\n            <ion-label class=\"textLabel\" *ngIf=\"finding.hasOthersLabel\">Others</ion-label>\r\n            <ion-textarea rows=\"5\" (ionChange)=\"onOthersChange(j)\" debounce=\"750\" [disabled]=\"finding.disabledOthers || !examinationSave || !peAllowEdit\" [(ngModel)]=\"finding.others\" [ngModelOptions]=\"{standalone: true}\" class=\"mediumTextArea\" placeholder=\"Enter your text here . . .\" ></ion-textarea>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"ion-padding\">\r\n        <p class=\"warning-message\" *ngIf=\"formHasError\">{{formErrorMessage}}</p>\r\n        <p class=\"warning-message\" *ngIf=\"formHasError\r\n        || (selectedFindings[0]) && (selectedFindings[0].value.length <= 0 || (selectedFindings[0].value.length > 0 && selectedFindings[0].value[0].id == 2 && selectedFindings[0].others.length <= 0))\r\n        || (selectedFindings[1]) && (selectedFindings[1].value.length <= 0)\r\n        || (selectedFindings[2]) && (selectedFindings[2].value.length <= 0)\r\n        || (selectedFindings[3]) && (selectedFindings[3].value.length <= 0)\r\n        || (selectedFindings[4]) && (selectedFindings[4].value.length <= 0)\r\n        || (selectedFindings[5]) && (selectedFindings[5].value.length <= 0)\r\n        || (selectedFindings[6]) && (selectedFindings[6].value.length <= 0)\r\n        || (selectedFindings[7]) && (selectedFindings[7].value.length <= 0)\r\n        || (selectedFindings[8]) && (selectedFindings[8].value.length <= 0)\">Some data are missing.</p>\r\n        \r\n        <ion-button type=\"submit\" expand=\"block\" [hidden]=\"!peAllowEdit\" [disabled]=\"!examinationSave || !peAllowEdit || formHasError\r\n          || (selectedFindings[0]) && (selectedFindings[0].value.length <= 0 || (selectedFindings[0].value.length > 0 && selectedFindings[0].value[0].id == 2 && selectedFindings[0].others.length <= 0))\r\n          || (selectedFindings[1]) && (selectedFindings[1].value.length <= 0)\r\n          || (selectedFindings[2]) && (selectedFindings[2].value.length <= 0)\r\n          || (selectedFindings[3]) && (selectedFindings[3].value.length <= 0)\r\n          || (selectedFindings[4]) && (selectedFindings[4].value.length <= 0)\r\n          || (selectedFindings[5]) && (selectedFindings[5].value.length <= 0)\r\n          || (selectedFindings[6]) && (selectedFindings[6].value.length <= 0)\r\n          || (selectedFindings[7]) && (selectedFindings[7].value.length <= 0)\r\n          || (selectedFindings[8]) && (selectedFindings[8].value.length <= 0)\r\n        \"><ion-icon name=\"paper-plane\"></ion-icon> Save</ion-button>\r\n        <ion-button type=\"button\" expand=\"block\" (click)=\"peAllowEdit = !peAllowEdit\" [hidden]=\"peAllowEdit\" [disabled]=\"!examinationSave\"><ion-icon name=\"create\"></ion-icon> Edit</ion-button>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</ion-content>\r\n");

/***/ }),

/***/ "./src/app/app/services/alert-service.service.ts":
/*!*******************************************************!*\
  !*** ./src/app/app/services/alert-service.service.ts ***!
  \*******************************************************/
/*! exports provided: AlertServiceService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AlertServiceService", function() { return AlertServiceService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ionic/angular */ "./node_modules/@ionic/angular/dist/fesm5.js");
/* harmony import */ var src_app_pages_prompt_modal_prompt_modal_page__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/pages/prompt-modal/prompt-modal.page */ "./src/app/pages/prompt-modal/prompt-modal.page.ts");
/* harmony import */ var src_app_pages_prompt_modal_c_prompt_modal_c_page__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/pages/prompt-modal-c/prompt-modal-c.page */ "./src/app/pages/prompt-modal-c/prompt-modal-c.page.ts");





let AlertServiceService = class AlertServiceService {
    constructor(toastCtrl, modalController, alertController) {
        this.toastCtrl = toastCtrl;
        this.modalController = modalController;
        this.alertController = alertController;
    }
    alertToast(message) {
        return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function* () {
            console.log('AlertToast Message:', message);
            const toast = yield this.toastCtrl.create({
                message: message,
                duration: 8000
            });
            toast.onclick = (ev) => {
                toast.dismiss();
            };
            toast.present();
        });
    }
    openAlertModalValidation(alert, title, message, messageArray, ok = 'Done', okCallBack = (result) => { }) {
        return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function* () {
            const modal = yield this.modalController.create({
                component: src_app_pages_prompt_modal_prompt_modal_page__WEBPACK_IMPORTED_MODULE_3__["PromptModalPage"],
                cssClass: 'my-custom-modal-array-css',
                componentProps: {
                    alert,
                    title,
                    message,
                    messageArray,
                    ok
                }
            });
            modal.onDidDismiss().then((result) => {
                okCallBack(result);
            });
            return yield modal.present();
        });
    }
    openSearchModal(options = [], value = "", placeholder = "Enter here...", maxLength = null, okCallBack = (result) => { }) {
        return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function* () {
            const modal = yield this.modalController.create({
                component: src_app_pages_prompt_modal_c_prompt_modal_c_page__WEBPACK_IMPORTED_MODULE_4__["PromptModalCPage"],
                cssClass: 'my-custom-modal-css',
                componentProps: {
                    searchData: {
                        isForSearch: true,
                        libs: options,
                        searchQuery: value,
                        maxLength: maxLength,
                        placeholder: placeholder
                    },
                }
            });
            modal.onDidDismiss().then((result) => {
                okCallBack(result);
            });
            return yield modal.present();
        });
    }
    openPromptModal(title, message, ok = 'Save', okCallBack = (result) => { }, cancel = 'Cancel', cancelCallBack = (result) => { }) {
        return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function* () {
            const modal = yield this.modalController.create({
                component: src_app_pages_prompt_modal_prompt_modal_page__WEBPACK_IMPORTED_MODULE_3__["PromptModalPage"],
                cssClass: 'my-custom-modal-css',
                componentProps: {
                    prompt,
                    title,
                    message,
                    cancel,
                    ok
                }
            });
            modal.onDidDismiss().then((result) => {
                okCallBack(result);
                cancelCallBack(result);
            });
            return yield modal.present();
        });
    }
    openAlertModal(alert, title, message, ok = 'Done', okCallBack = (result) => { }) {
        return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function* () {
            const modal = yield this.modalController.create({
                component: src_app_pages_prompt_modal_prompt_modal_page__WEBPACK_IMPORTED_MODULE_3__["PromptModalPage"],
                // cssClass: 'auto-height',
                cssClass: 'my-custom-modal-css',
                componentProps: {
                    alert,
                    title,
                    message,
                    ok
                }
            });
            modal.onDidDismiss().then((result) => {
                okCallBack(result);
            });
            return yield modal.present();
        });
    }
    prompNAlert(header = '', subHeader = '', message = '', inputs = [], buttons = [], backdropDismiss = true, keyboardClose = true) {
        return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function* () {
            this.nativeAlert = this.alertController.create({
                header,
                subHeader,
                message,
                backdropDismiss,
                keyboardClose,
                inputs,
                buttons
            }).then(alert => {
                this.nativeAlert.present();
            });
        });
    }
    prompInputNAlert(header = '', subHeader = '', message = '', backdropDismiss = true, keyboardClose = true, inputs = [], buttons = [], callBackOk = () => { }, callBackNo = () => { }) {
        return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function* () {
            if (buttons.length == 0)
                buttons = [
                    {
                        text: 'OK',
                        handler: data => {
                            callBackOk();
                        }
                    },
                    {
                        text: 'Cancel',
                        handler: data => {
                            callBackNo();
                        }
                    }
                ];
            this.nativeAlert = this.alertController.create({
                header: '',
                subHeader: '',
                backdropDismiss,
                keyboardClose,
                message: '',
                inputs,
                buttons
            }).then(alert => {
                this.nativeAlert.present();
            });
        });
    }
};
AlertServiceService.ctorParameters = () => [
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_2__["ToastController"] },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_2__["ModalController"] },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_2__["AlertController"] }
];
AlertServiceService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_ionic_angular__WEBPACK_IMPORTED_MODULE_2__["ToastController"],
        _ionic_angular__WEBPACK_IMPORTED_MODULE_2__["ModalController"],
        _ionic_angular__WEBPACK_IMPORTED_MODULE_2__["AlertController"]])
], AlertServiceService);



/***/ }),

/***/ "./src/app/models/physical-examinations-config.ts":
/*!********************************************************!*\
  !*** ./src/app/models/physical-examinations-config.ts ***!
  \********************************************************/
/*! exports provided: PhysicalExaminationsConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PhysicalExaminationsConfig", function() { return PhysicalExaminationsConfig; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

class PhysicalExaminationsConfig {
    constructor(values = {}) {
        Object.assign(this, values);
    }
}


/***/ }),

/***/ "./src/app/pages/physical-examinations/physical-examinations.module.ts":
/*!*****************************************************************************!*\
  !*** ./src/app/pages/physical-examinations/physical-examinations.module.ts ***!
  \*****************************************************************************/
/*! exports provided: PhysicalExaminationsPageModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PhysicalExaminationsPageModule", function() { return PhysicalExaminationsPageModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ionic/angular */ "./node_modules/@ionic/angular/dist/fesm5.js");
/* harmony import */ var _physical_examinations_page__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./physical-examinations.page */ "./src/app/pages/physical-examinations/physical-examinations.page.ts");
/* harmony import */ var _components_components_module__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./../../components/components.module */ "./src/app/components/components.module.ts");








const routes = [
    {
        path: '',
        component: _physical_examinations_page__WEBPACK_IMPORTED_MODULE_6__["PhysicalExaminationsPage"]
    }
];
let PhysicalExaminationsPageModule = class PhysicalExaminationsPageModule {
};
PhysicalExaminationsPageModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"],
            _ionic_angular__WEBPACK_IMPORTED_MODULE_5__["IonicModule"],
            _angular_router__WEBPACK_IMPORTED_MODULE_4__["RouterModule"].forChild(routes),
            _components_components_module__WEBPACK_IMPORTED_MODULE_7__["ComponentsModule"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_3__["ReactiveFormsModule"]
        ],
        declarations: [_physical_examinations_page__WEBPACK_IMPORTED_MODULE_6__["PhysicalExaminationsPage"]]
    })
], PhysicalExaminationsPageModule);



/***/ }),

/***/ "./src/app/pages/physical-examinations/physical-examinations.page.scss":
/*!*****************************************************************************!*\
  !*** ./src/app/pages/physical-examinations/physical-examinations.page.scss ***!
  \*****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("ion-refresher {\n  z-index: 1;\n}\n\nion-refresher-content {\n  background-color: transparent;\n}\n\nion-content {\n  background: #f9f9f9;\n  --ion-background-color: #f9f9f9;\n}\n\nion-content .wrapper {\n  margin-top: 20px;\n  margin-bottom: 20px;\n  padding: 10px;\n  width: 100%;\n  height: 100%;\n  margin-left: auto;\n  margin-right: auto;\n}\n\nion-content .wrapper .physicalExamSection {\n  margin-bottom: 15px;\n  margin-left: 15px;\n  margin-right: 15px;\n  --ion-background-color: white;\n  background: white;\n  background-color: white;\n  padding-bottom: 1px;\n}\n\nion-content .wrapper .physicalExamSection .findingsCheckBoxGroup {\n  display: -webkit-box;\n  display: flex;\n}\n\nion-content .wrapper .physicalExamSection .findingsCheckBoxGroup ion-checkbox {\n  margin: 0px;\n}\n\nion-content .wrapper .physicalExamSection .findingsOthersGroup .mediumTextArea {\n  --background: rgb(235, 235, 235);\n  width: calc(100% - 30px);\n  border: none;\n  margin: 15px 15px 20px 15px;\n  padding: 10px;\n  background: #ebebeb;\n  border-radius: 10px;\n}\n\nion-content .wrapper .physicalExamSection .normalTextInput {\n  height: 48px;\n  width: 100%;\n  border: none;\n  margin-top: 10px;\n  padding-left: 10px;\n  padding-right: 10px;\n}\n\nion-content .wrapper .physicalExamSection .mediumTextArea {\n  width: calc(100% - 30px);\n  border: none;\n  margin: 15px 15px 20px 15px;\n  padding: 10px;\n  background: #ebebeb;\n  border-radius: 10px;\n}\n\nion-content .wrapper .physicalExamSection .mediumTextArea::-webkit-input-placeholder {\n  /* Chrome, Firefox, Opera, Safari 10.1+ */\n  color: #c8c8c8;\n  font-style: italic;\n}\n\nion-content .wrapper .physicalExamSection .mediumTextArea::-moz-placeholder {\n  /* Chrome, Firefox, Opera, Safari 10.1+ */\n  color: #c8c8c8;\n  font-style: italic;\n}\n\nion-content .wrapper .physicalExamSection .mediumTextArea::-ms-input-placeholder {\n  /* Chrome, Firefox, Opera, Safari 10.1+ */\n  color: #c8c8c8;\n  font-style: italic;\n}\n\nion-content .wrapper .physicalExamSection .mediumTextArea::placeholder {\n  /* Chrome, Firefox, Opera, Safari 10.1+ */\n  color: #c8c8c8;\n  font-style: italic;\n}\n\nion-content .wrapper .physicalExamSection .textLabel {\n  margin-left: 20px;\n}\n\nion-content .wrapper .physicalExamSection .textSubLabel {\n  color: #949494;\n  font-size: x-small;\n}\n\nion-content .wrapper .physicalExamSection .redLabel {\n  margin-top: 10px;\n  margin-bottom: 10px;\n}\n\nion-content .wrapper .ion-padding ion-button {\n  height: 48px;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnZXMvcGh5c2ljYWwtZXhhbWluYXRpb25zL0Q6XFxwcm9qZWN0c1xcaW9uaWNzXFxlaHItbW9iaWxlL3NyY1xcYXBwXFxwYWdlc1xccGh5c2ljYWwtZXhhbWluYXRpb25zXFxwaHlzaWNhbC1leGFtaW5hdGlvbnMucGFnZS5zY3NzIiwic3JjL2FwcC9wYWdlcy9waHlzaWNhbC1leGFtaW5hdGlvbnMvcGh5c2ljYWwtZXhhbWluYXRpb25zLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLFVBQUE7QUNDSjs7QURFQTtFQUNJLDZCQUFBO0FDQ0o7O0FERUE7RUFDSSxtQkFBQTtFQUNBLCtCQUFBO0FDQ0o7O0FEQ0k7RUFDSSxnQkFBQTtFQUNBLG1CQUFBO0VBQ0EsYUFBQTtFQUNBLFdBQUE7RUFDQSxZQUFBO0VBQ0EsaUJBQUE7RUFDQSxrQkFBQTtBQ0NSOztBRENRO0VBQ0ksbUJBQUE7RUFDQSxpQkFBQTtFQUNBLGtCQUFBO0VBQ0EsNkJBQUE7RUFDQSxpQkFBQTtFQUNBLHVCQUFBO0VBQ0EsbUJBQUE7QUNDWjs7QURDWTtFQUNJLG9CQUFBO0VBQUEsYUFBQTtBQ0NoQjs7QURDZ0I7RUFDSSxXQUFBO0FDQ3BCOztBRElnQjtFQUNJLGdDQUFBO0VBQ0Esd0JBQUE7RUFDQSxZQUFBO0VBQ0EsMkJBQUE7RUFDQSxhQUFBO0VBQ0EsbUJBQUE7RUFDQSxtQkFBQTtBQ0ZwQjs7QURNWTtFQUNJLFlBQUE7RUFDQSxXQUFBO0VBQ0EsWUFBQTtFQUNBLGdCQUFBO0VBQ0Esa0JBQUE7RUFDQSxtQkFBQTtBQ0poQjs7QURPWTtFQUNJLHdCQUFBO0VBQ0EsWUFBQTtFQUNBLDJCQUFBO0VBQ0EsYUFBQTtFQUNBLG1CQUFBO0VBQ0EsbUJBQUE7QUNMaEI7O0FEUVk7RUFBK0IseUNBQUE7RUFDM0IsY0FBQTtFQUNBLGtCQUFBO0FDTGhCOztBREdZO0VBQStCLHlDQUFBO0VBQzNCLGNBQUE7RUFDQSxrQkFBQTtBQ0xoQjs7QURHWTtFQUErQix5Q0FBQTtFQUMzQixjQUFBO0VBQ0Esa0JBQUE7QUNMaEI7O0FER1k7RUFBK0IseUNBQUE7RUFDM0IsY0FBQTtFQUNBLGtCQUFBO0FDTGhCOztBRFFZO0VBQ0ksaUJBQUE7QUNOaEI7O0FEU1k7RUFDSSxjQUFBO0VBQ0Esa0JBQUE7QUNQaEI7O0FEVVk7RUFDSSxnQkFBQTtFQUNBLG1CQUFBO0FDUmhCOztBRGFZO0VBQ0ksWUFBQTtBQ1hoQiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3BoeXNpY2FsLWV4YW1pbmF0aW9ucy9waHlzaWNhbC1leGFtaW5hdGlvbnMucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiaW9uLXJlZnJlc2hlciB7XHJcbiAgICB6LWluZGV4OiAxO1xyXG59XHJcbiAgXHJcbmlvbi1yZWZyZXNoZXItY29udGVudCB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcclxufVxyXG4gIFxyXG5pb24tY29udGVudCB7XHJcbiAgICBiYWNrZ3JvdW5kOiAjZjlmOWY5O1xyXG4gICAgLS1pb24tYmFja2dyb3VuZC1jb2xvcjogI2Y5ZjlmOTtcclxuXHJcbiAgICAud3JhcHBlciB7XHJcbiAgICAgICAgbWFyZ2luLXRvcDogMjBweDtcclxuICAgICAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xyXG4gICAgICAgIHBhZGRpbmc6IDEwcHg7XHJcbiAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xyXG4gICAgICAgIG1hcmdpbi1yaWdodDogYXV0bztcclxuXHJcbiAgICAgICAgLnBoeXNpY2FsRXhhbVNlY3Rpb24ge1xyXG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxNXB4O1xyXG4gICAgICAgICAgICBtYXJnaW4tbGVmdDogMTVweDtcclxuICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAxNXB4O1xyXG4gICAgICAgICAgICAtLWlvbi1iYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcclxuICAgICAgICAgICAgYmFja2dyb3VuZDogd2hpdGU7XHJcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xyXG4gICAgICAgICAgICBwYWRkaW5nLWJvdHRvbTogMXB4O1xyXG5cclxuICAgICAgICAgICAgLmZpbmRpbmdzQ2hlY2tCb3hHcm91cCB7XHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG5cclxuICAgICAgICAgICAgICAgIGlvbi1jaGVja2JveCB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAwcHg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLmZpbmRpbmdzT3RoZXJzR3JvdXAge1xyXG5cclxuICAgICAgICAgICAgICAgIC5tZWRpdW1UZXh0QXJlYSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLS1iYWNrZ3JvdW5kOiByZ2IoMjM1LCAyMzUsIDIzNSk7XHJcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IGNhbGMoMTAwJSAtIDMwcHgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJvcmRlcjogbm9uZTtcclxuICAgICAgICAgICAgICAgICAgICBtYXJnaW46IDE1cHggMTVweCAyMHB4IDE1cHg7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMTBweDtcclxuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiByZ2IoMjM1LCAyMzUsIDIzNSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMTBweDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLm5vcm1hbFRleHRJbnB1dCB7XHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDQ4cHg7XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICAgICAgICAgIGJvcmRlcjogbm9uZTtcclxuICAgICAgICAgICAgICAgIG1hcmdpbi10b3A6IDEwcHg7XHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDEwcHg7XHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAxMHB4O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAubWVkaXVtVGV4dEFyZWEge1xyXG4gICAgICAgICAgICAgICAgd2lkdGg6IGNhbGMoMTAwJSAtIDMwcHgpO1xyXG4gICAgICAgICAgICAgICAgYm9yZGVyOiBub25lO1xyXG4gICAgICAgICAgICAgICAgbWFyZ2luOiAxNXB4IDE1cHggMjBweCAxNXB4O1xyXG4gICAgICAgICAgICAgICAgcGFkZGluZzogMTBweDtcclxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IHJnYigyMzUsIDIzNSwgMjM1KTtcclxuICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC5tZWRpdW1UZXh0QXJlYTo6cGxhY2Vob2xkZXIgeyAvKiBDaHJvbWUsIEZpcmVmb3gsIE9wZXJhLCBTYWZhcmkgMTAuMSsgKi9cclxuICAgICAgICAgICAgICAgIGNvbG9yOiAjYzhjOGM4O1xyXG4gICAgICAgICAgICAgICAgZm9udC1zdHlsZTogaXRhbGljO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAudGV4dExhYmVsIHtcclxuICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAyMHB4O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAudGV4dFN1YkxhYmVsIHtcclxuICAgICAgICAgICAgICAgIGNvbG9yOiAjOTQ5NDk0O1xyXG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiB4LXNtYWxsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAucmVkTGFiZWwge1xyXG4gICAgICAgICAgICAgICAgbWFyZ2luLXRvcDogMTBweDtcclxuICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC5pb24tcGFkZGluZyB7XHJcbiAgICAgICAgICAgIGlvbi1idXR0b24ge1xyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiA0OHB4O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsImlvbi1yZWZyZXNoZXIge1xuICB6LWluZGV4OiAxO1xufVxuXG5pb24tcmVmcmVzaGVyLWNvbnRlbnQge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbn1cblxuaW9uLWNvbnRlbnQge1xuICBiYWNrZ3JvdW5kOiAjZjlmOWY5O1xuICAtLWlvbi1iYWNrZ3JvdW5kLWNvbG9yOiAjZjlmOWY5O1xufVxuaW9uLWNvbnRlbnQgLndyYXBwZXIge1xuICBtYXJnaW4tdG9wOiAyMHB4O1xuICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuICBwYWRkaW5nOiAxMHB4O1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuICBtYXJnaW4tbGVmdDogYXV0bztcbiAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xufVxuaW9uLWNvbnRlbnQgLndyYXBwZXIgLnBoeXNpY2FsRXhhbVNlY3Rpb24ge1xuICBtYXJnaW4tYm90dG9tOiAxNXB4O1xuICBtYXJnaW4tbGVmdDogMTVweDtcbiAgbWFyZ2luLXJpZ2h0OiAxNXB4O1xuICAtLWlvbi1iYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgYmFja2dyb3VuZDogd2hpdGU7XG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICBwYWRkaW5nLWJvdHRvbTogMXB4O1xufVxuaW9uLWNvbnRlbnQgLndyYXBwZXIgLnBoeXNpY2FsRXhhbVNlY3Rpb24gLmZpbmRpbmdzQ2hlY2tCb3hHcm91cCB7XG4gIGRpc3BsYXk6IGZsZXg7XG59XG5pb24tY29udGVudCAud3JhcHBlciAucGh5c2ljYWxFeGFtU2VjdGlvbiAuZmluZGluZ3NDaGVja0JveEdyb3VwIGlvbi1jaGVja2JveCB7XG4gIG1hcmdpbjogMHB4O1xufVxuaW9uLWNvbnRlbnQgLndyYXBwZXIgLnBoeXNpY2FsRXhhbVNlY3Rpb24gLmZpbmRpbmdzT3RoZXJzR3JvdXAgLm1lZGl1bVRleHRBcmVhIHtcbiAgLS1iYWNrZ3JvdW5kOiByZ2IoMjM1LCAyMzUsIDIzNSk7XG4gIHdpZHRoOiBjYWxjKDEwMCUgLSAzMHB4KTtcbiAgYm9yZGVyOiBub25lO1xuICBtYXJnaW46IDE1cHggMTVweCAyMHB4IDE1cHg7XG4gIHBhZGRpbmc6IDEwcHg7XG4gIGJhY2tncm91bmQ6ICNlYmViZWI7XG4gIGJvcmRlci1yYWRpdXM6IDEwcHg7XG59XG5pb24tY29udGVudCAud3JhcHBlciAucGh5c2ljYWxFeGFtU2VjdGlvbiAubm9ybWFsVGV4dElucHV0IHtcbiAgaGVpZ2h0OiA0OHB4O1xuICB3aWR0aDogMTAwJTtcbiAgYm9yZGVyOiBub25lO1xuICBtYXJnaW4tdG9wOiAxMHB4O1xuICBwYWRkaW5nLWxlZnQ6IDEwcHg7XG4gIHBhZGRpbmctcmlnaHQ6IDEwcHg7XG59XG5pb24tY29udGVudCAud3JhcHBlciAucGh5c2ljYWxFeGFtU2VjdGlvbiAubWVkaXVtVGV4dEFyZWEge1xuICB3aWR0aDogY2FsYygxMDAlIC0gMzBweCk7XG4gIGJvcmRlcjogbm9uZTtcbiAgbWFyZ2luOiAxNXB4IDE1cHggMjBweCAxNXB4O1xuICBwYWRkaW5nOiAxMHB4O1xuICBiYWNrZ3JvdW5kOiAjZWJlYmViO1xuICBib3JkZXItcmFkaXVzOiAxMHB4O1xufVxuaW9uLWNvbnRlbnQgLndyYXBwZXIgLnBoeXNpY2FsRXhhbVNlY3Rpb24gLm1lZGl1bVRleHRBcmVhOjpwbGFjZWhvbGRlciB7XG4gIC8qIENocm9tZSwgRmlyZWZveCwgT3BlcmEsIFNhZmFyaSAxMC4xKyAqL1xuICBjb2xvcjogI2M4YzhjODtcbiAgZm9udC1zdHlsZTogaXRhbGljO1xufVxuaW9uLWNvbnRlbnQgLndyYXBwZXIgLnBoeXNpY2FsRXhhbVNlY3Rpb24gLnRleHRMYWJlbCB7XG4gIG1hcmdpbi1sZWZ0OiAyMHB4O1xufVxuaW9uLWNvbnRlbnQgLndyYXBwZXIgLnBoeXNpY2FsRXhhbVNlY3Rpb24gLnRleHRTdWJMYWJlbCB7XG4gIGNvbG9yOiAjOTQ5NDk0O1xuICBmb250LXNpemU6IHgtc21hbGw7XG59XG5pb24tY29udGVudCAud3JhcHBlciAucGh5c2ljYWxFeGFtU2VjdGlvbiAucmVkTGFiZWwge1xuICBtYXJnaW4tdG9wOiAxMHB4O1xuICBtYXJnaW4tYm90dG9tOiAxMHB4O1xufVxuaW9uLWNvbnRlbnQgLndyYXBwZXIgLmlvbi1wYWRkaW5nIGlvbi1idXR0b24ge1xuICBoZWlnaHQ6IDQ4cHg7XG59Il19 */");

/***/ }),

/***/ "./src/app/pages/physical-examinations/physical-examinations.page.ts":
/*!***************************************************************************!*\
  !*** ./src/app/pages/physical-examinations/physical-examinations.page.ts ***!
  \***************************************************************************/
/*! exports provided: PhysicalExaminationsPage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PhysicalExaminationsPage", function() { return PhysicalExaminationsPage; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _services_physical_examinations_api_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../../services/physical-examinations-api.service */ "./src/app/services/physical-examinations-api.service.ts");
/* harmony import */ var _services_patient_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../../services/patient.service */ "./src/app/services/patient.service.ts");
/* harmony import */ var _services_loading_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./../../services/loading.service */ "./src/app/services/loading.service.ts");
/* harmony import */ var _services_permission_validator_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./../../services/permission-validator.service */ "./src/app/services/permission-validator.service.ts");
/* harmony import */ var _services_string_utils_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./../../services/string-utils.service */ "./src/app/services/string-utils.service.ts");
/* harmony import */ var _services_api_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./../../services/api.service */ "./src/app/services/api.service.ts");
/* harmony import */ var _services_login_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./../../services/login.service */ "./src/app/services/login.service.ts");
/* harmony import */ var _models_physical_examinations_config__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./../../models/physical-examinations-config */ "./src/app/models/physical-examinations-config.ts");
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @ionic/angular */ "./node_modules/@ionic/angular/dist/fesm5.js");
/* harmony import */ var src_app_app_services_alert_service_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! src/app/app/services/alert-service.service */ "./src/app/app/services/alert-service.service.ts");












let PhysicalExaminationsPage = class PhysicalExaminationsPage {
    constructor(physicalExaminationsApiService, patientService, apiService, loginService, loadingService, stringUtilsService, permissionValidatorService, menuController, alertServ) {
        this.physicalExaminationsApiService = physicalExaminationsApiService;
        this.patientService = patientService;
        this.apiService = apiService;
        this.loginService = loginService;
        this.loadingService = loadingService;
        this.stringUtilsService = stringUtilsService;
        this.permissionValidatorService = permissionValidatorService;
        this.menuController = menuController;
        this.alertServ = alertServ;
        this.selectedFindings = [];
        this.findings = [];
        this.examinationSave = true;
        this.examinationView = true;
        this.formErrorMessage = '';
        this.formHasError = false;
        this.peAllowEdit = true;
        this.pe_modified = {
            modified_by: null,
            modified_dt: null
        };
        this.SAVE_PHYSICAL_EXAMINATION = 1;
        this.selectedEncounterNo = patientService.getSelectedEncounterNo();
        this.physicalExaminationsApiService.setUrl(this.apiService.getUrl());
        this.physicalExaminationsApiService.setToken(this.loginService.getAuthentication().token);
        this.configAndDefaults = new _models_physical_examinations_config__WEBPACK_IMPORTED_MODULE_9__["PhysicalExaminationsConfig"]();
        this.configAndDefaults.m_patient_examination = loginService.getConfigAndDefaults().examination['m-patient-examination'];
        console.log('physical examination', this.configAndDefaults);
        this.initFindings();
    }
    initUserInterfaceByRole() {
        this.examinationSave = this.permissionValidatorService.hasPhysExamEdit();
    }
    initFindings() {
        this.selectedFindings = [];
        this.findings = [];
        const examinationOrig = this.configAndDefaults.m_patient_examination['default-options'].examination;
        const examination = JSON.parse(JSON.stringify(examinationOrig));
        Object.keys(examination).forEach(key => {
            console.log('keys: ', key);
            console.log('examination[key]: ', examination[key]);
            const others = examination[key][0].find(item => {
                return item.id === 'others';
            });
            const altered = examination[key][0].find(item => {
                return item.id === 2;
            });
            const hasRemarks = (others) || (altered);
            const hasOthersLabel = (others);
            const keyValue = {
                key,
                value: examination[key],
                tabOpen: false,
                hasRemarks,
                hasOthersLabel,
                others: '',
                isDisabled: false
            };
            this.findings.push(keyValue);
        });
        console.log('findings: ', this.findings);
    }
    onExpandFindings(j) {
        this.findings.forEach((finding, index) => {
            if (index === j && finding.tabOpen === false) {
                finding.tabOpen = true;
            }
            else {
                finding.tabOpen = false;
            }
        });
    }
    ionViewWillEnter() {
        console.log('ionViewWillEnter');
        const tempSelectedEncounterNo = this.patientService.getSelectedEncounterNo();
        if (this.selectedEncounterNo !== tempSelectedEncounterNo) {
            console.log('selected patient changed');
            this.selectedEncounterNo = tempSelectedEncounterNo;
            this.initFindings();
            this.initUserInterfaceByRole();
            this.getPhysicalExamination();
        }
        window.addEventListener('native.keyboardshow', this.keyboardShowHandler);
        window.addEventListener('native.keyboardhide', this.keyboardHideHandler);
    }
    ionViewWillLeave() {
        console.log('ionViewWillLeave');
        window.removeEventListener('native.keyboardshow', this.keyboardShowHandler);
        window.removeEventListener('native.keyboardhide', this.keyboardHideHandler);
        this.removeIonAppStyles();
    }
    ngOnInit() {
        this.menuController.swipeGesture(true, 'mainMenu');
        this.menuController.swipeGesture(true, 'accountMenu');
        this.initUserInterfaceByRole();
        this.getPhysicalExamination();
    }
    getPhysicalExamination() {
        return new Promise((resolve, reject) => {
            this.loadingService.present();
            this.physicalExaminationsApiService.getPhysicalExamination(this.selectedEncounterNo).subscribe((result) => {
                console.log(result);
                let foundSelected = false;
                this.peAllowEdit = true;
                this.pe_modified = {
                    modified_by: null,
                    modified_dt: null
                };
                try {
                    Object.keys(result.examinationData).forEach(resultKey => {
                        const k = resultKey;
                        let o = '';
                        const v = [];
                        const examination = this.findings.find(item => {
                            return item.key === resultKey;
                        });
                        if (examination) {
                            const savedFindings = result.examinationData[examination.key];
                            Object.keys(savedFindings).forEach(key => {
                                this.findings.forEach(finding => {
                                    const value = finding.value[0].find(item => {
                                        return (item.id === Number(key) || item.id === key) && examination.key === finding.key;
                                    });
                                    if (value) {
                                        value.checked = true;
                                        foundSelected = true;
                                        if ((value.id === 2 || (typeof value.id === 'string' && value.id === '2'))) {
                                            finding.others = savedFindings[key];
                                            o = savedFindings[key];
                                        }
                                        else if (typeof value.id === 'string' && value.id === 'others' && key === 'others') {
                                            finding.others = savedFindings[key];
                                            o = savedFindings[key];
                                        }
                                        v.push(value);
                                    }
                                });
                            });
                        }
                        const selectedKeyValue = {
                            key: k,
                            value: v,
                            others: o,
                        };
                        this.selectedFindings.push(selectedKeyValue);
                    });
                    console.log('this.selectedFindings: ', this.selectedFindings);
                    this.loadingService.dismiss().then(_ => {
                        this.selectedFindings.forEach((selectedFinding) => {
                            const essentiallyNormal = selectedFinding.value.find((value) => {
                                return value.text.toLocaleLowerCase() === 'essentially normal';
                            });
                            if (essentiallyNormal) {
                                const val = [];
                                val.push(essentiallyNormal);
                                selectedFinding.value = val;
                                const finding = this.findings.find(find => {
                                    return find.key === selectedFinding.key;
                                });
                                console.log('essentiallyNormal ', finding, essentiallyNormal);
                                finding.value[0].forEach(value => {
                                    if (value.text.toLocaleLowerCase() !== 'essentially normal') {
                                        value.checked = false;
                                        value.disabled = true;
                                    }
                                });
                                finding.disabledOthers = true;
                                finding.others = '';
                                selectedFinding.others = '';
                            }
                            const awakeAndAlert = selectedFinding.value.find((value) => {
                                return value.id === 1;
                            });
                            if (awakeAndAlert) {
                                const val = [];
                                val.push(awakeAndAlert);
                                selectedFinding.value = val;
                                console.log('awakeAndAlert ', awakeAndAlert);
                                const finding = this.findings.find(find => {
                                    return find.key === selectedFinding.key;
                                });
                                finding.value[0].forEach(value => {
                                    if (value.id !== 1) {
                                        value.checked = false;
                                    }
                                });
                                finding.others = '';
                                finding.disabledOthers = true;
                                selectedFinding.others = '';
                            }
                        });
                        console.log('this.selectedFindings after loading: ', this.selectedFindings);
                        if (foundSelected) {
                            this.peAllowEdit = false;
                            this.pe_modified.modified_by = result.modified_by;
                            this.pe_modified.modified_dt = result.modified_dt;
                        }
                        resolve(result.examinationData);
                    });
                }
                catch (err) {
                    this.alertServ.openAlertModal('fail', 'Failed', 'Cannot parse Physical Examination values!', 'Ok');
                    reject(err);
                }
            }, (err) => {
                console.log('err ', err);
                this.loadingService.dismiss().then(_ => {
                    const message = this.stringUtilsService.parseErrorMessage(err);
                    this.alertServ.openAlertModal('fail', 'Failed', message, 'Ok');
                    reject(err);
                });
            });
        });
    }
    onFindingCheckSelect(j, i) {
        console.log('j: ', j, 'i:', i);
        const finding = this.findings[j];
        console.log('finding: ', finding);
        const selectedFinding = this.selectedFindings.find(item => {
            return item.key === finding.key;
        });
        console.log('selectedFinding: ', selectedFinding);
        const index = selectedFinding.value.findIndex(item => {
            return item.text === finding.value[0][i].text && item.id === finding.value[0][i].id;
        });
        console.log('index', index);
        if (index < 0) {
            selectedFinding.value.push(finding.value[0][i]);
        }
        else {
            if (finding.value[0][i].text.toLocaleLowerCase() === 'essentially normal') {
                finding.disabledOthers = false;
                finding.value[0].forEach(value => {
                    value.disabled = false;
                });
            }
            else if (finding.value[0][i].id === 1) {
                finding.disabledOthers = false;
            }
            selectedFinding.value.splice(index, 1);
        }
        const essentiallyNormal = selectedFinding.value.find(item => {
            return (typeof item.text === 'string' && item.text.toLocaleLowerCase() === 'essentially normal');
        });
        if (essentiallyNormal) {
            console.log('essentiallyNormal ', essentiallyNormal);
            finding.value[0].forEach(value => {
                if (value.text.toLocaleLowerCase() !== 'essentially normal') {
                    value.checked = false;
                    value.disabled = true;
                }
            });
            finding.disabledOthers = true;
            finding.others = '';
            selectedFinding.others = '';
            const val = [];
            val.push(essentiallyNormal);
            selectedFinding.value = val;
        }
        const awakeAndAlert = selectedFinding.value.find(item => {
            return item.id === 1 && item.text === finding.value[0][i].text;
        });
        if (awakeAndAlert) {
            console.log('awakeAndAlert ', awakeAndAlert);
            finding.value[0].forEach(value => {
                if (value.id !== 1) {
                    value.checked = false;
                }
            });
            const val = [];
            val.push(awakeAndAlert);
            finding.others = '';
            finding.disabledOthers = true;
            selectedFinding.value = val;
            selectedFinding.others = '';
        }
        const alteredSensorium = selectedFinding.value.find(item => {
            return item.id === 2 && item.text === finding.value[0][i].text;
        });
        if (alteredSensorium) {
            console.log('alteredSensorium ', alteredSensorium);
            finding.value[0].forEach(value => {
                if (value.id !== 2) {
                    value.checked = false;
                }
            });
            const val = [];
            val.push(alteredSensorium);
            finding.disabledOthers = false;
            selectedFinding.others = finding.others;
            selectedFinding.value = val;
        }
        // this.formInvalid();
        console.log('this.selectedFindings: ', this.selectedFindings);
    }
    onOthersChange(j) {
        const finding = this.findings[j];
        console.log('finding: ', finding);
        const selectedFinding = this.selectedFindings.find(item => {
            return item.key === finding.key;
        });
        const othersIndex = selectedFinding.value.findIndex(item => {
            return item.id === 'others';
        });
        console.log('othersIndex: ', othersIndex);
        if (othersIndex < 0 && finding.others) {
            selectedFinding.value.push({
                id: 'others',
                text: 'Others'
            });
        }
        else if (othersIndex >= 0 && !finding.others) {
            selectedFinding.value.splice(othersIndex, 1);
        }
        selectedFinding.others = finding.others;
        console.log('selectedFinding: ', selectedFinding);
        console.log('this.selectedFindings: ', this.selectedFindings);
    }
    onSaveFindings(examinationFinding) {
        console.log('selectedFindings: ', this.selectedFindings);
        let hasError = false;
        let errorMessage;
        this.selectedFindings.forEach(element => {
            console.log('value: ', element.value);
            if (element.key === 'General Survey') {
                const alteredSensorium = element.value.find(item => {
                    return item.id === 2;
                });
                if (alteredSensorium && element.others === '') {
                    hasError = true;
                    errorMessage = 'Altered Sensorium remarks is required!';
                    return;
                }
                else if (alteredSensorium && element.others.length > 2000) {
                    hasError = true;
                    errorMessage = 'Remarks on ' + element.key + ' reached its maximum character limit.';
                    return;
                }
            }
            else {
                if (element.others.length > 200) {
                    hasError = true;
                    errorMessage = 'Remarks on ' + element.key + ' reached its maximum character limit.';
                }
            }
            if (element.value.length === 0) {
                hasError = true;
                errorMessage = 'Please select atleast 1 on ' + element.key;
            }
        });
        if (hasError) {
            this.alertServ.openAlertModal('fail', 'Failed', errorMessage, 'Ok');
            return;
        }
        console.log('this.selectedFindings', this.selectedFindings);
        // tslint:disable-next-line: max-line-length
        this.openPromptModal(this.SAVE_PHYSICAL_EXAMINATION, { examinationFinding }, 'Physical Examination', 'Would you like to save your changes?');
    }
    onSaveFindingsFunction(examinationFinding) {
        console.log('findings: ', this.findings);
        const examination = {
            encounter_no: this.selectedEncounterNo,
            findings: {}
        };
        const findings = {};
        this.selectedFindings.forEach(element => {
            findings[element.key] = {
                value: element.value,
                others: element.others
            };
        });
        examination.findings = findings;
        console.log('examination: ', examination);
        this.physicalExaminationsApiService.getExaminationArray(examination);
        this.loadingService.present();
        this.physicalExaminationsApiService.savePhysicalExamination(examination).subscribe((result) => {
            console.log('result');
            this.loadingService.dismiss().then(_ => {
                if (result && 200 === result.code) {
                    this.pe_modified.modified_by = result.modified_by;
                    this.pe_modified.modified_dt = result.modified_dt;
                    this.peAllowEdit = false;
                    this.alertServ.openAlertModal('success', 'Success', result.message);
                }
                else {
                    console.log('failed');
                    this.alertServ.openAlertModal('fail', 'Failed', result.message, 'Ok');
                }
            });
        }, (err) => {
            console.log('err ', err);
            this.loadingService.dismiss().then(_ => {
                const message = this.stringUtilsService.parseErrorMessage(err);
                this.alertServ.openAlertModal('fail', 'Failed', message, 'Ok');
            });
        });
    }
    doRefreshPhysicalExamination(event) {
        this.initFindings();
        this.getPhysicalExamination().then(_ => {
            event.target.complete();
        }).catch(_ => {
            event.target.complete();
        });
    }
    openPromptModal(option, data, title, message, ok = 'Save', cancel = 'Cancel') {
        this.alertServ.openPromptModal(title, message, ok, (result) => {
            if (result !== null) {
                console.log('result.data: ', result.data);
                if (result.data && result.data.button === 'Save') {
                    if (option === this.SAVE_PHYSICAL_EXAMINATION) {
                        this.onSaveFindingsFunction(data.examinationFinding);
                    }
                }
            }
        });
    }
    tapCoordinates(e) {
        this.y = e.touches[0].clientY;
        this.h = window.innerHeight;
        this.offsetY = (this.h - this.y);
        console.log('offset: ', this.offsetY);
    }
    keyboardShowHandler(e) {
        const kH = e.keyboardHeight;
        console.log('show: ', e.keyboardHeight);
        const bodyMove = document.querySelector('ion-app'), bodyMoveStyle = bodyMove.style;
        // Adjust full keyboard height
        bodyMoveStyle.bottom = kH + 'px';
        /*
        if (this.offsetY < kH + 40) {
          bodyMoveStyle.bottom = (kH - this.offsetY + 40) + 'px';
          // bodyMoveStyle.top = 'initial';
        }
        */
        console.log(bodyMoveStyle.bottom);
    }
    keyboardHideHandler() {
        console.log('gone');
        const removeStyles = document.querySelector('ion-app');
        removeStyles.removeAttribute('style');
    }
    removeIonAppStyles() {
        const removeStyles = document.querySelector('ion-app');
        removeStyles.removeAttribute('style');
    }
};
PhysicalExaminationsPage.ctorParameters = () => [
    { type: _services_physical_examinations_api_service__WEBPACK_IMPORTED_MODULE_2__["PhysicalExaminationsApiService"] },
    { type: _services_patient_service__WEBPACK_IMPORTED_MODULE_3__["PatientService"] },
    { type: _services_api_service__WEBPACK_IMPORTED_MODULE_7__["ApiService"] },
    { type: _services_login_service__WEBPACK_IMPORTED_MODULE_8__["LoginService"] },
    { type: _services_loading_service__WEBPACK_IMPORTED_MODULE_4__["LoadingService"] },
    { type: _services_string_utils_service__WEBPACK_IMPORTED_MODULE_6__["StringUtilsService"] },
    { type: _services_permission_validator_service__WEBPACK_IMPORTED_MODULE_5__["PermissionValidatorService"] },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_10__["MenuController"] },
    { type: src_app_app_services_alert_service_service__WEBPACK_IMPORTED_MODULE_11__["AlertServiceService"] }
];
PhysicalExaminationsPage = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-physical-examinations',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./physical-examinations.page.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/pages/physical-examinations/physical-examinations.page.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./physical-examinations.page.scss */ "./src/app/pages/physical-examinations/physical-examinations.page.scss")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_services_physical_examinations_api_service__WEBPACK_IMPORTED_MODULE_2__["PhysicalExaminationsApiService"],
        _services_patient_service__WEBPACK_IMPORTED_MODULE_3__["PatientService"],
        _services_api_service__WEBPACK_IMPORTED_MODULE_7__["ApiService"],
        _services_login_service__WEBPACK_IMPORTED_MODULE_8__["LoginService"],
        _services_loading_service__WEBPACK_IMPORTED_MODULE_4__["LoadingService"],
        _services_string_utils_service__WEBPACK_IMPORTED_MODULE_6__["StringUtilsService"],
        _services_permission_validator_service__WEBPACK_IMPORTED_MODULE_5__["PermissionValidatorService"],
        _ionic_angular__WEBPACK_IMPORTED_MODULE_10__["MenuController"],
        src_app_app_services_alert_service_service__WEBPACK_IMPORTED_MODULE_11__["AlertServiceService"]])
], PhysicalExaminationsPage);



/***/ }),

/***/ "./src/app/services/physical-examinations-api.service.ts":
/*!***************************************************************!*\
  !*** ./src/app/services/physical-examinations-api.service.ts ***!
  \***************************************************************/
/*! exports provided: PhysicalExaminationsApiService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PhysicalExaminationsApiService", function() { return PhysicalExaminationsApiService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ionic/angular */ "./node_modules/@ionic/angular/dist/fesm5.js");
/* harmony import */ var _ionic_native_http_ngx__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ionic-native/http/ngx */ "./node_modules/@ionic-native/http/ngx/index.js");







let PhysicalExaminationsApiService = class PhysicalExaminationsApiService {
    constructor(platform, httpClient, http) {
        this.platform = platform;
        this.httpClient = httpClient;
        this.http = http;
        this.url = 'http://localhost:3000';
        this.getPhysicalExaminationPath = '/api/doctor/patient/physical/examination/data';
        this.savePhysicalExaminationPath = '/api/doctor/patient/physical/examination/data/save';
    }
    setUrl(url) {
        this.url = url;
    }
    setToken(token) {
        this.token = token;
    }
    getPhysicalExamination(encounter_no) {
        if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            const params = {
                id: encounter_no
            };
            const headers = {
                Accept: 'application/json',
                Authorization: 'Bearer ' + this.token
            };
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.post(this.url + this.getPhysicalExaminationPath + '?id=' + encounter_no, {}, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])((response) => {
                const responseData = JSON.parse(response.data);
                console.log('Physical Examination: ', responseData);
                return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])((err, caught) => {
                if (typeof err.error === 'string') {
                    try {
                        err.error = JSON.parse(err.error);
                    }
                    catch (e) {
                        console.log('err.error parse failed: ', e);
                    }
                }
                console.log('Physical Examination error: ', err, caught);
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
        }
        else {
            console.log('browser');
            const params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                .set('id', encounter_no);
            console.log('params: ', params);
            const httpOptions = {
                params,
                headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                    Accept: 'application/json',
                    Authorization: 'Bearer ' + this.token
                })
            };
            console.log('httpOptions', httpOptions);
            return this.httpClient.post(this.url + this.getPhysicalExaminationPath, {}, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])((results) => {
                console.log(results);
                return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])((err, caught) => {
                console.log(caught);
                console.error(err);
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
        }
    }
    savePhysicalExamination(examinations) {
        if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            const exam = this.getExaminationArray(examinations);
            /*
            const body = {};
            exam.forEach(element => {
              body[element.key] =  element.value;
            });
            */
            const body = {};
            body.data = exam;
            console.log('body: ', body);
            const headers = {
                Accept: 'application/json',
                Authorization: 'Bearer ' + this.token
            };
            this.http.setDataSerializer('json');
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.post(this.url + this.savePhysicalExaminationPath + '?id=' + examinations.encounter_no, body, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])((response) => {
                const responseData = JSON.parse(response.data);
                console.log('Physical Examination: ', responseData);
                return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])((err, caught) => {
                if (typeof err.error === 'string') {
                    try {
                        err.error = JSON.parse(err.error);
                    }
                    catch (e) {
                        console.log('err.error parse failed: ', e);
                    }
                }
                console.log('Physical Examination error: ', err, caught);
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
        }
        else {
            console.log('browser');
            const exam = this.getExaminationArray(examinations);
            /*
            const body = new FormData();
            exam.forEach(element => {
              body.append(element.key, element.value);
            });
            */
            const body = {
                data: exam
            };
            console.log('body: ', body);
            const params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                .set('id', examinations.encounter_no);
            console.log('params: ', params);
            const httpOptions = {
                params,
                headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                    Accept: 'application/json',
                    Authorization: 'Bearer ' + this.token
                })
            };
            console.log('httpOptions', httpOptions);
            return this.httpClient.post(this.url + this.savePhysicalExaminationPath, body, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])((results) => {
                console.log(results);
                return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])((err, caught) => {
                console.log(caught);
                console.error(err);
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
        }
    }
    getExaminationArray(examination) {
        /*
        const exams = [];
        const findings = examination.findings;
        Object.keys(findings).forEach(key => {
          const finding = findings[key];
          console.log('exam: ', finding);
          finding.value.forEach(element => {
            const k = 'data[' + key + '][' + element.id + ']';
            let v = '';
            if (element.id === 2) {
              v = finding.others;
            } else if (element.id === 'others') {
              v = finding.others;
            }
            exams.push({key: k, value: v});
          });
        });
    
        console.log('exams: ', exams);
        return exams;
        */
        const data = {};
        const findings = examination.findings;
        Object.keys(findings).forEach(key => {
            const finding = findings[key];
            data[key] = {};
            finding.value.forEach((element) => {
                const k = element.id;
                let v = null;
                if (element.id === 2) {
                    v = finding.others;
                }
                else if (element.id === 'others') {
                    v = finding.others;
                }
                data[key][k] = v;
            });
        });
        Object.keys(data).forEach(key => {
            if (2 in data[key] || '2' in data[key]) {
                delete data[key].others;
            }
        });
        console.log('data: ', data);
        return data;
    }
};
PhysicalExaminationsApiService.ctorParameters = () => [
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_5__["Platform"] },
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] },
    { type: _ionic_native_http_ngx__WEBPACK_IMPORTED_MODULE_6__["HTTP"] }
];
PhysicalExaminationsApiService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_ionic_angular__WEBPACK_IMPORTED_MODULE_5__["Platform"],
        _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"],
        _ionic_native_http_ngx__WEBPACK_IMPORTED_MODULE_6__["HTTP"]])
], PhysicalExaminationsApiService);



/***/ })

}]);
//# sourceMappingURL=physical-examinations-physical-examinations-module-es2015.js.map
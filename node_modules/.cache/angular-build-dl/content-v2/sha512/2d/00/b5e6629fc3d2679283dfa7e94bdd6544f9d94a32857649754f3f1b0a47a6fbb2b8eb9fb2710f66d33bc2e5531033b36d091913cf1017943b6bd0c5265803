function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~dashboard-dashboard-module~drugs-and-medicines-drugs-and-medicines-module~drugs-and-medicine~8291062a"], {
  /***/
  "./src/app/services/array-comparator.service.ts":
  /*!******************************************************!*\
    !*** ./src/app/services/array-comparator.service.ts ***!
    \******************************************************/

  /*! exports provided: ArrayComparatorService */

  /***/
  function srcAppServicesArrayComparatorServiceTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ArrayComparatorService", function () {
      return ArrayComparatorService;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/fesm2015/core.js");

    var ArrayComparatorService =
    /*#__PURE__*/
    function () {
      function ArrayComparatorService() {
        _classCallCheck(this, ArrayComparatorService);
      }

      _createClass(ArrayComparatorService, [{
        key: "compare",
        value: function compare(arr1, arr2) {
          var objMap = {};
          arr1.forEach(function (e1) {
            return arr2.forEach(function (e2) {
              if (e1.id === e2.id) {
                objMap[e1.id] = objMap[e1.id] + 1 || 1;
              }
            });
          });
          var keys = Object.keys(objMap);
          return keys;
        }
      }]);

      return ArrayComparatorService;
    }();

    ArrayComparatorService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
      providedIn: 'root'
    }), tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])], ArrayComparatorService);
    /***/
  },

  /***/
  "./src/app/services/permission-validator.service.ts":
  /*!**********************************************************!*\
    !*** ./src/app/services/permission-validator.service.ts ***!
    \**********************************************************/

  /*! exports provided: PermissionValidatorService */

  /***/
  function srcAppServicesPermissionValidatorServiceTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "PermissionValidatorService", function () {
      return PermissionValidatorService;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/fesm2015/core.js");
    /* harmony import */


    var _services_array_comparator_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../services/array-comparator.service */
    "./src/app/services/array-comparator.service.ts");

    var PermissionValidatorService =
    /*#__PURE__*/
    function () {
      function PermissionValidatorService(arrayComparatorService) {
        _classCallCheck(this, PermissionValidatorService);

        this.arrayComparatorService = arrayComparatorService;
        this.throwsErrorCode = 5011;
        this.perms = {
          allPermission: '_a_0_all',
          manageEhr: '_a_1_ehr_sudomanage',
          viewAllDept: '_a_2_ehr_view_all_dept',
          viewOwnDept: '_a_3_ehr_view_own_dept',
          editAllDept: '_a_2_ehr_edit_all_dept',
          editOwnDept: '_a_3_ehr_edit_own_dept',
          overideInct: '_a_2_ehr_override_my_patient',
          overideInctSoap: '_a_3_ehr_soap',
          overideInctSoapDiag: '_a_2_ehr_override_final_dx',
          overideInctSoapDiag2: '_a_4_ehr_override_final_dx',
          overideInctPastMed: '_a_3_ehr_past_medical_history',
          overideInctPsigns: '_a_3_ehr_pertinent_signs_and_symptoms',
          overideInctHciRef: '_a_3_ehr_referred_hci',
          overideInctPhysExam: '_a_3_ehr_physical_examination',
          overideInctMedicat: '_a_3_ehr_medication',
          overideInctPlanMan: '_a_3_ehr_plan_management',
          overideInctEndCare: '_a_3_ehr_end_of_care'
        };
        this.portlets = {
          soap: 'soap',
          soapDiag: 'soapDiag',
          pastMed: 'pastMed',
          pSigns: 'pSings',
          refHci: 'refHci',
          physExam: 'physExam',
          medict: 'medict',
          planMan: 'planMan',
          endCare: 'endCare'
        };
      }

      _createClass(PermissionValidatorService, [{
        key: "setAuthentication",
        value: function setAuthentication(authentication) {
          this.authentication = authentication;
        }
      }, {
        key: "setSelectedPatient",
        value: function setSelectedPatient(selectedPatient) {
          this.selectedPatient = selectedPatient;
        }
      }, {
        key: "validateRole",
        value: function validateRole(validate) {
          var _this = this;

          var withIsDischarge = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
          var soapPerm = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
          this.permissions = this.authentication.user.permissions;
          this.roleName = this.authentication.user.role.role_name;
          console.log('user roleName: ', this.roleName);
          var roleNames = validate.role_name;
          var otherPermissions = validate['other-permissions'];
          var result_perm = false;
          this.authentication.user.permissions.map(function (perm) {
            if (validate[0] === 'all') {
              result_perm = perm.permission_id === '_a_0_all' ? true : false;
            } else if (validate[0] === 'sudomanage') {
              result_perm = perm.permission_id === '_a_0_all' || perm.permission_id === '_a_1_ehr_sudomanage' ? true : false;
            } else if (validate[0] === 'view_all_dept') {
              result_perm = perm.permission_id === '_a_0_all' || perm.permission_id === '_a_1_ehr_sudomanage' || perm.permission_id === '_a_2_ehr_view_all_dept' ? true : false;
            } else if (validate[0] === 'view_own_dept') {
              result_perm = perm.permission_id === '_a_0_all' || perm.permission_id === '_a_1_ehr_sudomanage' || perm.permission_id === '_a_2_ehr_view_all_dept' || perm.permission_id === '_a_3_ehr_view_own_dept' ? true : false;
            } else if (validate[0] === 'edit_all_dept') {
              result_perm = perm.permission_id === '_a_0_all' || perm.permission_id === '_a_1_ehr_sudomanage' || perm.permission_id === '_a_2_ehr_edit_all_dept' ? true : false;
            } else if (validate[0] === 'edit_own_dept') {
              result_perm = perm.permission_id === '_a_0_all' || perm.permission_id === '_a_1_ehr_sudomanage' || perm.permission_id === '_a_2_ehr_edit_all_dept' || perm.permission_id === '_a_3_ehr_edit_own_dept' ? true : false;
            } else if (validate[0] === 'override_my_patient') {
              result_perm = perm.permission_id === '_a_0_all' || perm.permission_id === '_a_1_ehr_sudomanage' || perm.permission_id === '_a_2_ehr_override_my_patient' ? true : false;
            } else if (validate[0] === 'soap') {
              result_perm = perm.permission_id === '_a_0_all' || perm.permission_id === '_a_1_ehr_sudomanage' || perm.permission_id === '_a_2_ehr_override_my_patient' || perm.permission_id === '_a_3_ehr_soap' ? true : false;
            } else if (validate[0] === 'override_final_dx') {
              result_perm = perm.permission_id === '_a_0_all' || perm.permission_id === '_a_1_ehr_sudomanage' || perm.permission_id === '_a_2_ehr_override_my_patient' || perm.permission_id === '_a_4_ehr_override_final_dx' || perm.permission_id === '_a_3_ehr_soap' ? true : false;
            } else if (validate[0] === 'past_medical_history') {
              result_perm = perm.permission_id === '_a_0_all' || perm.permission_id === '_a_1_ehr_sudomanage' || perm.permission_id === '_a_2_ehr_override_my_patient' || perm.permission_id === '_a_3_ehr_past_medical_history' ? true : false;
            } else if (validate[0] === 'pertinent_signs_and_symptoms') {
              result_perm = perm.permission_id === '_a_0_all' || perm.permission_id === '_a_1_ehr_sudomanage' || perm.permission_id === '_a_2_ehr_override_my_patient' || perm.permission_id === '_a_3_ehr_pertinent_signs_and_symptoms' ? true : false;
            } else if (validate[0] === 'referred_hci') {
              result_perm = perm.permission_id === '_a_0_all' || perm.permission_id === '_a_1_ehr_sudomanage' || perm.permission_id === '_a_2_ehr_override_my_patient' || perm.permission_id === '_a_3_ehr_referred_hci' ? true : false;
            } else if (validate[0] === 'physical_examination') {
              result_perm = perm.permission_id === '_a_0_all' || perm.permission_id === '_a_1_ehr_sudomanage' || perm.permission_id === '_a_2_ehr_override_my_patient' || perm.permission_id === '_a_3_ehr_physical_examination' ? true : false;
            } else if (validate[0] === 'medication') {
              result_perm = perm.permission_id === '_a_0_all' || perm.permission_id === '_a_1_ehr_sudomanage' || perm.permission_id === '_a_2_ehr_override_my_patient' || perm.permission_id === '_a_3_ehr_medication' ? true : false;
            } else if (validate[0] === 'plan_managem') {
              result_perm = perm.permission_id === '_a_0_all' || perm.permission_id === '_a_1_ehr_sudomanage' || perm.permission_id === '_a_2_ehr_override_my_patient' || perm.permission_id === '_a_3_ehr_plan_management' ? true : false;
            } else if (validate[0] === 'end_of_care') {
              result_perm = perm.permission_id === '_a_0_all' || perm.permission_id === '_a_1_ehr_sudomanage' || perm.permission_id === '_a_2_ehr_override_my_patient' || perm.permission_id === '_a_3_ehr_end_of_care' ? true : false;
            }
          });

          if (soapPerm) {
            return result_perm;
          }

          console.log('roleNames: ', roleNames);
          var validRole = true;

          if (Array.isArray(roleNames) && roleNames.length > 0) {
            var index = roleNames.findIndex(function (element) {
              console.log('element: ', element, ' this.roleName: ', _this.roleName);
              return _this.roleName.toUpperCase().indexOf(element.toUpperCase()) != -1; // return element === this.roleName;
            });
            console.log('index: ', index);
            validRole = index >= 0;
          }

          console.log('validRole: ', validRole);
          var validOtherPermission = false;

          if (Array.isArray(otherPermissions) && otherPermissions.length > 0) {
            var keys = this.arrayComparatorService.compare(otherPermissions, this.permissions);
            validOtherPermission = keys.length > 0;
          }

          console.log('validOtherPermission: ', validOtherPermission);

          if (withIsDischarge) {
            console.log('selectedPatient: ', this.selectedPatient);

            if (this.selectedPatient) {
              if (this.selectedPatient.is_discharged == 1) {
                console.log('is_discharged');
                return validOtherPermission;
              }
            }
          }

          return true;
          return validRole || validOtherPermission;
        }
      }, {
        key: "hasAllPermission",
        value: function hasAllPermission() {
          var _this2 = this;

          return this.authentication.user.permissions.some(function (p) {
            return p.permission_id == _this2.perms.allPermission;
          });
        }
      }, {
        key: "hasManageEhr",
        value: function hasManageEhr() {
          var _this3 = this;

          return this.authentication.user.permissions.some(function (p) {
            return p.permission_id == _this3.perms.manageEhr;
          });
        }
      }, {
        key: "hasEdit",
        value: function hasEdit() {
          var _this4 = this;

          if (this.authentication.user.permissions.some(function (p) {
            return p.permission_id == _this4.perms.editAllDept;
          })) return true;
          return this.authentication.user.permissions.some(function (p) {
            return p.permission_id == _this4.perms.editOwnDept;
          }) && this.selectedPatient.isInMyDept;
        }
      }, {
        key: "hasView",
        value: function hasView() {
          var _this5 = this;

          if (this.authentication.user.permissions.some(function (p) {
            return p.permission_id == _this5.perms.viewAllDept;
          })) return true;
          return this.authentication.user.permissions.some(function (p) {
            return p.permission_id == _this5.perms.viewOwnDept;
          }) && this.selectedPatient.isInMyDept;
        }
      }, {
        key: "hasHigherPermission",
        value: function hasHigherPermission() {
          return this.hasAllPermission() || this.hasManageEhr();
        }
      }, {
        key: "hasOverInct",
        value: function hasOverInct() {
          var _this6 = this;

          return this.authentication.user.permissions.some(function (p) {
            return p.permission_id == _this6.perms.overideInct;
          });
        }
      }, {
        key: "hasDischPerm",
        value: function hasDischPerm(type) {
          var _this7 = this;

          if (!(this.hasView() || this.hasEdit())) return false;
          if (this.hasOverInct()) return true;

          switch (type) {
            case this.portlets.soap:
              return this.authentication.user.permissions.some(function (p) {
                return p.permission_id == _this7.perms.overideInctSoap;
              });

            case this.portlets.soapDiag:
              return this.authentication.user.permissions.some(function (p) {
                return p.permission_id == _this7.perms.overideInctSoapDiag || p.permission_id == _this7.perms.overideInctSoapDiag2;
              });

            case this.portlets.pastMed:
              return this.authentication.user.permissions.some(function (p) {
                return p.permission_id == _this7.perms.overideInctPastMed;
              });

            case this.portlets.pSigns:
              return this.authentication.user.permissions.some(function (p) {
                return p.permission_id == _this7.perms.overideInctPsigns;
              });

            case this.portlets.refHci:
              return this.authentication.user.permissions.some(function (p) {
                return p.permission_id == _this7.perms.overideInctHciRef;
              });

            case this.portlets.physExam:
              return this.authentication.user.permissions.some(function (p) {
                return p.permission_id == _this7.perms.overideInctPhysExam;
              });

            case this.portlets.medict:
              return this.authentication.user.permissions.some(function (p) {
                return p.permission_id == _this7.perms.overideInctMedicat;
              });

            case this.portlets.planMan:
              return this.authentication.user.permissions.some(function (p) {
                return p.permission_id == _this7.perms.overideInctPlanMan;
              });

            case this.portlets.endCare:
              return this.authentication.user.permissions.some(function (p) {
                return p.permission_id == _this7.perms.overideInctEndCare;
              });
          }

          return false;
        }
      }, {
        key: "isDischarged",
        value: function isDischarged() {
          if (this.selectedPatient) return this.selectedPatient.is_discharged == 1;
          return false;
        }
      }, {
        key: "hasSoapEdit",
        value: function hasSoapEdit() {
          if (this.hasHigherPermission()) return true;else if (this.isDischarged()) return this.hasDischPerm(this.portlets.soap);
          return this.hasEdit();
        }
      }, {
        key: "hasSoapDiagEdit",
        value: function hasSoapDiagEdit() {
          if (this.hasHigherPermission()) return true;else if (this.isDischarged()) return this.hasDischPerm(this.portlets.soapDiag);
          return this.hasEdit();
        }
      }, {
        key: "hasSoapView",
        value: function hasSoapView() {
          if (this.hasSoapEdit() || this.hasView() || this.hasEdit()) return true;
          return false;
        }
      }, {
        key: "hasPastMedEdit",
        value: function hasPastMedEdit() {
          if (this.hasHigherPermission()) return true;else if (this.isDischarged()) return this.hasDischPerm(this.portlets.pastMed);
          return this.hasEdit();
        }
      }, {
        key: "hasPastView",
        value: function hasPastView() {
          if (this.hasPastMedEdit() || this.hasView() || this.hasEdit()) return true;
          return false;
        }
      }, {
        key: "hasPSignsEdit",
        value: function hasPSignsEdit() {
          if (this.hasHigherPermission()) return true;else if (this.isDischarged()) return this.hasDischPerm(this.portlets.pSigns);
          return this.hasEdit();
        }
      }, {
        key: "hasPSingsView",
        value: function hasPSingsView() {
          if (this.hasPSignsEdit() || this.hasView() || this.hasEdit()) return true;
          return false;
        }
      }, {
        key: "hasVitalSignsView",
        value: function hasVitalSignsView() {
          if (this.hasHigherPermission()) return true;else if (this.hasView() || this.hasEdit() || this.hasEdit()) return true;
          return false;
        }
      }, {
        key: "hasRefHciEdit",
        value: function hasRefHciEdit() {
          if (this.hasHigherPermission()) return true;else if (this.isDischarged()) return this.hasDischPerm(this.portlets.refHci);
          return this.hasEdit();
        }
      }, {
        key: "hasRefHciView",
        value: function hasRefHciView() {
          if (this.hasRefHciEdit() || this.hasView() || this.hasEdit()) return true;
          return false;
        }
      }, {
        key: "hasPhysExamEdit",
        value: function hasPhysExamEdit() {
          if (this.hasHigherPermission()) return true;else if (this.isDischarged()) return this.hasDischPerm(this.portlets.physExam);
          return this.hasEdit();
        }
      }, {
        key: "hasPhysExamView",
        value: function hasPhysExamView() {
          if (this.hasPhysExamEdit() || this.hasView() || this.hasEdit()) return true;
          return false;
        }
      }, {
        key: "hasResultView",
        value: function hasResultView() {
          if (this.hasHigherPermission()) return true;else if (this.hasView() || this.hasEdit() || this.hasEdit()) return true;
          return false;
        }
      }, {
        key: "hasDrugsMedsEdit",
        value: function hasDrugsMedsEdit() {
          if (this.hasHigherPermission()) return true;else if (this.isDischarged()) return this.hasDischPerm(this.portlets.medict);
          return this.hasEdit();
        }
      }, {
        key: "hasDrugsMedsView",
        value: function hasDrugsMedsView() {
          if (this.hasDrugsMedsEdit() || this.hasView() || this.hasEdit()) return true;
          return false;
        }
      }, {
        key: "hasEncHistView",
        value: function hasEncHistView() {
          if (this.hasHigherPermission()) return true;else if (this.hasView() || this.hasEdit() || this.hasEdit()) return true;
          return false;
        }
      }, {
        key: "hasReferalsView",
        value: function hasReferalsView() {
          if (this.hasHigherPermission()) return true;else if (this.hasView() || this.hasEdit() || this.hasEdit()) return true;
          return false;
        }
      }, {
        key: "hasEndCareEdit",
        value: function hasEndCareEdit() {
          if (this.hasHigherPermission()) return true;else if (this.isDischarged()) return this.hasDischPerm(this.portlets.endCare);
          return this.hasEdit();
        }
      }, {
        key: "hasEndCareView",
        value: function hasEndCareView() {
          if (this.hasEndCareEdit() || this.hasView() || this.hasEdit()) return true;
          return false;
        }
      }, {
        key: "hasPlanManEdit",
        value: function hasPlanManEdit() {
          if (this.hasHigherPermission()) return true;else if (this.isDischarged()) return this.hasDischPerm(this.portlets.planMan);
          return this.hasEdit();
        }
      }, {
        key: "hasPlanManView",
        value: function hasPlanManView() {
          if (this.hasPlanManEdit() || this.hasView() || this.hasEdit()) return true;
          return false;
        }
      }]);

      return PermissionValidatorService;
    }();

    PermissionValidatorService.ctorParameters = function () {
      return [{
        type: _services_array_comparator_service__WEBPACK_IMPORTED_MODULE_2__["ArrayComparatorService"]
      }];
    };

    PermissionValidatorService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
      providedIn: 'root'
    }), tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_services_array_comparator_service__WEBPACK_IMPORTED_MODULE_2__["ArrayComparatorService"]])], PermissionValidatorService);
    /***/
  }
}]);
//# sourceMappingURL=default~dashboard-dashboard-module~drugs-and-medicines-drugs-and-medicines-module~drugs-and-medicine~8291062a-es5.js.map
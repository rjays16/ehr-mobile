function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~doctor-order-doctor-order-module~laboratory-order-laboratory-order-module~plan-management-pl~5fb2b03d"], {
  /***/
  "./src/app/services/plan-management-api.service.ts":
  /*!*********************************************************!*\
    !*** ./src/app/services/plan-management-api.service.ts ***!
    \*********************************************************/

  /*! exports provided: PlanManagementApiService */

  /***/
  function srcAppServicesPlanManagementApiServiceTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "PlanManagementApiService", function () {
      return PlanManagementApiService;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/fesm2015/core.js");
    /* harmony import */


    var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! @angular/common/http */
    "./node_modules/@angular/common/fesm2015/http.js");
    /* harmony import */


    var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! rxjs */
    "./node_modules/rxjs/_esm2015/index.js");
    /* harmony import */


    var rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! rxjs/operators */
    "./node_modules/rxjs/_esm2015/operators/index.js");
    /* harmony import */


    var _ionic_angular__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! @ionic/angular */
    "./node_modules/@ionic/angular/dist/fesm5.js");
    /* harmony import */


    var _ionic_native_http_ngx__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! @ionic-native/http/ngx */
    "./node_modules/@ionic-native/http/ngx/index.js");

    var PlanManagementApiService =
    /*#__PURE__*/
    function () {
      function PlanManagementApiService(platform, httpClient, http) {
        _classCallCheck(this, PlanManagementApiService);

        this.platform = platform;
        this.httpClient = httpClient;
        this.http = http;
        this.url = 'http://localhost:3000';
        this.getAllOrdersPath = '/api/doctor/planmanagement/getAllOrders';
        this.postFinalizeRequrestOrdersPath = '/api/doctor/planmanagement/finalize/orders';
        this.postMedicineSearchPath = '/api/doctor/medicine/search';
        this.postPrescriptionSavePath = '/api/doctor/prescription/save';
        this.getPrescriptionPrintFilePath = '/api/doctor/patient/prescription/file/path';
        this.postCoursewardSavePath = '/api/doctor/courseward/save';
        this.postCoursewardDeletePath = '/api/doctor/courseward/delete';
        this.postReferralSavePath = '/api/doctor/referral/save';
        this.postReferralDeletePath = '/api/doctor/referral/delete';
        this.postDiagnosticLaboratorySavePath = '/api/doctor/diagnostic/lab/save';
        this.postDiagnosticLaboratoryDeletePath = '/api/doctor/diagnostic/lab/delete';
        this.postDiagnosticRadiologySavePath = '/api/doctor/diagnostic/rad/save';
        this.postDiagnosticRadiologyDeletePath = '/api/doctor/diagnostic/rad/delete';
        this.postRepetitiveDeletePath = '/api/doctor/repetitive/delete';
        this.postRepetitiveSavePath = '/api/doctor/repetitive/save';
        this.postFinalizedRepetitiveDeletePath = '/api/doctor/finalized/repetitive/delete';
      }

      _createClass(PlanManagementApiService, [{
        key: "setUrl",
        value: function setUrl(url) {
          this.url = url;
        }
      }, {
        key: "setToken",
        value: function setToken(token) {
          this.token = token;
        }
      }, {
        key: "finalizeRequestOrders",
        value: function finalizeRequestOrders(encounter_no) {
          if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            var headers = {
              Accept: 'application/json',
              Authorization: 'Bearer ' + this.token
            };
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.post(this.url + this.postFinalizeRequrestOrdersPath + '?encounterNo=' + encounter_no, {}, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (response) {
              var responseData = JSON.parse(response.data);
              console.log('Plan management all orders: ', responseData);
              return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              if (typeof err.error === 'string') {
                try {
                  err.error = JSON.parse(err.error);
                } catch (e) {
                  console.log('err.error parse failed: ', e);
                }
              }

              console.log('Plan management all orders error: ', err, caught);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          } else {
            console.log('browser');
            var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]().set('encounterNo', encounter_no);
            console.log('params: ', params);
            var httpOptions = {
              params: params,
              headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                Accept: 'application/json',
                Authorization: 'Bearer ' + this.token
              })
            };
            console.log('httpOptions', httpOptions);
            return this.httpClient.post(this.url + this.postFinalizeRequrestOrdersPath, {}, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (results) {
              console.log(results);
              return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              console.log(caught);
              console.error(err);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          }
        }
      }, {
        key: "getAllOrders",
        value: function getAllOrders(encounter_no) {
          if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            var headers = {
              Accept: 'application/json',
              Authorization: 'Bearer ' + this.token
            };
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.post(this.url + this.getAllOrdersPath + '?encounterNo=' + encounter_no, {}, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (response) {
              var responseData = JSON.parse(response.data);
              console.log('Plan management all orders: ', responseData);
              return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              if (typeof err.error === 'string') {
                try {
                  err.error = JSON.parse(err.error);
                } catch (e) {
                  console.log('err.error parse failed: ', e);
                }
              }

              console.log('Plan management all orders error: ', err, caught);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          } else {
            console.log('browser');
            var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]().set('encounterNo', encounter_no);
            console.log('params: ', params);
            var httpOptions = {
              params: params,
              headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                Accept: 'application/json',
                Authorization: 'Bearer ' + this.token
              })
            };
            console.log('httpOptions', httpOptions);
            return this.httpClient.post(this.url + this.getAllOrdersPath, {}, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (results) {
              console.log(results);
              return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              console.log(caught);
              console.error(err);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          }
        }
      }, {
        key: "searchMedicine",
        value: function searchMedicine(query) {
          if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            var headers = {
              Accept: 'application/json',
              Authorization: 'Bearer ' + this.token
            };
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.post(this.url + this.postMedicineSearchPath + '?q=' + query, {}, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (response) {
              var responseData = JSON.parse(response.data);
              console.log('Plan management all orders: ', responseData);
              return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              if (typeof err.error === 'string') {
                try {
                  err.error = JSON.parse(err.error);
                } catch (e) {
                  console.log('err.error parse failed: ', e);
                }
              }

              console.log('Plan management all orders error: ', err, caught);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          } else {
            console.log('browser');
            var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]().set('q', query);
            console.log('params: ', params);
            var httpOptions = {
              params: params,
              headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                Accept: 'application/json',
                Authorization: 'Bearer ' + this.token
              })
            };
            console.log('httpOptions', httpOptions);
            return this.httpClient.post(this.url + this.postMedicineSearchPath, {}, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (results) {
              console.log(results);
              return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              console.log(caught);
              console.error(err);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          }
        }
      }, {
        key: "savePrescription",
        value: function savePrescription(encounter_no, prescription_list) {
          if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            var params = {
              orders: prescription_list
            };
            var headers = {
              Accept: 'application/json',
              'Content-Type': 'application/json',
              Authorization: 'Bearer ' + this.token
            };
            this.http.setDataSerializer('json');
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.post(this.url + this.postPrescriptionSavePath + '?encounterNo=' + encounter_no, params, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (response) {
              var responseData = JSON.parse(response.data);
              console.log('Save prescriptions: ', responseData);
              return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              if (typeof err.error === 'string') {
                try {
                  err.error = JSON.parse(err.error);
                } catch (e) {
                  console.log('err.error parse failed: ', e);
                }
              }

              console.log('Save prescriptions error: ', err, caught);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          } else {
            console.log('browser');
            var body = {
              orders: prescription_list
            };
            console.log('body: ', body);

            var _params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]().set('encounterNo', encounter_no);

            console.log('params: ', _params);
            var httpOptions = {
              params: _params,
              headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                Accept: 'application/json',
                Authorization: 'Bearer ' + this.token
              })
            };
            console.log('httpOptions', httpOptions);
            return this.httpClient.post(this.url + this.postPrescriptionSavePath, body, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (results) {
              console.log(results);
              return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              console.log(caught);
              console.error(err);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          }
        }
      }, {
        key: "saveCourseward",
        value: function saveCourseward(courseward) {
          if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            var headers = {
              Accept: 'application/json',
              'Content-Type': 'application/json',
              Authorization: 'Bearer ' + this.token
            };
            var data = {};
            Object.keys(courseward).forEach(function (key) {
              if (key !== 'encounter_no') {
                data[key] = courseward[key];
              }
            });
            var body = {
              data: data
            };
            console.log('body: ', body);
            this.http.setDataSerializer('json');
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.post(this.url + this.postCoursewardSavePath + '?encounterNo=' + courseward.encounter_no, body, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (response) {
              var responseData = JSON.parse(response.data);
              console.log('Plan management all orders: ', responseData);
              return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              if (typeof err.error === 'string') {
                try {
                  err.error = JSON.parse(err.error);
                } catch (e) {
                  console.log('err.error parse failed: ', e);
                }
              }

              console.log('Plan management all orders error: ', err, caught);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          } else {
            console.log('browser');
            var _data = {};
            Object.keys(courseward).forEach(function (key) {
              if (key !== 'encounter_no') {
                _data[key] = courseward[key];
              }
            });
            var _body = {
              data: _data
            };
            console.log('body: ', _body);
            var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]().set('encounterNo', courseward.encounter_no);
            console.log('params: ', params);
            var httpOptions = {
              params: params,
              headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                Accept: 'application/json',
                'Content-Type': 'application/json',
                Authorization: 'Bearer ' + this.token
              })
            };
            console.log('httpOptions', httpOptions);
            return this.httpClient.post(this.url + this.postCoursewardSavePath, _body, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (results) {
              console.log(results);
              return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              console.log(caught);
              console.error(err);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          }
        }
      }, {
        key: "deleteCourseward",
        value: function deleteCourseward(encounter_no, id) {
          if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            var headers = {
              Accept: 'application/json',
              Authorization: 'Bearer ' + this.token
            };
            var body = {
              'data[id]': id
            };
            console.log('body: ', body); // tslint:disable-next-line: max-line-length

            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.post(this.url + this.postCoursewardDeletePath + '?encounterNo=' + encounter_no + '&orders=' + id, {}, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (response) {
              var responseData = JSON.parse(response.data);
              console.log('Plan management all orders: ', responseData);
              return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              if (typeof err.error === 'string') {
                try {
                  err.error = JSON.parse(err.error);
                } catch (e) {
                  console.log('err.error parse failed: ', e);
                }
              }

              console.log('Plan management all orders error: ', err, caught);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          } else {
            console.log('browser');

            var _body2 = new FormData();

            _body2.append('data[id]', id);

            console.log('body: ', _body2);
            var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]().set('encounterNo', encounter_no).set('orders', id);
            console.log('params: ', params);
            var httpOptions = {
              params: params,
              headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                Accept: 'application/json',
                Authorization: 'Bearer ' + this.token
              })
            };
            console.log('httpOptions', httpOptions);
            return this.httpClient.post(this.url + this.postCoursewardDeletePath, {}, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (results) {
              console.log(results);
              return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              console.log(caught);
              console.error(err);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          }
        }
      }, {
        key: "saveReferral",
        value: function saveReferral(referral) {
          if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            var headers = {
              Accept: 'application/json',
              'Content-Type': 'application/json',
              Authorization: 'Bearer ' + this.token
            };
            var data = {};
            Object.keys(referral).forEach(function (key) {
              if (key !== 'encounter_no') {
                data[key] = referral[key];
              }
            });
            var body = {
              data: data
            };
            console.log('body: ', body);
            this.http.setDataSerializer('json');
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.post(this.url + this.postReferralSavePath + '?encounterNo=' + referral.encounter_no, body, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (response) {
              var responseData = JSON.parse(response.data);
              console.log('Plan management all orders: ', responseData);
              return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              if (typeof err.error === 'string') {
                try {
                  err.error = JSON.parse(err.error);
                } catch (e) {
                  console.log('err.error parse failed: ', e);
                }
              }

              console.log('Plan management all orders error: ', err, caught);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          } else {
            console.log('browser');
            var _data2 = {};
            Object.keys(referral).forEach(function (key) {
              if (key !== 'encounter_no') {
                _data2[key] = referral[key];
              }
            });
            var _body3 = {
              data: _data2
            };
            console.log('body: ', _body3);
            var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]().set('encounterNo', referral.encounter_no);
            console.log('params: ', params);
            var httpOptions = {
              params: params,
              headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                Accept: 'application/json',
                Authorization: 'Bearer ' + this.token
              })
            };
            console.log('httpOptions', httpOptions);
            return this.httpClient.post(this.url + this.postReferralSavePath, _body3, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (results) {
              console.log(results);
              return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              console.log(caught);
              console.error(err);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          }
        }
      }, {
        key: "deleteReferral",
        value: function deleteReferral(encounter_no, id) {
          if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            var headers = {
              Accept: 'application/json',
              Authorization: 'Bearer ' + this.token
            };
            var body = {
              'data': {
                'id': id
              }
            };
            this.http.setDataSerializer('json');
            console.log('body: ', body);
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.post(this.url + this.postReferralDeletePath + '?encounterNo=' + encounter_no, body, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (response) {
              var responseData = JSON.parse(response.data);
              console.log('Plan management all orders: ', responseData);
              return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              if (typeof err.error === 'string') {
                try {
                  err.error = JSON.parse(err.error);
                } catch (e) {
                  console.log('err.error parse failed: ', e);
                }
              }

              console.log('Plan management all orders error: ', err, caught);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          } else {
            console.log('browser');

            var _body4 = new FormData();

            _body4.append('data[id]', id);

            console.log('body: ', _body4);
            var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]().set('encounterNo', encounter_no);
            console.log('params: ', params);
            var httpOptions = {
              params: params,
              headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                Accept: 'application/json',
                Authorization: 'Bearer ' + this.token
              })
            };
            console.log('httpOptions', httpOptions);
            return this.httpClient.post(this.url + this.postReferralDeletePath, _body4, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (results) {
              console.log(results);
              return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              console.log(caught);
              console.error(err);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          }
        }
      }, {
        key: "saveDiagnosticLaboratory",
        value: function saveDiagnosticLaboratory(encounter_no, orders) {
          if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            var params = {
              orders: orders
            };
            var headers = {
              Accept: 'application/json',
              'Content-Type': 'application/json',
              Authorization: 'Bearer ' + this.token
            };
            this.http.setDataSerializer('json');
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.post(this.url + this.postDiagnosticLaboratorySavePath + '?encounterNo=' + encounter_no, params, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (response) {
              var responseData = JSON.parse(response.data);
              console.log('Save prescriptions: ', responseData);
              return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              if (typeof err.error === 'string') {
                try {
                  err.error = JSON.parse(err.error);
                } catch (e) {
                  console.log('err.error parse failed: ', e);
                }
              }

              console.log('Save prescriptions error: ', err, caught);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          } else {
            console.log('browser');
            var body = {
              orders: orders
            };
            console.log('body: ', body);

            var _params2 = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]().set('encounterNo', encounter_no);

            console.log('params: ', _params2);
            var httpOptions = {
              params: _params2,
              headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                Accept: 'application/json',
                Authorization: 'Bearer ' + this.token
              })
            };
            console.log('httpOptions', httpOptions);
            return this.httpClient.post(this.url + this.postDiagnosticLaboratorySavePath, body, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (results) {
              console.log(results);
              return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              console.log(caught);
              console.error(err);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          }
        }
      }, {
        key: "deleteDiagnosticLaboratory",
        value: function deleteDiagnosticLaboratory(encounter_no, id) {
          if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            var body = {
              'data[id]': id
            };
            console.log('body: ', body);
            var headers = {
              Accept: 'application/json',
              Authorization: 'Bearer ' + this.token
            }; // tslint:disable-next-line: max-line-length

            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.post(this.url + this.postDiagnosticLaboratoryDeletePath + '?encounterNo=' + encounter_no, body, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (response) {
              var responseData = JSON.parse(response.data);
              console.log('Save prescriptions: ', responseData);
              return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              if (typeof err.error === 'string') {
                try {
                  err.error = JSON.parse(err.error);
                } catch (e) {
                  console.log('err.error parse failed: ', e);
                }
              }

              console.log('Save prescriptions error: ', err, caught);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          } else {
            console.log('browser');

            var _body5 = new FormData();

            _body5.append('data[id]', id);

            console.log('body: ', _body5);
            var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]().set('encounterNo', encounter_no);
            console.log('params: ', params);
            var httpOptions = {
              params: params,
              headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                Accept: 'application/json',
                Authorization: 'Bearer ' + this.token
              })
            };
            console.log('httpOptions', httpOptions);
            return this.httpClient.post(this.url + this.postDiagnosticLaboratoryDeletePath, _body5, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (results) {
              console.log(results);
              return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              console.log(caught);
              console.error(err);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          }
        }
      }, {
        key: "saveDiagnosticRadiology",
        value: function saveDiagnosticRadiology(encounter_no, orders) {
          if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            var params = {
              orders: orders
            };
            var headers = {
              Accept: 'application/json',
              'Content-Type': 'application/json',
              Authorization: 'Bearer ' + this.token
            };
            this.http.setDataSerializer('json');
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.post(this.url + this.postDiagnosticRadiologySavePath + '?encounterNo=' + encounter_no, params, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (response) {
              var responseData = JSON.parse(response.data);
              console.log('Save prescriptions: ', responseData);
              return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              if (typeof err.error === 'string') {
                try {
                  err.error = JSON.parse(err.error);
                } catch (e) {
                  console.log('err.error parse failed: ', e);
                }
              }

              console.log('Save prescriptions error: ', err, caught);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          } else {
            console.log('browser');
            var body = {
              orders: orders
            };
            console.log('body: ', body);

            var _params3 = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]().set('encounterNo', encounter_no);

            console.log('params: ', _params3);
            var httpOptions = {
              params: _params3,
              headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                Accept: 'application/json',
                Authorization: 'Bearer ' + this.token
              })
            };
            console.log('httpOptions', httpOptions);
            return this.httpClient.post(this.url + this.postDiagnosticRadiologySavePath, body, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (results) {
              console.log(results);
              return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              console.log(caught);
              console.error(err);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          }
        }
      }, {
        key: "deleteDiagnosticRadiology",
        value: function deleteDiagnosticRadiology(encounter_no, id) {
          if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            var body = {
              'data[id]': id
            };
            console.log('body: ', body);
            var headers = {
              Accept: 'application/json',
              Authorization: 'Bearer ' + this.token
            }; // tslint:disable-next-line: max-line-length

            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.post(this.url + this.postDiagnosticRadiologyDeletePath + '?encounterNo=' + encounter_no, body, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (response) {
              var responseData = JSON.parse(response.data);
              console.log('Save prescriptions: ', responseData);
              return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              if (typeof err.error === 'string') {
                try {
                  err.error = JSON.parse(err.error);
                } catch (e) {
                  console.log('err.error parse failed: ', e);
                }
              }

              console.log('Save prescriptions error: ', err, caught);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          } else {
            console.log('browser');

            var _body6 = new FormData();

            _body6.append('data[id]', id);

            console.log('body: ', _body6);
            var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]().set('encounterNo', encounter_no);
            console.log('params: ', params);
            var httpOptions = {
              params: params,
              headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                Accept: 'application/json',
                Authorization: 'Bearer ' + this.token
              })
            };
            console.log('httpOptions', httpOptions);
            return this.httpClient.post(this.url + this.postDiagnosticRadiologyDeletePath, _body6, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (results) {
              console.log(results);
              return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              console.log(caught);
              console.error(err);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          }
        }
      }, {
        key: "saveRepetitive",
        value: function saveRepetitive(encounter_no, repetitiveData) {
          if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            var headers = {
              Accept: 'application/json',
              Authorization: 'Bearer ' + this.token
            };
            var data = {};
            Object.keys(repetitiveData).forEach(function (key) {
              data[key] = repetitiveData[key];
            });
            var body = {
              data: data
            };
            console.log('body: ', body);
            this.http.setDataSerializer('json'); // tslint:disable-next-line: max-line-length

            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.post(this.url + this.postRepetitiveSavePath + '?encounterNo=' + encounter_no, body, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (response) {
              var responseData = JSON.parse(response.data);
              return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              if (typeof err.error === 'string') {
                try {
                  err.error = JSON.parse(err.error);
                } catch (e) {
                  console.log('err.error parse failed: ', e);
                }
              }

              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          } else {
            console.log('browser');
            var _data3 = {};
            Object.keys(repetitiveData).forEach(function (key) {
              _data3[key] = repetitiveData[key];
            });
            var _body7 = {
              data: _data3
            };
            console.log('body: ', _body7);
            var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]().set('encounterNo', encounter_no);
            console.log('params: ', params);
            var httpOptions = {
              params: params,
              headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                Accept: 'application/json',
                Authorization: 'Bearer ' + this.token
              })
            };
            console.log('httpOptions', httpOptions);
            return this.httpClient.post(this.url + this.postRepetitiveSavePath, _body7, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (results) {
              console.log(results);
              return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              console.log(caught);
              console.error(err);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          }
        }
      }, {
        key: "deleteRepetitive",
        value: function deleteRepetitive(encounter_no, id) {
          if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            var body = {
              'data': id
            };
            console.log('body: ', body);
            var headers = {
              Accept: 'application/json',
              Authorization: 'Bearer ' + this.token
            }; // tslint:disable-next-line: max-line-length

            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.post(this.url + this.postRepetitiveDeletePath + '?encounterNo=' + encounter_no, body, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (response) {
              var responseData = JSON.parse(response.data);
              return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              if (typeof err.error === 'string') {
                try {
                  err.error = JSON.parse(err.error);
                } catch (e) {
                  console.log('err.error parse failed: ', e);
                }
              }

              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          } else {
            console.log('browser');

            var _body8 = new FormData();

            _body8.append('data', id);

            console.log('body: ', _body8);
            var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]().set('encounterNo', encounter_no);
            console.log('params: ', params);
            var httpOptions = {
              params: params,
              headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                Accept: 'application/json',
                Authorization: 'Bearer ' + this.token
              })
            };
            console.log('httpOptions', httpOptions);
            return this.httpClient.post(this.url + this.postRepetitiveDeletePath, _body8, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (results) {
              console.log(results);
              return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              console.log(caught);
              console.error(err);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          }
        }
      }, {
        key: "deleteFinalizedRepetitive",
        value: function deleteFinalizedRepetitive(encounter_no, id, encounterCourseWardID) {
          if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            var body = {
              'data': id,
              'encounterCourseWardID': encounterCourseWardID
            };
            console.log('body: ', body);
            var headers = {
              Accept: 'application/json',
              Authorization: 'Bearer ' + this.token
            }; // tslint:disable-next-line: max-line-length

            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.post(this.url + this.postFinalizedRepetitiveDeletePath + '?encounterNo=' + encounter_no, body, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (response) {
              var responseData = JSON.parse(response.data);
              return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              if (typeof err.error === 'string') {
                try {
                  err.error = JSON.parse(err.error);
                } catch (e) {
                  console.log('err.error parse failed: ', e);
                }
              }

              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          } else {
            console.log('browser');

            var _body9 = new FormData();

            _body9.append('data', id);

            _body9.append('encounterCourseWardID', encounterCourseWardID);

            console.log('body: ', _body9);
            var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]().set('encounterNo', encounter_no);
            console.log('params: ', params);
            var httpOptions = {
              params: params,
              headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                Accept: 'application/json',
                Authorization: 'Bearer ' + this.token
              })
            };
            console.log('httpOptions', httpOptions);
            return this.httpClient.post(this.url + this.postFinalizedRepetitiveDeletePath, _body9, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (results) {
              console.log(results);
              return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              console.log(caught);
              console.error(err);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          }
        }
      }, {
        key: "getPrescriptionPrintFile",
        value: function getPrescriptionPrintFile(encounter_no, prescriptions) {
          if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            var params = {
              encounter_no: encounter_no,
              is_group: '1'
            };
            Object.keys(prescriptions).forEach(function (key) {
              params[key] = prescriptions[key];
            });
            console.log('params: ', params);
            var headers = {
              Accept: 'application/json',
              'Content-Type': 'application/json',
              Authorization: 'Bearer ' + this.token
            };
            console.log('headers: ', headers);
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.get(this.url + this.getPrescriptionPrintFilePath, params, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (response) {
              var responseData = JSON.parse(response.data);
              console.log('Prescription Print File: ', responseData);
              return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              if (typeof err.error === 'string') {
                try {
                  err.error = JSON.parse(err.error);
                } catch (e) {
                  console.log('err.error parse failed: ', e);
                }
              }

              console.log('Prescription Print File error: ', err, caught);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          } else {
            console.log('browser');

            var _params4;

            _params4 = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]().set('encounterNo', encounter_no).set('is_group', '1');
            Object.keys(prescriptions).forEach(function (key) {
              _params4.append(key, prescriptions[key]);
            });
            console.log('params: ', _params4);
            var httpOptions = {
              params: _params4,
              headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                Accept: 'application/json',
                'Content-Type': 'application/json',
                Authorization: 'Bearer ' + this.token
              })
            };
            console.log('httpOptions', httpOptions);
            return this.httpClient.get(this.url + this.getPrescriptionPrintFilePath, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (results) {
              console.log(results);
              return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              console.log(caught);
              console.error(err);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          }
        }
      }]);

      return PlanManagementApiService;
    }();

    PlanManagementApiService.ctorParameters = function () {
      return [{
        type: _ionic_angular__WEBPACK_IMPORTED_MODULE_5__["Platform"]
      }, {
        type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"]
      }, {
        type: _ionic_native_http_ngx__WEBPACK_IMPORTED_MODULE_6__["HTTP"]
      }];
    };

    PlanManagementApiService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
      providedIn: 'root'
    }), tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_ionic_angular__WEBPACK_IMPORTED_MODULE_5__["Platform"], _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"], _ionic_native_http_ngx__WEBPACK_IMPORTED_MODULE_6__["HTTP"]])], PlanManagementApiService);
    /***/
  },

  /***/
  "./src/app/services/plan-management-data.service.ts":
  /*!**********************************************************!*\
    !*** ./src/app/services/plan-management-data.service.ts ***!
    \**********************************************************/

  /*! exports provided: PlanManagementDataService */

  /***/
  function srcAppServicesPlanManagementDataServiceTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "PlanManagementDataService", function () {
      return PlanManagementDataService;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/fesm2015/core.js");

    var PlanManagementDataService =
    /*#__PURE__*/
    function () {
      function PlanManagementDataService() {
        _classCallCheck(this, PlanManagementDataService);
      }

      _createClass(PlanManagementDataService, [{
        key: "setUnfinalizedBatch",
        value: function setUnfinalizedBatch(batch) {
          this.batch = batch;
        }
      }, {
        key: "getUnfinalizedBatch",
        value: function getUnfinalizedBatch() {
          return this.batch;
        }
      }]);

      return PlanManagementDataService;
    }();

    PlanManagementDataService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
      providedIn: 'root'
    }), tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])], PlanManagementDataService);
    /***/
  }
}]);
//# sourceMappingURL=default~doctor-order-doctor-order-module~laboratory-order-laboratory-order-module~plan-management-pl~5fb2b03d-es5.js.map
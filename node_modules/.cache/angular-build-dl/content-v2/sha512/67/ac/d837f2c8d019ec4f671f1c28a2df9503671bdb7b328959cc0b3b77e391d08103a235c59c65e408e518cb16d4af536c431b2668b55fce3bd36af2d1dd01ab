function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~dashboard-dashboard-module~pages-menu-menu-module~soap-soap-module"], {
  /***/
  "./src/app/app/services/alert-service.service.ts":
  /*!*******************************************************!*\
    !*** ./src/app/app/services/alert-service.service.ts ***!
    \*******************************************************/

  /*! exports provided: AlertServiceService */

  /***/
  function srcAppAppServicesAlertServiceServiceTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "AlertServiceService", function () {
      return AlertServiceService;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/fesm2015/core.js");
    /* harmony import */


    var _ionic_angular__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! @ionic/angular */
    "./node_modules/@ionic/angular/dist/fesm5.js");
    /* harmony import */


    var src_app_pages_prompt_modal_prompt_modal_page__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! src/app/pages/prompt-modal/prompt-modal.page */
    "./src/app/pages/prompt-modal/prompt-modal.page.ts");
    /* harmony import */


    var src_app_pages_prompt_modal_c_prompt_modal_c_page__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! src/app/pages/prompt-modal-c/prompt-modal-c.page */
    "./src/app/pages/prompt-modal-c/prompt-modal-c.page.ts");

    var AlertServiceService =
    /*#__PURE__*/
    function () {
      function AlertServiceService(toastCtrl, modalController, alertController) {
        _classCallCheck(this, AlertServiceService);

        this.toastCtrl = toastCtrl;
        this.modalController = modalController;
        this.alertController = alertController;
      }

      _createClass(AlertServiceService, [{
        key: "alertToast",
        value: function alertToast(message) {
          return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0,
          /*#__PURE__*/
          regeneratorRuntime.mark(function _callee() {
            var toast;
            return regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    console.log('AlertToast Message:', message);
                    _context.next = 3;
                    return this.toastCtrl.create({
                      message: message,
                      duration: 8000
                    });

                  case 3:
                    toast = _context.sent;

                    toast.onclick = function (ev) {
                      toast.dismiss();
                    };

                    toast.present();

                  case 6:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));
        }
      }, {
        key: "openAlertModalValidation",
        value: function openAlertModalValidation(alert, title, message, messageArray) {
          var ok = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'Done';
          var okCallBack = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : function (result) {};
          return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0,
          /*#__PURE__*/
          regeneratorRuntime.mark(function _callee2() {
            var modal;
            return regeneratorRuntime.wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    _context2.next = 2;
                    return this.modalController.create({
                      component: src_app_pages_prompt_modal_prompt_modal_page__WEBPACK_IMPORTED_MODULE_3__["PromptModalPage"],
                      cssClass: 'my-custom-modal-array-css',
                      componentProps: {
                        alert: alert,
                        title: title,
                        message: message,
                        messageArray: messageArray,
                        ok: ok
                      }
                    });

                  case 2:
                    modal = _context2.sent;
                    modal.onDidDismiss().then(function (result) {
                      okCallBack(result);
                    });
                    _context2.next = 6;
                    return modal.present();

                  case 6:
                    return _context2.abrupt("return", _context2.sent);

                  case 7:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, this);
          }));
        }
      }, {
        key: "openSearchModal",
        value: function openSearchModal() {
          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
          var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
          var placeholder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Enter here...";
          var maxLength = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
          var okCallBack = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : function (result) {};
          return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0,
          /*#__PURE__*/
          regeneratorRuntime.mark(function _callee3() {
            var modal;
            return regeneratorRuntime.wrap(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    _context3.next = 2;
                    return this.modalController.create({
                      component: src_app_pages_prompt_modal_c_prompt_modal_c_page__WEBPACK_IMPORTED_MODULE_4__["PromptModalCPage"],
                      cssClass: 'my-custom-modal-css',
                      componentProps: {
                        searchData: {
                          isForSearch: true,
                          libs: options,
                          searchQuery: value,
                          maxLength: maxLength,
                          placeholder: placeholder
                        }
                      }
                    });

                  case 2:
                    modal = _context3.sent;
                    modal.onDidDismiss().then(function (result) {
                      okCallBack(result);
                    });
                    _context3.next = 6;
                    return modal.present();

                  case 6:
                    return _context3.abrupt("return", _context3.sent);

                  case 7:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3, this);
          }));
        }
      }, {
        key: "openPromptModal",
        value: function openPromptModal(title, message) {
          var ok = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'Save';
          var okCallBack = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function (result) {};
          var cancel = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'Cancel';
          var cancelCallBack = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : function (result) {};
          return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0,
          /*#__PURE__*/
          regeneratorRuntime.mark(function _callee4() {
            var modal;
            return regeneratorRuntime.wrap(function _callee4$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    _context4.next = 2;
                    return this.modalController.create({
                      component: src_app_pages_prompt_modal_prompt_modal_page__WEBPACK_IMPORTED_MODULE_3__["PromptModalPage"],
                      cssClass: 'my-custom-modal-css',
                      componentProps: {
                        prompt: prompt,
                        title: title,
                        message: message,
                        cancel: cancel,
                        ok: ok
                      }
                    });

                  case 2:
                    modal = _context4.sent;
                    modal.onDidDismiss().then(function (result) {
                      okCallBack(result);
                      cancelCallBack(result);
                    });
                    _context4.next = 6;
                    return modal.present();

                  case 6:
                    return _context4.abrupt("return", _context4.sent);

                  case 7:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4, this);
          }));
        }
      }, {
        key: "openAlertModal",
        value: function openAlertModal(alert, title, message) {
          var ok = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'Done';
          var okCallBack = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : function (result) {};
          return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0,
          /*#__PURE__*/
          regeneratorRuntime.mark(function _callee5() {
            var modal;
            return regeneratorRuntime.wrap(function _callee5$(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    _context5.next = 2;
                    return this.modalController.create({
                      component: src_app_pages_prompt_modal_prompt_modal_page__WEBPACK_IMPORTED_MODULE_3__["PromptModalPage"],
                      // cssClass: 'auto-height',
                      cssClass: 'my-custom-modal-css',
                      componentProps: {
                        alert: alert,
                        title: title,
                        message: message,
                        ok: ok
                      }
                    });

                  case 2:
                    modal = _context5.sent;
                    modal.onDidDismiss().then(function (result) {
                      okCallBack(result);
                    });
                    _context5.next = 6;
                    return modal.present();

                  case 6:
                    return _context5.abrupt("return", _context5.sent);

                  case 7:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee5, this);
          }));
        }
      }, {
        key: "prompNAlert",
        value: function prompNAlert() {
          var header = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
          var subHeader = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
          var message = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
          var inputs = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
          var buttons = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];
          var backdropDismiss = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;
          var keyboardClose = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : true;
          return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0,
          /*#__PURE__*/
          regeneratorRuntime.mark(function _callee6() {
            var _this = this;

            return regeneratorRuntime.wrap(function _callee6$(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    this.nativeAlert = this.alertController.create({
                      header: header,
                      subHeader: subHeader,
                      message: message,
                      backdropDismiss: backdropDismiss,
                      keyboardClose: keyboardClose,
                      inputs: inputs,
                      buttons: buttons
                    }).then(function (alert) {
                      _this.nativeAlert.present();
                    });

                  case 1:
                  case "end":
                    return _context6.stop();
                }
              }
            }, _callee6, this);
          }));
        }
      }, {
        key: "prompInputNAlert",
        value: function prompInputNAlert() {
          var header = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
          var subHeader = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
          var message = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
          var backdropDismiss = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
          var keyboardClose = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
          var inputs = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];
          var buttons = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : [];
          var callBackOk = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : function () {};
          var callBackNo = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : function () {};
          return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0,
          /*#__PURE__*/
          regeneratorRuntime.mark(function _callee7() {
            var _this2 = this;

            return regeneratorRuntime.wrap(function _callee7$(_context7) {
              while (1) {
                switch (_context7.prev = _context7.next) {
                  case 0:
                    if (buttons.length == 0) buttons = [{
                      text: 'OK',
                      handler: function handler(data) {
                        callBackOk();
                      }
                    }, {
                      text: 'Cancel',
                      handler: function handler(data) {
                        callBackNo();
                      }
                    }];
                    this.nativeAlert = this.alertController.create({
                      header: '',
                      subHeader: '',
                      backdropDismiss: backdropDismiss,
                      keyboardClose: keyboardClose,
                      message: '',
                      inputs: inputs,
                      buttons: buttons
                    }).then(function (alert) {
                      _this2.nativeAlert.present();
                    });

                  case 2:
                  case "end":
                    return _context7.stop();
                }
              }
            }, _callee7, this);
          }));
        }
      }]);

      return AlertServiceService;
    }();

    AlertServiceService.ctorParameters = function () {
      return [{
        type: _ionic_angular__WEBPACK_IMPORTED_MODULE_2__["ToastController"]
      }, {
        type: _ionic_angular__WEBPACK_IMPORTED_MODULE_2__["ModalController"]
      }, {
        type: _ionic_angular__WEBPACK_IMPORTED_MODULE_2__["AlertController"]
      }];
    };

    AlertServiceService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
      providedIn: 'root'
    }), tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_ionic_angular__WEBPACK_IMPORTED_MODULE_2__["ToastController"], _ionic_angular__WEBPACK_IMPORTED_MODULE_2__["ModalController"], _ionic_angular__WEBPACK_IMPORTED_MODULE_2__["AlertController"]])], AlertServiceService);
    /***/
  },

  /***/
  "./src/app/services/menu.service.ts":
  /*!******************************************!*\
    !*** ./src/app/services/menu.service.ts ***!
    \******************************************/

  /*! exports provided: MenuService */

  /***/
  function srcAppServicesMenuServiceTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MenuService", function () {
      return MenuService;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/fesm2015/core.js");
    /* harmony import */


    var _login_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./login.service */
    "./src/app/services/login.service.ts");
    /* harmony import */


    var _permission_validator_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ./permission-validator.service */
    "./src/app/services/permission-validator.service.ts");

    var MenuService =
    /*#__PURE__*/
    function () {
      function MenuService(loginService, permissionValidatorService) {
        _classCallCheck(this, MenuService);

        this.loginService = loginService;
        this.permissionValidatorService = permissionValidatorService;
        this.soapViewable = true;
        this.pastMedicalHistoryViewable = true;
        this.signsAndSymptomsViewable = true;
        this.vitalSignsViewable = true;
        this.hciReferralViewable = true;
        this.physicalExaminationsViewable = true;
        this.viewResultsViewable = true;
        this.drugsAndMedicinesViewable = true;
        this.planManagementViewable = true;
        this.encounterHistoryViewable = true;
        this.referralsViewable = true;
        this.endOfCareViewable = true;
        this.patientListDefaultOptions = {};
      }

      _createClass(MenuService, [{
        key: "initMenuByConfig",
        value: function initMenuByConfig() {
          var patient = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
          var configAndDefaults = this.loginService.getConfigAndDefaults();
          this.patientListDefaultOptions = configAndDefaults.patientlist['m-patient-list']['default-options'];
          this.patient = patient;

          if (this.patient) {
            if (this.patient.is_discharged == 1) {
              // tslint:disable-next-line: max-line-length
              document.documentElement.style.setProperty('--patient-card-color', this.patientListDefaultOptions['encounter-types-color'].discharged); // tslint:disable-next-line: max-line-length
            } else if (this.patient.current_dept_encounter.deptenc_code === 'ere' || this.patient.current_dept_encounter.deptenc_code === this.patientListDefaultOptions['encounter-types'].ere) {
              document.documentElement.style.setProperty('--patient-card-color', this.patientListDefaultOptions['encounter-types-color'].ere); // tslint:disable-next-line: max-line-length
            } else if (this.patient.current_dept_encounter.deptenc_code === 'ipe' || this.patient.current_dept_encounter.deptenc_code === this.patientListDefaultOptions['encounter-types'].ipe) {
              document.documentElement.style.setProperty('--patient-card-color', this.patientListDefaultOptions['encounter-types-color'].ipe); // tslint:disable-next-line: max-line-length
            } else if (this.patient.current_dept_encounter.deptenc_code === 'ope' || this.patient.current_dept_encounter.deptenc_code === this.patientListDefaultOptions['encounter-types'].ope) {
              document.documentElement.style.setProperty('--patient-card-color', this.patientListDefaultOptions['encounter-types-color'].ope); // tslint:disable-next-line: max-line-length
            } else if (this.patient.current_dept_encounter.deptenc_code === 'phs' || this.patient.current_dept_encounter.deptenc_code === this.patientListDefaultOptions['other-encounter-types'].phs) {
              document.documentElement.style.setProperty('--patient-card-color', this.patientListDefaultOptions['encounter-types-color'].phs);
            }
          } // // tslint:disable-next-line: max-line-length
          // const subjectiveViewable = this.permissionValidatorService.hasSoapView();
          // // tslint:disable-next-line: max-line-length
          // const objectiveViewable = this.permissionValidatorService.hasSoapView();
          // // tslint:disable-next-line: max-line-length
          // const assessmentImpressionViewable = this.permissionValidatorService.hasSoapView();
          // // tslint:disable-next-line: max-line-length
          // const assessmentIcdViewable = this.permissionValidatorService.hasSoapView();
          // // tslint:disable-next-line: max-line-length
          // const assessmentDiagnsosisViewable = this.permissionValidatorService.hasSoapView() || this.permissionValidatorService.hasSoapDiagEdit();
          // // tslint:disable-next-line: max-line-length
          // const assessmentDiagnsosisTrailViewable = this.permissionValidatorService.hasSoapView();
          // // tslint:disable-next-line: max-line-length
          // const assessmentViewable = assessmentImpressionViewable || assessmentIcdViewable || assessmentDiagnsosisViewable;
          // const planViewable = this.permissionValidatorService.hasSoapView();
          // // tslint:disable-next-line: max-line-length
          // this.soapViewable = subjectiveViewable || objectiveViewable || assessmentViewable ||  planViewable;
          // // tslint:disable-next-line: max-line-length
          // const presentIllnessViewable = this.permissionValidatorService.validateRole(configAndDefaults.pastmedical['m-patient-presentillness']['p-illness-view'], false);
          // // tslint:disable-next-line: max-line-length
          // const pastMedicalHistoryViewable = this.permissionValidatorService.validateRole(configAndDefaults.pastmedical['m-patient-pastmedicalhistory']['p-pastmedicalhistory-view'], false);
          // // tslint:disable-next-line: max-line-length
          // const surgicalHistoryViewable = this.permissionValidatorService.validateRole(configAndDefaults.pastmedical['m-patient-surgicalhistory']['p-surgicalhistory-view'], false);
          // // tslint:disable-next-line: max-line-length
          // const familyHistoryViewable = this.permissionValidatorService.validateRole(configAndDefaults.pastmedical['m-patient-familyhistory']['p-familyhistory-view'], false);
          // // tslint:disable-next-line: max-line-length
          // const socialHistoryViewable = this.permissionValidatorService.validateRole(configAndDefaults.pastmedical['m-patient-socialhistory']['p-socialhistory-view'], false);
          // // tslint:disable-next-line: max-line-length
          // const menstrualViewable = this.permissionValidatorService.validateRole(configAndDefaults.pastmedical['m-patient-menstrual']['p-menstrual-view'], false);
          // // tslint:disable-next-line: max-line-length
          // const pregnantViewable = this.permissionValidatorService.validateRole(configAndDefaults.pastmedical['m-patient-pregnant']['p-pregnant-view'], false);
          // // tslint:disable-next-line: max-line-length
          // const immunizationViewable = this.permissionValidatorService.validateRole(configAndDefaults.pastmedical['m-patient-immunization']['p-immunization-view'], false);
          // // tslint:disable-next-line: max-line-length
          // this.pastMedicalHistoryViewable = presentIllnessViewable || pastMedicalHistoryViewable || surgicalHistoryViewable || familyHistoryViewable || socialHistoryViewable || menstrualViewable || pregnantViewable || immunizationViewable;
          // // tslint:disable-next-line: max-line-length
          // this.signsAndSymptomsViewable = this.permissionValidatorService.validateRole(configAndDefaults.psigns['m-patient-psigns']['psigns-view'], false);
          // // tslint:disable-next-line: max-line-length
          // this.vitalSignsViewable = this.permissionValidatorService.validateRole(configAndDefaults.vitalsign['m-patient-vital-signs']['p-vital-signs-view'], false);
          // if (configAndDefaults.ref_from_hci[' m-patient-reffromotherhci']) {
          //   // tslint:disable-next-line: max-line-length
          //   this.hciReferralViewable = this.permissionValidatorService.validateRole(configAndDefaults.ref_from_hci[' m-patient-reffromotherhci']['reffromotherhci-view'], false);
          // } else {
          //   // tslint:disable-next-line: max-line-length
          //   this.hciReferralViewable = this.permissionValidatorService.validateRole(configAndDefaults.ref_from_hci['m-patient-reffromotherhci']['reffromotherhci-view'], false);
          // }
          // // tslint:disable-next-line: max-line-length
          // this.physicalExaminationsViewable = this.permissionValidatorService.validateRole(configAndDefaults.examination['m-patient-examination']['examination-view'], false);
          // // tslint:disable-next-line: max-line-length
          // this.drugsAndMedicinesViewable = this.permissionValidatorService.validateRole(configAndDefaults.medication['m-patient-medication']['p-medication-view'], false);
          // // tslint:disable-next-line: max-line-length
          // this.endOfCareViewable = this.permissionValidatorService.validateRole(configAndDefaults.endcare['m-patient-endofcare']['p-endofcare-view'], false);


          this.account = [{
            title: 'Settings',
            icon: 'settings'
          }, {
            title: 'Update app Configuration',
            icon: 'download'
          }, {
            title: 'Pull hot fixes',
            icon: 'download'
          }, {
            title: 'Logout',
            icon: 'exit'
          }];
          var doctorPages = [{
            title: 'Doctors',
            icon: 'contact',
            visible: true,
            open: true,
            children: [{
              title: 'Dashboard',
              url: '/menu/dashboard',
              icon: 'list-box',
              viewable: true
            }, {
              title: 'User Manual',
              icon: 'list',
              viewable: true
            }]
          }, {
            title: 'Patient',
            icon: 'contact',
            visible: false,
            open: true,
            children: [{
              title: 'Patient Profile',
              url: '/menu/patient-profile',
              icon: 'person',
              viewable: true
            }, {
              title: 'SOAP',
              url: '/menu/soap',
              icon: 'heart',
              viewable: this.soapViewable
            }, {
              title: 'Past Medical History',
              url: '/menu/past-medical-history',
              icon: 'clipboard',
              viewable: this.pastMedicalHistoryViewable
            }, {
              title: 'Pertinent Signs and Symptoms',
              url: '/menu/signs-and-symptoms',
              icon: 'list',
              viewable: this.signsAndSymptomsViewable
            }, {
              title: 'Vital Signs',
              url: '/menu/vital-signs',
              icon: 'pulse',
              viewable: this.vitalSignsViewable
            }, {
              title: 'Referred from another HCI',
              url: '/menu/hci-referral',
              icon: 'heart-empty',
              viewable: this.hciReferralViewable
            }, {
              title: 'Physical Examinations',
              url: '/menu/physical-examinations',
              icon: 'body',
              viewable: this.physicalExaminationsViewable
            }, {
              title: 'Result',
              url: '/menu/view-result',
              icon: 'ios-book',
              viewable: this.viewResultsViewable
            }, {
              title: 'Drugs and Medicines',
              url: '/menu/drugs-and-medicines',
              icon: 'medkit',
              viewable: this.drugsAndMedicinesViewable
            }, {
              title: 'Plan Management',
              url: '/menu/plan-management',
              icon: 'save',
              viewable: this.planManagementViewable
            }, {
              title: 'Encounter History',
              url: '/menu/encounter-history',
              icon: 'ios-paper',
              viewable: this.encounterHistoryViewable
            }, {
              title: 'Referrals',
              url: '/menu/referrals',
              icon: 'ios-photos',
              viewable: this.referralsViewable
            }, {
              title: 'End of care',
              url: '/menu/end-of-care',
              icon: 'today',
              viewable: this.endOfCareViewable
            }]
          }];
          var nursePages = [{
            title: 'Doctors',
            icon: 'contact',
            visible: true,
            open: true,
            children: [{
              title: 'Dashboard',
              url: '/menu/dashboard',
              icon: 'list-box',
              viewable: true
            }, {
              title: 'User Manual',
              icon: 'list',
              viewable: true
            }]
          }, {
            title: 'Patient',
            icon: 'contact',
            visible: false,
            open: true,
            children: [{
              title: 'Patient Chart',
              url: '/menu/patient-chart',
              icon: 'person',
              viewable: true
            }, {
              title: 'Patient Profile',
              url: '/menu/patient-profile-nurse',
              icon: 'person',
              viewable: true
            }, {
              title: 'SOAP',
              url: '/menu/soap',
              icon: 'heart',
              viewable: this.soapViewable
            }, {
              title: 'Past Medical History',
              url: '/menu/past-medical-history',
              icon: 'clipboard',
              viewable: this.pastMedicalHistoryViewable
            }, {
              title: 'Pertinent Signs and Symptoms',
              url: '/menu/signs-and-symptoms',
              icon: 'list',
              viewable: this.signsAndSymptomsViewable
            }, {
              title: 'Vital Signs',
              url: '/menu/vital-signs',
              icon: 'pulse',
              viewable: this.vitalSignsViewable
            }, {
              title: 'Referred from another HCI',
              url: '/menu/hci-referral',
              icon: 'heart-empty',
              viewable: this.hciReferralViewable
            }, {
              title: 'Physical Examinations',
              url: '/menu/physical-examinations',
              icon: 'body',
              viewable: this.physicalExaminationsViewable
            }, {
              title: 'Result',
              url: '/menu/view-result',
              icon: 'ios-book',
              viewable: this.viewResultsViewable
            }, {
              title: 'Drugs and Medicines',
              url: '/menu/drugs-and-medicines',
              icon: 'medkit',
              viewable: this.drugsAndMedicinesViewable
            }, {
              title: 'Plan Management',
              url: '/menu/plan-management',
              icon: 'save',
              viewable: this.planManagementViewable
            }, {
              title: 'Encounter History',
              url: '/menu/encounter-history',
              icon: 'ios-paper',
              viewable: this.encounterHistoryViewable
            }, {
              title: 'Referrals',
              url: '/menu/referrals',
              icon: 'ios-photos',
              viewable: this.referralsViewable
            }, {
              title: 'End of care',
              url: '/menu/end-of-care',
              icon: 'today',
              viewable: this.endOfCareViewable
            }]
          }];

          if (this.user.role.role_name.toLocaleLowerCase().indexOf('nurse') !== -1) {
            this.pages = nursePages;
          } else {
            this.pages = doctorPages;
          }

          this.pages[1].visible = this.patient;
          console.log('this.pages', this.pages);
        }
      }]);

      return MenuService;
    }();

    MenuService.ctorParameters = function () {
      return [{
        type: _login_service__WEBPACK_IMPORTED_MODULE_2__["LoginService"]
      }, {
        type: _permission_validator_service__WEBPACK_IMPORTED_MODULE_3__["PermissionValidatorService"]
      }];
    };

    MenuService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
      providedIn: 'root'
    }), tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_login_service__WEBPACK_IMPORTED_MODULE_2__["LoginService"], _permission_validator_service__WEBPACK_IMPORTED_MODULE_3__["PermissionValidatorService"]])], MenuService);
    /***/
  }
}]);
//# sourceMappingURL=default~dashboard-dashboard-module~pages-menu-menu-module~soap-soap-module-es5.js.map
{"version":3,"sources":["./src/app/services/patient-api.service.ts"],"names":[],"mappings":"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","file":"default~dashboard-dashboard-module~encounter-details-encounter-details-module~encounter-history-enco~acaa7485-es2015.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams} from '@angular/common/http';\r\nimport { Observable, throwError, from } from 'rxjs';\r\nimport { map, catchError, timeout, tap} from 'rxjs/operators';\r\nimport { Patient } from '../models/patient';\r\nimport { PatientBriefInformation } from '../models/patient-brief-information';\r\nimport { AlertController, Platform } from '@ionic/angular';\r\nimport { HTTP } from '@ionic-native/http/ngx';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PatientApiService {\r\n  private url = 'http://localhost:3000';\r\n  private patientListPath = '/api/doctor/patient/lists';\r\n  private myPatientListPath = '/api/doctor/favorite/patients';\r\n  private nursePatientListPath = '/api/nurse/patient/lists';\r\n  private doctorPatientInformationPath = '/api/doctor/patient/information';\r\n  private nursePatientInformationPath = '/api/nurse/patient/information';\r\n  private tagUntagPatientPath = '/api/doctor/tag/patient';\r\n  private token: string;\r\n\r\n  constructor(private platform: Platform,\r\n              private httpClient: HttpClient,\r\n              private http: HTTP) { }\r\n\r\n  public setUrl(url: string) {\r\n    this.url = url;\r\n  }\r\n\r\n  public setToken(token: string) {\r\n    this.token = token;\r\n  }\r\n\r\n  public getPatientList(type: string, searchKey: string): Observable<Patient[]>  {\r\n    if (this.platform.is('ios') || this.platform.is('android')) {\r\n      console.log('native');\r\n      let params: any;\r\n      if (searchKey) {\r\n        params = {\r\n          patient_type: type,\r\n          person_search: searchKey\r\n        };\r\n      } else {\r\n        params = {\r\n          patient_type: type\r\n        };\r\n      }\r\n\r\n      const headers = {\r\n        Accept: 'application/json',\r\n        'Content-Type': 'application/json',\r\n        Authorization: 'Bearer ' + this.token\r\n      };\r\n\r\n      return from(this.http.get(this.url + this.patientListPath, params, headers)).pipe(\r\n        timeout(30000),\r\n        map((response: any) => {\r\n          const responseData = JSON.parse(response.data);\r\n          console.log('Patient List: ', responseData);\r\n          return responseData;\r\n        }),\r\n        catchError((err: any, caught: Observable<any>) => {\r\n          if (typeof err.error === 'string') {\r\n            try {\r\n              err.error = JSON.parse(err.error);\r\n            } catch (e) {\r\n              console.log('err.error parse failed: ', e);\r\n            }\r\n          }\r\n          console.log('Patient List error: ', err, caught);\r\n          return throwError(err);\r\n        })\r\n      );\r\n    } else {\r\n      console.log('browser');\r\n      let params: any;\r\n\r\n      if (searchKey) {\r\n        params = new HttpParams()\r\n        .set('patient_type', type.toLocaleUpperCase())\r\n        .set('person_search', searchKey);\r\n      } else {\r\n        params = new HttpParams()\r\n        .set('patient_type', type.toLocaleUpperCase());\r\n      }\r\n\r\n      const httpOptions = {\r\n        params,\r\n        headers: new HttpHeaders({\r\n          Accept: 'application/json',\r\n          'Content-Type': 'application/json',\r\n          Authorization: 'Bearer ' + this.token\r\n        })\r\n      };\r\n      console.log('httpOptions', httpOptions);\r\n      return this.httpClient.get<Patient[]>(this.url + this.patientListPath, httpOptions).pipe(\r\n        timeout(30000),\r\n        map((results: Patient[]) => {\r\n          console.log(results);\r\n          return results;\r\n        }),\r\n        catchError((err: any, caught: Observable<any>) => {\r\n          console.log(caught);\r\n          console.error(err);\r\n          return throwError(err);\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  public getMyPatientList(): Observable<Patient[]>  {\r\n    if (this.platform.is('ios') || this.platform.is('android')) {\r\n      console.log('native');\r\n      const headers = {\r\n        Accept: 'application/json',\r\n        Authorization: 'Bearer ' + this.token\r\n      };\r\n\r\n      return from(this.http.get(this.url + this.myPatientListPath, {}, headers)).pipe(\r\n        timeout(30000),\r\n        map((response: any) => {\r\n          const responseData = JSON.parse(response.data);\r\n          console.log('My Patient List: ', responseData);\r\n          return responseData;\r\n        }),\r\n        catchError((err: any, caught: Observable<any>) => {\r\n          if (typeof err.error === 'string') {\r\n            try {\r\n              err.error = JSON.parse(err.error);\r\n            } catch (e) {\r\n              console.log('err.error parse failed: ', e);\r\n            }\r\n          }\r\n          console.log('My Patient List error: ', err, caught);\r\n          return throwError(err);\r\n        })\r\n      );\r\n    } else {\r\n      console.log('browser');\r\n      const httpOptions = {\r\n        headers: new HttpHeaders({\r\n          Accept: 'application/json',\r\n          Authorization: 'Bearer ' + this.token\r\n        })\r\n      };\r\n      console.log('httpOptions', httpOptions);\r\n      return this.httpClient.get<Patient[]>(this.url + this.myPatientListPath, httpOptions).pipe(\r\n        timeout(30000),\r\n        map((results: Patient[]) => {\r\n          console.log(results);\r\n          return results;\r\n        }),\r\n        catchError((err: any, caught: Observable<any>) => {\r\n          console.log(caught);\r\n          console.error(err);\r\n          return throwError(err);\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  public getNursePatientList(wardId: string, searchKey: string): Observable<Patient[]>  {\r\n    if (this.platform.is('ios') || this.platform.is('android')) {\r\n      console.log('native');\r\n      let params: any;\r\n      if (wardId) {\r\n        params = {\r\n          ward_search: wardId,\r\n          person_search: searchKey\r\n        };\r\n      } else {\r\n        params = {\r\n          person_search: searchKey\r\n        };\r\n      }\r\n      console.log('params: ', params);\r\n      const headers = {\r\n        Accept: 'application/json',\r\n        'Content-Type': 'application/json',\r\n        Authorization: 'Bearer ' + this.token\r\n      };\r\n      console.log('headers: ', headers);\r\n\r\n      return from(this.http.get(this.url + this.nursePatientListPath, params, headers)).pipe(\r\n        timeout(30000),\r\n        map((response: any) => {\r\n          const responseData = JSON.parse(response.data);\r\n          console.log('Patient List: ', responseData);\r\n          return responseData;\r\n        }),\r\n        catchError((err: any, caught: Observable<any>) => {\r\n          if (typeof err.error === 'string') {\r\n            try {\r\n              err.error = JSON.parse(err.error);\r\n            } catch (e) {\r\n              console.log('err.error parse failed: ', e);\r\n            }\r\n          }\r\n          console.log('Patient List error: ', err, caught);\r\n          return throwError(err);\r\n        })\r\n      );\r\n    } else {\r\n      console.log('browser');\r\n      let params: any;\r\n\r\n      if (wardId) {\r\n        params = new HttpParams()\r\n        .set('ward_search', wardId)\r\n        .set('person_search', searchKey);\r\n      } else {\r\n        params = new HttpParams()\r\n        .set('person_search', searchKey);\r\n      }\r\n\r\n      console.log('params: ', params);\r\n      const httpOptions = {\r\n        params,\r\n        headers: new HttpHeaders({\r\n          Accept: 'application/json',\r\n          'Content-Type': 'application/json',\r\n          Authorization: 'Bearer ' + this.token\r\n        })\r\n      };\r\n      console.log('httpOptions', httpOptions);\r\n      return this.httpClient.get<Patient[]>(this.url + this.nursePatientListPath, httpOptions).pipe(\r\n        timeout(30000),\r\n        map((results: Patient[]) => {\r\n          console.log(results);\r\n          return results;\r\n        }),\r\n        catchError((err: any, caught: Observable<any>) => {\r\n          console.log(caught);\r\n          console.error(err);\r\n          return throwError(err);\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  public getPatientProfileById(encounter_no: string): Observable<PatientBriefInformation> {\r\n    if (this.platform.is('ios') || this.platform.is('android')) {\r\n      console.log('native');\r\n      const params = {\r\n         id: encounter_no\r\n      };\r\n\r\n      const headers = {\r\n        Accept: 'application/json',\r\n        'Content-Type': 'application/json',\r\n        Authorization: 'Bearer ' + this.token\r\n      };\r\n\r\n      return from(this.http.get(this.url + this.doctorPatientInformationPath, params, headers)).pipe(\r\n        timeout(30000),\r\n        map((response: any) => {\r\n          const responseData = JSON.parse(response.data);\r\n          console.log('Patient Profile: ', responseData);\r\n          return responseData;\r\n        }),\r\n        catchError((err: any, caught: Observable<any>) => {\r\n          if (typeof err.error === 'string') {\r\n            try {\r\n              err.error = JSON.parse(err.error);\r\n            } catch (e) {\r\n              console.log('err.error parse failed: ', e);\r\n            }\r\n          }\r\n          console.log('Patient Profile error: ', err, caught);\r\n          return throwError(err);\r\n        })\r\n      );\r\n    } else {\r\n      console.log('browser');\r\n      const httpOptions = {\r\n        params: new HttpParams()\r\n          .set('id', encounter_no),\r\n        headers: new HttpHeaders({\r\n          'Content-Type':  'application/json',\r\n          Authorization: 'Bearer ' + this.token\r\n        })\r\n      };\r\n      return this.httpClient.get<PatientBriefInformation>(this.url + this.doctorPatientInformationPath, httpOptions).pipe(\r\n        timeout(30000),\r\n        map((results: PatientBriefInformation) => {\r\n          console.log(results);\r\n          return results;\r\n        }),\r\n        catchError((err: any, caught: Observable<any>) => {\r\n          console.log(caught);\r\n          console.error(err);\r\n          return throwError(err);\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  public getPatientProfileByIdForNurse(encounter_no: string): Observable<PatientBriefInformation> {\r\n    if (this.platform.is('ios') || this.platform.is('android')) {\r\n      console.log('native');\r\n      const params = {\r\n         id: encounter_no\r\n      };\r\n\r\n      const headers = {\r\n        Accept: 'application/json',\r\n        'Content-Type': 'application/json',\r\n        Authorization: 'Bearer ' + this.token\r\n      };\r\n\r\n      return from(this.http.get(this.url + this.nursePatientInformationPath, params, headers)).pipe(\r\n        timeout(30000),\r\n        map((response: any) => {\r\n          const responseData = JSON.parse(response.data);\r\n          console.log('Patient Profile: ', responseData);\r\n          return responseData;\r\n        }),\r\n        catchError((err: any, caught: Observable<any>) => {\r\n          if (typeof err.error === 'string') {\r\n            try {\r\n              err.error = JSON.parse(err.error);\r\n            } catch (e) {\r\n              console.log('err.error parse failed: ', e);\r\n            }\r\n          }\r\n          console.log('Patient Profile error: ', err, caught);\r\n          return throwError(err);\r\n        })\r\n      );\r\n    } else {\r\n      console.log('browser');\r\n      const httpOptions = {\r\n        params: new HttpParams()\r\n          .set('id', encounter_no),\r\n        headers: new HttpHeaders({\r\n          'Content-Type':  'application/json',\r\n          Authorization: 'Bearer ' + this.token\r\n        })\r\n      };\r\n      return this.httpClient.get<PatientBriefInformation>(this.url + this.nursePatientInformationPath, httpOptions).pipe(\r\n        timeout(30000),\r\n        map((results: PatientBriefInformation) => {\r\n          console.log(results);\r\n          return results;\r\n        }),\r\n        catchError((err: any, caught: Observable<any>) => {\r\n          console.log(caught);\r\n          console.error(err);\r\n          return throwError(err);\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  public tagUntagPatient(encounter_no: string): Observable<any> {\r\n    if (this.platform.is('ios') || this.platform.is('android')) {\r\n      console.log('native');\r\n      const params = {\r\n        encounter_no\r\n      };\r\n      const headers = {\r\n        Accept: 'application/json',\r\n        'Content-Type': 'application/json',\r\n        Authorization: 'Bearer ' + this.token\r\n      };\r\n\r\n      this.http.setDataSerializer('json'); \r\n      return from(this.http.post(this.url + this.tagUntagPatientPath, params, headers)).pipe(\r\n        timeout(30000),\r\n        map((response: any) => {\r\n          const responseData = JSON.parse(response.data);\r\n          console.log('Untag Patient: ', responseData);\r\n          return responseData;\r\n        }),\r\n        catchError((err: any, caught: Observable<any>) => {\r\n          if (typeof err.error === 'string') {\r\n            try {\r\n              err.error = JSON.parse(err.error);\r\n            } catch (e) {\r\n              console.log('err.error parse failed: ', e);\r\n            }\r\n          }\r\n          console.log('Untag Patient error: ', err, caught);\r\n          return throwError(err);\r\n        })\r\n      );\r\n    } else {\r\n      console.log('browser');\r\n      const input = new FormData();\r\n      input.append('encounter_no', encounter_no);\r\n      const httpOptions = {\r\n        headers: new HttpHeaders({\r\n          Accept: 'application/json',\r\n          Authorization: 'Bearer ' + this.token,\r\n          'Access-Control-Allow-Origin': '*',\r\n        })\r\n      };\r\n      return this.httpClient.post(this.url + this.tagUntagPatientPath, input, httpOptions).pipe(\r\n        timeout(30000),\r\n        map((results) => {\r\n          console.log('Entered tagUntagPatient API:', results);\r\n          return results;\r\n        }),\r\n        catchError((err: any, caught: Observable<any>) => {\r\n          console.log(caught);\r\n          console.error(err);\r\n          return throwError(err);\r\n        })\r\n      );\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}
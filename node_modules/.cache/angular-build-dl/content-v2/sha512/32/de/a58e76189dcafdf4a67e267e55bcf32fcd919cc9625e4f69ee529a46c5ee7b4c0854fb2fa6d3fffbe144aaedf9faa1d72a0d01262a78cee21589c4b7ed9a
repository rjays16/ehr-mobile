function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["past-medical-history-past-medical-history-module"], {
  /***/
  "./node_modules/raw-loader/dist/cjs.js!./src/app/pages/past-medical-history/past-medical-history.page.html":
  /*!*****************************************************************************************************************!*\
    !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/pages/past-medical-history/past-medical-history.page.html ***!
    \*****************************************************************************************************************/

  /*! exports provided: default */

  /***/
  function node_modulesRawLoaderDistCjsJsSrcAppPagesPastMedicalHistoryPastMedicalHistoryPageHtml(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony default export */


    __webpack_exports__["default"] = "<app-headerbar title=\"{{pageTitle}}\"></app-headerbar>\r\n\r\n<ion-content>\r\n  <ion-refresher slot=\"fixed\" pullFactor=\"0.5\" pullMin=\"100\" pullMax=\"200\" (ionRefresh)=\"doRefreshPastMedicalHistory($event)\">\r\n    <ion-refresher-content></ion-refresher-content>\r\n  </ion-refresher>\r\n  <div class=\"testServer\" *ngIf=\"loginService.inTestServer\">\r\n    TEST SERVER CONNECTED\r\n  </div>\r\n  <ion-slides #slides (ionSlideDidChange)=\"onSlideChange($event)\" [options]=\"options\">\r\n\r\n    <!-- History of Present Illness -->\r\n    <ion-slide class=\"slideSection\" *ngIf=\"pIllnessView\">\r\n      <div class=\"wrapper\">\r\n        <form #presentIllness=\"ngForm\" (ngSubmit)=\"onSavePresentDisease(presentIllness)\">\r\n          <div class=\"illnessSection\">\r\n            <ion-label class=\"textLabel\" [color]=\"(historyOfPresentIllness.length <= 0) || (historyOfPresentIllness.length > 2000) ? 'danger': 'dark'\">History of Present Illness * <app-modified-b-toast [modifiedBy]=\"presentIllnessModified.modified_by\" [modifiedDate]=\"presentIllnessModified.modified_dt\"></app-modified-b-toast></ion-label>\r\n            <ion-textarea  required rows=\"8\" [disabled]=\"!pIllnessSave || haspresentIllness\" [(ngModel)]=\"historyOfPresentIllness\" name=\"name\" class=\"bigTextArea\" placeholder=\"Enter your text here . . .\"></ion-textarea>\r\n            <p class=\"warning-message\" *ngIf=\"(historyOfPresentIllness && historyOfPresentIllness.length > 2000)\">You have reached the character limit.</p>\r\n            <p class=\"warning-message\" *ngIf=\"(historyOfPresentIllness.length <= 0 || presentIllness.invalid)\">History of pressent illness is required.</p>\r\n          </div>\r\n          <div class=\"ion-padding\">\r\n            <ion-button type=\"submit\" [hidden]=\"haspresentIllness\" [disabled]=\"presentIllness.invalid || !pIllnessSave || ((historyOfPresentIllness || historyOfPresentIllness == '') && historyOfPresentIllness.length > 2000)\" expand=\"block\"><ion-icon name=\"paper-plane\"></ion-icon> Save</ion-button>\r\n            <ion-button type=\"button\" expand=\"block\" (click)=\"haspresentIllness = !haspresentIllness\" [hidden]=\"!haspresentIllness\" [disabled]=\"presentIllness.invalid || !pIllnessSave\"><ion-icon name=\"create\"></ion-icon> Edit</ion-button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </ion-slide>\r\n\r\n    <!-- Past Medical History -->\r\n    <ion-slide class=\"slideSection\" *ngIf=\"pPastmedicalHistoryView\">\r\n      <div>\r\n        <div class=\"wrapper\">\r\n          <form #pastMedical=\"ngForm\" (ngSubmit)=\"onAddDisease(pastMedical)\">\r\n            <div class=\"illnessSection\">\r\n              <ion-label class=\"textLabel\">Disease * <app-modified-b-toast [modifiedBy]=\"pastMedicalHistoryModified.modified_by\" [modifiedDate]=\"pastMedicalHistoryModified.modified_dt\"></app-modified-b-toast></ion-label>\r\n              <ion-select placeholder=\"None\" (ionChange)=\"pastMed_DeseacDescription = (pastIllnesses[pastIllnessDefaultIndex].id == 1 ? 'None' : '')\" required [disabled]=\"!pPastmedicalHistorySave || hasPastMedicalHistory\" [(ngModel)]=\"pastIllnessDefaultIndex\" name=\"index\"  class=\"normalSelect\" interface=\"popover\">\r\n                <ion-select-option class=\"normalSelectOption\" *ngFor=\"let illness of pastIllnesses; let i = index;\" [value]=\"i\" [selected]=\"i == 1\">{{illness.mdisease_description}}</ion-select-option>\r\n              </ion-select>\r\n            </div>\r\n            <div class=\"illnessSection\">\r\n              <ion-label class=\"textLabel\" [color]=\"(pastMed_DeseacDescription && pastMed_DeseacDescription.length > 2000) || (pastIllnessDefaultIndex != 0 && pastMed_DeseacDescription.length <= 0) ? 'danger':'dark'\">Specific Description *</ion-label>\r\n              <ion-textarea rows=\"3\" [required]=\"pastIllnessDefaultIndex != 0\" [disabled]=\"!pPastmedicalHistorySave || hasPastMedicalHistory || (pastIllnesses[pastIllnessDefaultIndex] && pastIllnesses[pastIllnessDefaultIndex].id == 1)\" [(ngModel)]=\"pastMed_DeseacDescription\" name=\"description\" type=\"text\" value=\"None\" class=\"normalTextInput\" placeholder=\"Enter your text here . . .\"></ion-textarea>\r\n            </div>\r\n            <div class=\"ion-padding\">\r\n              <p class=\"warning-message\" *ngIf=\"pastIllnessDefaultIndex != 0 && (pastMed_DeseacDescription.length <= 0 || pastMedical.invalid)\">Specific Description is required.</p>\r\n              <p class=\"warning-message\" *ngIf=\"pastIllnessDefaultIndex != 0 && pastMed_DeseacDescription.length > 2000\">Specific Description reached the miximum character limit.</p>\r\n              <ion-button type=\"submit\" [hidden]=\"hasPastMedicalHistory\" [disabled]=\"pastMedical.invalid || !pPastmedicalHistorySave || pastMed_DeseacDescription.length > 2000\" expand=\"block\"><ion-icon name=\"paper-plane\"></ion-icon> Save</ion-button>\r\n              <ion-button type=\"button\" expand=\"block\" (click)=\"hasPastMedicalHistory = !hasPastMedicalHistory\" [hidden]=\"!hasPastMedicalHistory\" [disabled]=\"pastMedical.invalid || !pPastmedicalHistorySave\"><ion-icon name=\"create\"></ion-icon> Edit</ion-button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n        <div class=\"illnessSectionList\">\r\n          <ion-label class=\"paginationTextLabel\">Displaying {{medicalHistories ? medicalHistories.length : 0}} results</ion-label>\r\n          <ion-list>\r\n            <ion-item-sliding [disabled]=\"!pPastmedicalHistorySave\" *ngFor=\"let illness of medicalHistories\">\r\n              <ion-item class=\"ion-no-padding\" id=\"listItem\">\r\n                <ion-label class=\"diseaseLabel\">\r\n                  <p class=\"textSubLabel\">Disease</p>\r\n                  <p class=\"textLabel\">{{illness.phil_disease.mdisease_description}}</p>\r\n                  <p class=\"textSubLabel\">Specific Disease Description</p>\r\n                  <p class=\"textLabel\" style=\"white-space: pre-wrap;\">{{illness.specific_disease_description}}</p>\r\n                </ion-label>\r\n              </ion-item>\r\n              <ion-item-options side=\"end\" expandable>\r\n                <ion-item-option color=\"danger\" (click)=\"onRemoveDisease(illness)\">\r\n                  <ion-icon name=\"md-trash\"></ion-icon>\r\n                </ion-item-option>\r\n              </ion-item-options>\r\n            </ion-item-sliding>\r\n          </ion-list>\r\n        </div>\r\n      </div>\r\n    </ion-slide>\r\n\r\n    <!-- Surgical History -->\r\n    <ion-slide class=\"slideSection\" *ngIf=\"pSurgicalHistoryView\">\r\n      <div>\r\n        <div class=\"wrapper\">\r\n          <form #surgery=\"ngForm\" (ngSubmit)=\"onAddSurgery(surgery)\">\r\n            <div class=\"illnessSection\">\r\n              <ion-label class=\"textLabel\" [color]=\"pastMedSurgical_date ? 'dark':'danger'\">Date of Operation* <app-modified-b-toast [modifiedBy]=\"surgicalHistoryModified.modified_by\" [modifiedDate]=\"surgicalHistoryModified.modified_dt\"></app-modified-b-toast></ion-label>\r\n              <ion-item lines=\"none\" class=\"dateTimeItem\">\r\n                <ion-label slot=\"end\" class=\"dateTimePlaceHolder\">yyyy-mm-dd</ion-label>\r\n                <ion-datetime required [disabled]=\"!pSurgicalHistorySave || hasSurgicalHistory\" mode=\"ios\"  [(ngModel)]=\"pastMedSurgical_date\" name=\"date\" slot=\"start\" class=\"dateTimeInput\" placeholder=\"Select Date\" displayFormat=\"YYYY-MM-DD\" value=\"2012-12-15T13:47:20.789\"></ion-datetime>\r\n              </ion-item>\r\n            </div>\r\n            <div class=\"illnessSection\">\r\n              <ion-label class=\"textLabel\" [color]=\"pastMedSurgical_description && pastMedSurgical_description.length > 2000 ? 'danger':'dark'\">Description of Surgical Operation</ion-label>\r\n              <ion-textarea rows=\"3\" [disabled]=\"!pSurgicalHistorySave || hasSurgicalHistory\" [(ngModel)]=\"pastMedSurgical_description\" name=\"description\" type=\"text\" class=\"normalTextInput\" placeholder=\"Enter your text here . . .\"></ion-textarea>\r\n              <p class=\"warning-message\" *ngIf=\"pastMedSurgical_description && pastMedSurgical_description.length > 2000\">Description reached the miximum character limit.</p>\r\n            </div>\r\n            <div class=\"illnessSection\">\r\n              <ion-label class=\"textLabel\" [color]=\"pastMedSurgical_remarks && pastMedSurgical_remarks.length > 2000 ? 'danger':'dark'\">Remarks</ion-label>\r\n              <ion-textarea rows=\"3\" [disabled]=\"!pSurgicalHistorySave || hasSurgicalHistory\" [(ngModel)]=\"pastMedSurgical_remarks\" name=\"remarks\" type=\"text\" class=\"normalTextInput\" placeholder=\"Enter your text here . . .\"></ion-textarea>\r\n              <p class=\"warning-message\" *ngIf=\"pastMedSurgical_remarks && pastMedSurgical_remarks.length > 2000\">Description reached the miximum character limit.</p>\r\n            </div>\r\n            <div class=\"ion-padding\">\r\n              <ion-button type=\"submit\" [hidden]=\"hasSurgicalHistory\" [disabled]=\"surgery.invalid || !pSurgicalHistorySave || ((pastMedSurgical_remarks || pastMedSurgical_remarks == '') && pastMedSurgical_remarks.length > 2000) || ((pastMedSurgical_description || pastMedSurgical_description == '') && pastMedSurgical_description.length > 2000)\" expand=\"block\"><ion-icon name=\"paper-plane\"></ion-icon> Save</ion-button>\r\n              <ion-button type=\"button\" expand=\"block\" (click)=\"hasSurgicalHistory = !hasSurgicalHistory\" [hidden]=\"!hasSurgicalHistory\" [disabled]=\"surgery.invalid || !pSurgicalHistorySave\"><ion-icon name=\"create\"></ion-icon> Edit</ion-button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n        <div class=\"illnessSectionList\">\r\n          <ion-label class=\"paginationTextLabel\">Displaying {{surgicalHistories ? surgicalHistories.length : 0}} results</ion-label>\r\n          <ion-list style=\"text-align:center\">\r\n            <ion-item-sliding [disabled]=\"!pSurgicalHistorySave\" *ngFor=\"let surgery of surgicalHistories; let i of index;\">\r\n              <ion-item class=\"ion-no-padding\" id=\"listItem\">\r\n                <ion-label class=\"diseaseLabel\">\r\n                  <p class=\"textSubLabel\">Description</p>\r\n                  <p class=\"textLabel\" style=\"white-space: pre-wrap;\">{{surgery.description}}</p>\r\n                  <p class=\"textSubLabel\">Remarks</p>\r\n                  <p class=\"textLabel\" style=\"white-space: pre-wrap;\">{{surgery.remarks}}</p>\r\n                  <p class=\"textSubLabel\">Date of Operation</p>\r\n                  <p class=\"textLabel\">{{surgery.date_of_operation}}</p>\r\n                </ion-label>\r\n              </ion-item>\r\n              <ion-item-options side=\"end\" expandable>\r\n                <ion-item-option color=\"danger\" (click)=\"onRemoveSurgery(surgery)\">\r\n                  <ion-icon name=\"md-trash\"></ion-icon>\r\n                </ion-item-option>\r\n              </ion-item-options>\r\n            </ion-item-sliding>\r\n          </ion-list>\r\n        </div>\r\n      </div>\r\n    </ion-slide>\r\n\r\n    <!-- Family Medical History -->\r\n    <ion-slide class=\"slideSection\" *ngIf=\"pFamilyHistoryView\">\r\n      <div>\r\n        <div class=\"wrapper\">\r\n          <form #disease=\"ngForm\" (ngSubmit)=\"onAddFamilyDisease(disease)\">\r\n            <div class=\"illnessSection\">\r\n              <ion-label class=\"textLabel\">Disease * <app-modified-b-toast [modifiedBy]=\"familyHistoryModified.modified_by\" [modifiedDate]=\"familyHistoryModified.modified_dt\"></app-modified-b-toast></ion-label>\r\n              <ion-select placeholder=\"None\"  (ionChange)=\"familyIllnessDefaultDescription = (familyIllnessDefaultIndex == 0 ? 'None' : '')\" required [disabled]=\"!pFamilyHistorySave || hasFamilyHistory\" [(ngModel)]=\"familyIllnessDefaultIndex\" name=\"index\"  class=\"normalSelect\" interface=\"popover\">\r\n                <ion-select-option class=\"normalSelectOption\" *ngFor=\"let illness of familyIllnesses; let i = index;\" [value]=\"i\">{{illness.mdisease_description}}</ion-select-option>\r\n              </ion-select>\r\n            </div>\r\n            <div class=\"illnessSection\">\r\n              <ion-label class=\"textLabel\" [color]=\"familyIllnessDefaultIndex != 0 && ( (familyIllnessDefaultDescription.length <= 0 ||familyIllnessDefaultDescription.length > 2000)) ? 'danger' : 'dark'\">Specific Description *</ion-label>\r\n              <ion-textarea rows=\"3\"  [required]=\"(familyIllnessDefaultIndex != 0)\" [disabled]=\"!pFamilyHistorySave || hasFamilyHistory || familyIllnessDefaultIndex == 0\" [(ngModel)]=\"familyIllnessDefaultDescription\" name=\"description\" type=\"text\" class=\"normalTextInput\" placeholder=\"Enter your text here . . .\"></ion-textarea>\r\n              <p class=\"warning-message\" *ngIf=\"familyIllnessDefaultIndex != 0 && (familyIllnessDefaultDescription && familyIllnessDefaultDescription.length > 2000)\">Description reached the miximum character limit.</p>\r\n              <p class=\"warning-message\" *ngIf=\"familyIllnessDefaultIndex != 0 && (familyIllnessDefaultDescription && (familyIllnessDefaultDescription.length <= 0 || disease.invalid))\">Description is required.</p>\r\n            </div>\r\n            <div class=\"ion-padding\">\r\n              <ion-button type=\"submit\" [hidden]=\"hasFamilyHistory\" [disabled]=\"disease.invalid || !pFamilyHistorySave || familyIllnessDefaultDescription.length > 2000\" expand=\"block\"><ion-icon name=\"paper-plane\"></ion-icon> Save</ion-button>\r\n              <ion-button type=\"button\" expand=\"block\" (click)=\"hasFamilyHistory = !hasFamilyHistory\" [hidden]=\"!hasFamilyHistory\" [disabled]=\"disease.invalid || !pFamilyHistorySave\"><ion-icon name=\"create\"></ion-icon> Edit</ion-button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n        <div class=\"illnessSectionList\">\r\n          <ion-label class=\"paginationTextLabel\">Displaying {{familyMedicalHistories ? familyMedicalHistories.length : 0}} results</ion-label>\r\n          <ion-list style=\"text-align:center\">\r\n            <ion-item-sliding [disabled]=\"!pFamilyHistorySave\" *ngFor=\"let illness of familyMedicalHistories; let i of index;\">\r\n              <ion-item class=\"ion-no-padding\" id=\"listItem\">\r\n                <ion-label class=\"diseaseLabel\">\r\n                  <p class=\"textSubLabel\">Disease</p>\r\n                  <p class=\"textLabel\">{{illness.phil_disease.mdisease_description}}</p>\r\n                  <p class=\"textSubLabel\">Specific Disease Description</p>\r\n                  <p class=\"textLabel\" style=\"white-space: pre-wrap;\">{{illness.specific_disease_description}}</p>\r\n                </ion-label>\r\n              </ion-item>\r\n              <ion-item-options side=\"end\" expandable>\r\n                <ion-item-option color=\"danger\" (click)=\"onRemoveFamilyDisease(illness)\">\r\n                  <ion-icon name=\"md-trash\"></ion-icon>\r\n                </ion-item-option>\r\n              </ion-item-options>\r\n            </ion-item-sliding>\r\n          </ion-list>\r\n        </div>\r\n      </div>\r\n    </ion-slide>\r\n\r\n    <!-- Social Medical History -->\r\n    <ion-slide ion-slide class=\"slideSection\" *ngIf=\"pSocialHistoryView\">\r\n      <div class=\"wrapper\">\r\n        <form [formGroup]=\"socialHistform\"  >\r\n          <p class=\"socialSectionTitle\">Smoker  <app-modified-b-toast [modifiedBy]=\"socialHistoryModified.modified_by\" [modifiedDate]=\"socialHistoryModified.modified_dt\"></app-modified-b-toast></p>\r\n          <div class=\"outerIllnessSection\">\r\n            <div class=\"illnessSection\">\r\n              <ion-label class=\"textLabel\">Is smoker?</ion-label>\r\n              <ion-select [disabled]=\"!pSocialHistorySave || !hasSocialHistory\" name=\"is_smoker\" [ngModelOptions]=\"{standalone: true}\"  class=\"normalSelect\" placeholder=\"Select One\" interface=\"popover\" [(ngModel)]=\"isSmoker\" (ionChange)=\"onIsSmokerChange()\">\r\n                <ion-select-option value=\"N\">No</ion-select-option>\r\n                <ion-select-option value=\"Y\">Yes</ion-select-option>\r\n              </ion-select>\r\n            </div>\r\n            <div *ngIf=\"isSmoker == 'Y'\" class=\"illnessSection\">\r\n              <div class=\"illnessSection\">\r\n                <ion-label class=\"textLabel\" [color]=\"socialHistform.get('yearsOfSmoking')?.invalid ? 'danger':'dark'\">Years of smoking</ion-label>\r\n                <ion-input type=\"number\" pattern=\"^[0-9]+$\" inputmode=\"numeric\" formControlName=\"yearsOfSmoking\" [disabled]=\"!pSocialHistorySave || !hasSocialHistory\" [value]=\"yearsOfSmoking\" name=\"years_of_smoking\" placeholder=\"Years of smoking\" class=\"normalTextInput\" ></ion-input>\r\n                <ion-label class=\"textSubLabel\">For how many years have you smoked?</ion-label>\r\n              </div>\r\n              <p class=\"warning-message\" *ngIf=\"socialHistform.get('yearsOfSmoking')?.invalid\">Invalid value.</p>\r\n\r\n\r\n              <div class=\"illnessSection\">\r\n                <ion-label class=\"textLabel\" style=\"width: 100%;\" [color]=\"socialHistform.get('stickPerDay')?.invalid ? 'danger':'dark'\">Average stick per day?</ion-label>\r\n                <ion-input type=\"number\" pattern=\"^[0-9]+$\"  inputmode=\"numeric\" formControlName=\"stickPerDay\" [disabled]=\"!pSocialHistorySave || !hasSocialHistory\" [value]=\"stickPerDay\" name=\"stick_per_day\" placeholder=\"Average stick per day\" class=\"normalTextInput\" ></ion-input>\r\n                <ion-label class=\"textSubLabel\">On average, how many cigarettes did you smoke per day?</ion-label>\r\n              </div>\r\n              <p class=\"warning-message\" *ngIf=\"socialHistform.get('stickPerDay')?.invalid\">Invalid value.</p>\r\n\r\n              <div class=\"illnessSection\">\r\n                <ion-label class=\"textLabel\" style=\"width: 100%;\" >Average stick per year?</ion-label>\r\n                <ion-input type=\"number\" inputmode=\"numeric\" [ngModelOptions]=\"{standalone: true}\" [(ngModel)]=\"stickPerYear\" name=\"stick_per_year\" type=\"text\" class=\"normalTextInput\" placeholder=\"Calculated\" readonly=\"true\"></ion-input>\r\n                <ion-label class=\"textSubLabel\">Formula [(smoked per day)/ 20)] x Years Smoked</ion-label>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <br>\r\n          <p class=\"socialSectionTitle\">Alcohol</p>\r\n          <div class=\"outerIllnessSection\">\r\n            <div class=\"illnessSection\">\r\n              <ion-label class=\"textLabel\">Is Alcohol Drinker?</ion-label>\r\n              <ion-select [disabled]=\"!pSocialHistorySave || !hasSocialHistory\" [ngModelOptions]=\"{standalone: true}\" name=\"is_drinker\"  class=\"normalSelect\" placeholder=\"Select One\" interface=\"popover\" [(ngModel)]=\"isDrinker\" (ionChange)=\"onIsDrinkerChange()\">\r\n                <ion-select-option value=\"N\">No</ion-select-option>\r\n                <ion-select-option value=\"Y\">Yes</ion-select-option>\r\n                <ion-select-option value=\"X\">Quit</ion-select-option>\r\n              </ion-select>\r\n            </div>\r\n            <div *ngIf=\"isDrinker == 'Y' || isDrinker == 'X'\" class=\"illnessSection\">\r\n              <div class=\"illnessSection\">\r\n                <ion-label class=\"textLabel\" [color]=\"socialHistform.get('noOfBottles')?.invalid ? 'danger':'dark'\">No of bottles?</ion-label>\r\n                <ion-input type=\"number\" pattern=\"^[0-9]+$\" inputmode=\"numeric\" formControlName=\"noOfBottles\"  [disabled]=\"!pSocialHistorySave || !hasSocialHistory\" [value]=\"noOfBottles\" name=\"no_of_bottles\" class=\"normalTextInput\" placeholder=\"No. of bottles consumed per day\"></ion-input>\r\n                <p class=\"warning-message\" *ngIf=\"socialHistform.get('noOfBottles')?.invalid\">Invalid value.</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <br>\r\n          <p class=\"socialSectionTitle\">Illegal Drugs?</p>\r\n          <div class=\"outerIllnessSection\">\r\n            <div class=\"illnessSection\">\r\n              <ion-label class=\"textLabel\">Is Drug User?</ion-label>\r\n              <ion-select [disabled]=\"!pSocialHistorySave || !hasSocialHistory\" [ngModelOptions]=\"{standalone: true}\" name=\"is_drug_user\"  class=\"normalSelect\" placeholder=\"Select One\" interface=\"popover\" [(ngModel)]=\"isDrugUser\" (ionChange)=\"onIsDrugUserChange()\">\r\n                <ion-select-option value=\"N\">No</ion-select-option>\r\n                <ion-select-option value=\"Y\">Yes</ion-select-option>\r\n              </ion-select>\r\n            </div>\r\n          </div>\r\n          <div class=\"ion-padding\">\r\n            <ion-button [hidden]=\"!hasSocialHistory\" (click)=\"onUpdateSocialHistory()\" [disabled]=\"socialHistform?.invalid || !pSocialHistorySave\" expand=\"block\">Save</ion-button>\r\n            <ion-button type=\"button\" expand=\"block\" (click)=\"hasSocialHistory = !hasSocialHistory\" [hidden]=\"hasSocialHistory\" [disabled]=\"!pSocialHistorySave\"><ion-icon name=\"create\"></ion-icon> Edit</ion-button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </ion-slide>\r\n\r\n    <!-- Gynecological/ Obstetric History -->\r\n    <ion-slide ion-slide class=\"slideSection\" *ngIf=\"pGynecologicalObstetricHistoryView\">\r\n      <div>\r\n        <ion-header>\r\n          <ion-toolbar>\r\n            <ion-segment style=\"background: white\" [(ngModel)]=\"gynecologicalTab\" (ionChange)=\"onGynecologicalTabChange($event)\">\r\n              <ion-segment-button *ngIf=\"pMenstrualView\" value=\"menstrual-history\" style=\"text-transform: none;\">\r\n                <p>Menstrual History</p>\r\n              </ion-segment-button>\r\n              <ion-segment-button *ngIf=\"pPregnantView\" value=\"pregnant-history\" style=\"text-transform: none;\">\r\n                <p>Pregnant history</p>\r\n              </ion-segment-button>\r\n            </ion-segment>\r\n          </ion-toolbar>\r\n        </ion-header>\r\n        <div class=\"wrapper\" >\r\n            \r\n          <form [formGroup]=\"menHistform\" *ngIf=\"this.gynecologicalTab === 'menstrual-history'\">\r\n            <div class=\"illnessSection\">\r\n              <ion-label class=\"textLabel\">Applicable to this patient? <app-modified-b-toast [modifiedBy]=\"menstrualHistoryModified.modified_by\" [modifiedDate]=\"menstrualHistoryModified.modified_dt\"></app-modified-b-toast></ion-label>\r\n              <ion-select [disabled]=\"!pMenstrualSave || hasMenstrualHistory\" [ngModelOptions]=\"{standalone: true}\" (ionChange)=\"updateMenstrualHistoryRules()\" name=\"is_applicable_menstrual\"  [(ngModel)]=\"isMenstrualApplicable\"  class=\"normalSelect\" placeholder=\"Select One\" interface=\"popover\" >\r\n                <ion-select-option value=\"N\">No</ion-select-option>\r\n                <ion-select-option value=\"Y\">Yes</ion-select-option>\r\n              </ion-select>\r\n            </div>\r\n\r\n            <div *ngIf=\"isMenstrualApplicable == 'Y'\" class=\"illnessSection\">\r\n              <div class=\"illnessSection\">\r\n                <ion-label class=\"textLabel\" [color]=\"menHistform.get('ageOfFirstMenstrual')?.invalid ? 'danger':'dark'\">Age of first menstrual</ion-label>\r\n                <ion-input type=\"number\" pattern=\"^[0-9]+$\"    inputmode=\"numeric\" [disabled]=\"!pMenstrualSave || hasMenstrualHistory\" name=\"age_first_menstrual\" class=\"normalTextInput\" placeholder=\"Enter your text here . . .\" formControlName=\"ageOfFirstMenstrual\"  [value]=\"ageOfFirstMenstrual\"></ion-input>\r\n                <p class=\"warning-message\" *ngIf=\"menHistform.get('ageOfFirstMenstrual')?.invalid\">Invalid value.</p>\r\n              </div>\r\n              <div class=\"illnessSection\">\r\n                <ion-label class=\"textLabel\" [color]=\"(isMenstrualApplicable == 'Y' && !(dateOfLastMenstrual) || dateOfLastMenstrual == '0000-00-00') ? 'danger':'dark'\">Date of Last Menstrual Period</ion-label>\r\n                <ion-item lines=\"none\" class=\"dateTimeItem\">\r\n                  <ion-label slot=\"end\" class=\"dateTimePlaceHolder\">yyyy-mm-dd</ion-label>\r\n                  <ion-datetime required [disabled]=\"!pMenstrualSave || hasMenstrualHistory\" [ngModelOptions]=\"{standalone: true}\" [(ngModel)]=\"dateOfLastMenstrual\" name=\"last_period_menstrual\" slot=\"start\" class=\"dateTimeInput\" placeholder=\"Select Date\" displayFormat=\"YYYY-MM-DD\" value=\"2012-12-15T13:47:20.789\"></ion-datetime>\r\n                </ion-item>\r\n                <p class=\"warning-message\" *ngIf=\"(isMenstrualApplicable == 'Y' && !(dateOfLastMenstrual) || dateOfLastMenstrual == '0000-00-00')\">Date is required.</p>\r\n              </div>\r\n              <div class=\"illnessSection\">\r\n                <ion-label class=\"textLabel\" [color]=\"menHistform.get('durationOfMenstrualPeriod')?.invalid ? 'danger':'dark'\">Duration of Menstrual Period in Number of Days</ion-label>\r\n                <ion-input type=\"number\" pattern=\"^[0-9]+$\"  inputmode=\"numeric\" [disabled]=\"!pMenstrualSave || hasMenstrualHistory\" formControlName=\"durationOfMenstrualPeriod\" [value]=\"durationOfMenstrualPeriod\" name=\"no_days_menstrual_period\" class=\"normalTextInput\" placeholder=\"Enter your text here . . .\"></ion-input>\r\n                <p class=\"warning-message\" *ngIf=\"menHistform.get('durationOfMenstrualPeriod')?.invalid\">Invalid value.</p>\r\n              </div>\r\n              <div class=\"illnessSection\">\r\n                <ion-label class=\"textLabel\" [color]=\"menHistform.get('intervalOfMenstrual')?.invalid ? 'danger':'dark'\">Interval/ cycle of menstruation in Number of Days</ion-label>\r\n                <ion-input type=\"number\" pattern=\"^[0-9]+$\"  inputmode=\"numeric\"  [disabled]=\"!pMenstrualSave || hasMenstrualHistory\" formControlName=\"intervalOfMenstrual\" [value]=\"intervalOfMenstrual\" name=\"interval_menstrual_period\" class=\"normalTextInput\" placeholder=\"Enter your text here . . .\"></ion-input>\r\n                <p class=\"warning-message\" *ngIf=\"menHistform.get('intervalOfMenstrual')?.invalid\">Invalid value.</p>\r\n              </div>\r\n              <div class=\"illnessSection\">\r\n                <ion-label class=\"textLabel\" [color]=\"menHistform.get('noOfPadsPerDay')?.invalid ? 'danger':'dark'\" >Number of Pads/ Napkins Used per Day during menstruation</ion-label>\r\n                <ion-input type=\"number\" pattern=\"^[0-9]+$\"  inputmode=\"numeric\" [disabled]=\"!pMenstrualSave || hasMenstrualHistory\" formControlName=\"noOfPadsPerDay\" [value]=\"noOfPadsPerDay\" name=\"no_pads\" type=\"text\" class=\"normalTextInput\" placeholder=\"Enter your text here . . .\"></ion-input>\r\n                <p class=\"warning-message\" *ngIf=\"menHistform.get('noOfPadsPerDay')?.invalid\">Invalid value.</p>\r\n              </div>\r\n              <div class=\"illnessSection\">\r\n                <ion-label [color]=\"menHistform.get('ageOfFirstSexualIntercourse')?.invalid ? 'danger':'dark'\"  class=\"textLabel\">Onset of Sexual Intercourse (Age of First Sexual Intercourse)</ion-label>\r\n                <ion-input type=\"number\" pattern=\"^[0-9]+$\"  inputmode=\"numeric\" [disabled]=\"!pMenstrualSave || hasMenstrualHistory\"formControlName=\"ageOfFirstSexualIntercourse\"  [value]=\"ageOfFirstSexualIntercourse\" name=\"age_sex_intercourse\" class=\"normalTextInput\" placeholder=\"Enter your text here . . .\"></ion-input>\r\n                <p class=\"warning-message\" *ngIf=\"menHistform.get('ageOfFirstSexualIntercourse')?.invalid\">Invalid value.</p>\r\n              </div>\r\n              <div class=\"illnessSection\">\r\n                <ion-label class=\"textLabel\" [color]=\"menHistform.get('birthControlMethodUsed')?.invalid ? 'danger':'dark'\">Birth Control Method Used</ion-label>\r\n                <ion-textarea  rows=\"3\"  [disabled]=\"!pMenstrualSave || hasMenstrualHistory\" formControlName=\"birthControlMethodUsed\" [value]=\"birthControlMethodUsed\" name=\"birth_control_used\" type=\"text\" class=\"normalTextInput\" placeholder=\"Enter your text here . . .\"></ion-textarea>\r\n                <p class=\"warning-message\" *ngIf=\"menHistform.get('birthControlMethodUsed')?.hasError('maxlength')\">You have reached the character limit.</p>\r\n              </div>\r\n              <div class=\"illnessSection\">\r\n                <ion-label class=\"textLabel\">Is Menopause?</ion-label>\r\n                <!-- [ngModelOptions]=\"{standalone: true}\" -->\r\n                <ion-select [disabled]=\"!pMenstrualSave || hasMenstrualHistory\"  [ngModelOptions]=\"{standalone: true}\" [(ngModel)]=\"isMenopause\"  name=\"is_menopause\"  class=\"normalSelect\" placeholder=\"Select One\" interface=\"popover\">\r\n                  <ion-select-option value=\"N\">No</ion-select-option>\r\n                  <ion-select-option value=\"Y\">Yes</ion-select-option>\r\n                </ion-select>\r\n              </div>\r\n              <div class=\"illnessSection\">\r\n                <ion-label class=\"textLabel\" [color]=\"menHistform.get('ageOfMenopause')?.invalid ? 'danger':'dark'\" >If Menopause, age of menopause</ion-label>\r\n                <ion-input type=\"number\" pattern=\"^[0-9]+$\" [disabled]=\"!pMenstrualSave || hasMenstrualHistory\"  formControlName=\"ageOfMenopause\" [value]=\"ageOfMenopause\" name=\"age_menopause\" class=\"normalTextInput\" placeholder=\"Enter your text here . . .\"></ion-input>\r\n                <p class=\"warning-message\" *ngIf=\"menHistform.get('ageOfMenopause')?.invalid\">Invalid value.</p>\r\n              </div>\r\n              <div class=\"illnessSection\">\r\n                <ion-label class=\"textAreaTextLabel\" [color]=\"!((menstrualRemarks || menstrualRemarks == '') && menstrualRemarks.length > 2000) ? 'dark':'danger'\">Remarks</ion-label>\r\n                <ion-textarea rows=\"5\" [disabled]=\"!pMenstrualSave || hasMenstrualHistory\" formControlName=\"menstrualRemarks\" [value]=\"menstrualRemarks\" name=\"remarks\" class=\"bigTextArea\" placeholder=\"Enter your text here . . .\"></ion-textarea>\r\n                <p class=\"warning-message\" *ngIf=\"menHistform.get('menstrualRemarks')?.hasError('maxlength')\">You have reached the character limit.</p>\r\n              </div>\r\n            </div>\r\n            <div class=\"ion-padding\">\r\n              <ion-button [hidden]=\"hasMenstrualHistory\" (click)=\"onUpdateMenstrualHistory()\" [disabled]=\"menHistform?.invalid || !pMenstrualSave || (isMenstrualApplicable == 'Y' && (!(dateOfLastMenstrual) || dateOfLastMenstrual == '0000-00-00'))\" expand=\"block\">Save</ion-button>\r\n              <ion-button expand=\"block\" (click)=\"hasMenstrualHistory = !hasMenstrualHistory\" [hidden]=\"!hasMenstrualHistory\" [disabled]=\"!pMenstrualSave\"><ion-icon name=\"create\"></ion-icon> Edit</ion-button>\r\n            </div>\r\n          </form>\r\n\r\n          <form *ngIf=\"this.gynecologicalTab === 'pregnant-history'\" [formGroup]=\"pregHistform\" >\r\n            <div class=\"illnessSection\">\r\n              <ion-label class=\"textLabel\">Applicable to this patient?  <app-modified-b-toast [modifiedBy]=\"pregnantHistoryModified.modified_by\" [modifiedDate]=\"pregnantHistoryModified.modified_dt\"></app-modified-b-toast></ion-label>\r\n              <ion-select [disabled]=\"!pPregnantSave || hasPregnantHistory\" name=\"is_applicable_pregnant\"  class=\"normalSelect\" placeholder=\"Select One\" interface=\"popover\" (ionChange)=\"updatePregHistoryRules()\" [ngModelOptions]=\"{standalone: true}\" [(ngModel)]=\"isPregnantlApplicable\">\r\n                <ion-select-option value=\"N\">No</ion-select-option>\r\n                <ion-select-option value=\"Y\">Yes</ion-select-option>\r\n              </ion-select>\r\n            </div>\r\n            <div *ngIf=\"this.isPregnantlApplicable == 'Y'\" class=\"illnessSection\">\r\n              <div class=\"illnessSection\">\r\n                <ion-label class=\"textLabel\" [color]=\"pregHistform.get('noOfPregnancy')?.invalid ? 'danger':'dark'\">Number of pregnancy to Date - Gravidity *</ion-label>\r\n                <ion-input type=\"number\" pattern=\"^[0-9]+$\"  inputmode=\"numeric\" formControlName=\"noOfPregnancy\" [disabled]=\"!pPregnantSave || hasPregnantHistory\" [value]=\"noOfPregnancy\" name=\"date_gravidity\" class=\"normalTextInput\" placeholder=\"Enter your text here . . .\"></ion-input>\r\n                <p class=\"warning-message\" *ngIf=\"pregHistform.get('noOfPregnancy')?.hasError('pattern') || pregHistform.get('noOfPregnancy')?.hasError('min')\">Invalid value.</p>\r\n                <p class=\"warning-message\" *ngIf=\"pregHistform.get('noOfPregnancy')?.hasError('required')\">This is required.</p>\r\n              </div>\r\n              <div class=\"illnessSection\">\r\n                <ion-label class=\"textLabel\" [color]=\"pregHistform.get('noOfDelivery')?.invalid ? 'danger':'dark'\">Number of delivery to Date - Parity *</ion-label>\r\n                <ion-input type=\"number\" pattern=\"^[0-9]+$\"  inputmode=\"numeric\" formControlName=\"noOfDelivery\" [disabled]=\"!pPregnantSave || hasPregnantHistory\" [value]=\"noOfDelivery\" name=\"date_parity\" class=\"normalTextInput\" placeholder=\"Enter your text here . . .\"></ion-input>\r\n                <p class=\"warning-message\" *ngIf=\"pregHistform.get('noOfDelivery')?.hasError('pattern') || pregHistform.get('noOfDelivery')?.hasError('min')\">Invalid value.</p>\r\n                <p class=\"warning-message\" *ngIf=\"pregHistform.get('noOfDelivery')?.hasError('required')\">This is required.</p>\r\n              </div>\r\n              <div class=\"illnessSection\">\r\n                <ion-label class=\"textLabel\" [color]=\"pregHistform.get('typeOfDeliver')?.invalid ? 'danger':'dark'\">Type of Deliver</ion-label>\r\n                <ion-input [disabled]=\"!pPregnantSave || hasPregnantHistory\" formControlName=\"typeOfDeliver\" [value]=\"typeOfDeliver\" name=\"type_delivery\" type=\"text\" class=\"normalTextInput\" placeholder=\"Enter your text here . . .\"></ion-input>\r\n                <p class=\"warning-message\" *ngIf=\"pregHistform.get('typeOfDeliver')?.hasError('maxLength') \">You have reached the character limit.</p>\r\n              </div>\r\n              <div class=\"illnessSection\">\r\n                <ion-label class=\"textLabel\"  [color]=\"pregHistform.get('noOfFullTermPregnancy')?.invalid ? 'danger':'dark'\">Number of Full Term Pregnancy *</ion-label>\r\n                <ion-input  type=\"number\" pattern=\"^[0-9]+$\"  inputmode=\"numeric\" formControlName=\"noOfFullTermPregnancy\" [disabled]=\"!pPregnantSave || hasPregnantHistory\" [value]=\"noOfFullTermPregnancy\" name=\"no_full_term_preg\" class=\"normalTextInput\" placeholder=\"Enter your text here . . .\"></ion-input>\r\n                <p class=\"warning-message\" *ngIf=\"pregHistform.get('noOfFullTermPregnancy')?.hasError('pattern') || menHistform.get('noOfFullTermPregnancy')?.hasError('min')\">Invalid value.</p>\r\n                <p class=\"warning-message\" *ngIf=\"pregHistform.get('noOfFullTermPregnancy')?.hasError('required')\">This is required.</p>\r\n              </div>\r\n              <div class=\"illnessSection\">\r\n                <ion-label class=\"textLabel\"  [color]=\"pregHistform.get('noOfPrematurePregnancy')?.invalid ? 'danger':'dark'\">Number of Premature Pregnancy *</ion-label>\r\n                <ion-input  type=\"number\" pattern=\"^[0-9]+$\"  inputmode=\"numeric\" formControlName=\"noOfPrematurePregnancy\" [disabled]=\"!pPregnantSave || hasPregnantHistory\" [value]=\"noOfPrematurePregnancy\" name=\"no_premature\" class=\"normalTextInput\" placeholder=\"Enter your text here . . .\"></ion-input>\r\n                <p class=\"warning-message\" *ngIf=\"pregHistform.get('noOfPrematurePregnancy')?.hasError('pattern') || pregHistform.get('noOfPrematurePregnancy')?.hasError('min')\">Invalid value.</p>\r\n                <p class=\"warning-message\" *ngIf=\"pregHistform.get('noOfPrematurePregnancy')?.hasError('required')\">This is required.</p>\r\n              </div>\r\n              <div class=\"illnessSection\">\r\n                <ion-label class=\"textLabel\" [color]=\"pregHistform.get('noOfAbortion')?.invalid ? 'danger':'dark'\">Number of Abortion *</ion-label>\r\n                <ion-input  type=\"number\" pattern=\"^[0-9]+$\" [disabled]=\"!pPregnantSave || hasPregnantHistory\" formControlName=\"noOfAbortion\"  [value]=\"noOfAbortion\" name=\"no_abortion\" class=\"normalTextInput\" placeholder=\"Enter your text here . . .\"></ion-input>\r\n                <p class=\"warning-message\" *ngIf=\"pregHistform.get('noOfAbortion')?.hasError('pattern') || pregHistform.get('noOfAbortion')?.hasError('min')\">Invalid value.</p>\r\n                <p class=\"warning-message\" *ngIf=\"pregHistform.get('noOfAbortion')?.hasError('required')\">This is required.</p>\r\n              </div>\r\n              <div class=\"illnessSection\">\r\n                <ion-label [color]=\"pregHistform.get('noOfLivingChildren')?.invalid ? 'danger':'dark'\" class=\"textLabel\">Number of Living Children *</ion-label>\r\n                <ion-input type=\"number\" pattern=\"^[0-9]+$\"  inputmode=\"numeric\" formControlName=\"noOfLivingChildren\" [disabled]=\"!pPregnantSave || hasPregnantHistory\" [value]=\"noOfLivingChildren\" name=\"no_living_children\" class=\"normalTextInput\" placeholder=\"Enter your text here . . .\"></ion-input>\r\n                <p class=\"warning-message\" *ngIf=\"pregHistform.get('noOfLivingChildren')?.hasError('pattern') || pregHistform.get('noOfLivingChildren')?.hasError('min')\">Invalid value.</p>\r\n                <p class=\"warning-message\" *ngIf=\"pregHistform.get('noOfLivingChildren')?.hasError('required')\">This is required.</p>\r\n              </div>\r\n              <div class=\"illnessSection\">\r\n                <ion-label class=\"textLabel\" [color]=\"pregHistform.get('inducedHypertension')?.invalid ? 'danger':'dark'\">If Pregnancy - Induced Hypertension (Pre-Eclampsia)</ion-label>\r\n                <ion-input [disabled]=\"!pPregnantSave || hasPregnantHistory\" formControlName=\"inducedHypertension\" [value]=\"inducedHypertension\" name=\"induced_hyper\" type=\"text\" class=\"normalTextInput\" placeholder=\"Enter your text here . . .\"></ion-input>\r\n                <p class=\"warning-message\" *ngIf=\"pregHistform.get('inducedHypertension')?.hasError('maxLength') \">You have reached the character limit.</p>\r\n              </div>\r\n              <div class=\"illnessSection\">\r\n                <ion-label class=\"textLabel\"  [color]=\"pregHistform.get('accessToFamilyPlanning')?.invalid ? 'danger':'dark'\">If with access to Family Planning Counseling</ion-label>\r\n                <ion-input [disabled]=\"!pPregnantSave || hasPregnantHistory\" formControlName=\"accessToFamilyPlanning\"  [value]=\"accessToFamilyPlanning\" name=\"family_planning\" type=\"text\" class=\"normalTextInput\" placeholder=\"Enter your text here . . .\"></ion-input>\r\n                <p class=\"warning-message\" *ngIf=\"pregHistform.get('accessToFamilyPlanning')?.hasError('maxLength') \">You have reached the character limit.</p>\r\n              </div>\r\n              <div class=\"illnessSection\">\r\n                <ion-label class=\"textAreaTextLabel\"  [color]=\"pregHistform.get('pregnancyRemarks')?.invalid ? 'danger':'dark'\">Remarks</ion-label>\r\n                <ion-textarea rows=\"5\" [disabled]=\"!pPregnantSave || hasPregnantHistory\" formControlName=\"pregnancyRemarks\"  [value]=\"pregnancyRemarks\" name=\"remarks\" class=\"bigTextArea\" placeholder=\"Enter your text here . . .\"></ion-textarea>\r\n                <p class=\"warning-message\" *ngIf=\"pregHistform.get('pregnancyRemarks')?.hasError('maxLength') \">You have reached the character limit.</p>\r\n              </div>\r\n            </div>\r\n            <div class=\"ion-padding\">\r\n              <ion-button  [hidden]=\"hasPregnantHistory\" (click)=\"onUpdatePregnantHistory()\" [disabled]=\"pregHistform?.invalid || !pPregnantSave\" expand=\"block\"><ion-icon name=\"paper-plane\"></ion-icon> Save</ion-button>\r\n              <ion-button type=\"button\" expand=\"block\" (click)=\"hasPregnantHistory = !hasPregnantHistory\" [hidden]=\"!hasPregnantHistory\" [disabled]=\"!pPregnantSave\"><ion-icon name=\"create\"></ion-icon> Edit</ion-button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </ion-slide>\r\n\r\n    <!-- Immunization Record -->\r\n    <ion-slide class=\"slideSection\" *ngIf=\"pImmunizationView\">\r\n      <div class=\"wrapper\">\r\n        <form #immunization=\"ngForm\" (ngSubmit)=\"onUpdateImmunizationRecord(immunization)\">\r\n          <div class=\"illnessSection\">\r\n            <ion-label class=\"textLabel\">Child immunization Code <app-modified-b-toast [modifiedBy]=\"immunizationRecordModified.modified_by\" [modifiedDate]=\"immunizationRecordModified.modified_dt\"></app-modified-b-toast></ion-label>\r\n            <ion-select [disabled]=\"!pImmunizationSave || hasImmunization\" [(ngModel)]=\"childImmunizationIndex\" name=\"child_immunization_index\"  class=\"normalSelect\" placeholder=\"None\" interface=\"popover\">\r\n              <ion-select-option class=\"normalSelectOption\" *ngFor=\"let code of childImmunizationCodes; let i = index\" [value]=\"i\">{{code.imm_description}}</ion-select-option>\r\n            </ion-select>\r\n          </div>\r\n          <div class=\"illnessSection\">\r\n            <ion-label class=\"textLabel\">Adult immunization Code</ion-label>\r\n            <ion-select [disabled]=\"!pImmunizationSave || hasImmunization\" [(ngModel)]=\"adultImmunizationIndex\" name=\"adult_immunization_index\"  class=\"normalSelect\" placeholder=\"None\" interface=\"popover\">\r\n              <ion-select-option class=\"normalSelectOption\" *ngFor=\"let code of adultImmunizationCodes; let i = index\" [value]=\"i\">{{code.imm_description}}</ion-select-option>\r\n            </ion-select>\r\n          </div>\r\n          <div class=\"illnessSection\">\r\n            <ion-label class=\"textLabel\">Elderly immunization Code</ion-label>\r\n            <ion-select [disabled]=\"!pImmunizationSave || hasImmunization\" [(ngModel)]=\"elderlyImmunizationIndex\" name=\"elderly_immunization_index\"  class=\"normalSelect\" placeholder=\"None\" interface=\"popover\">\r\n              <ion-select-option class=\"normalSelectOption\" *ngFor=\"let code of elderlyImmunizationCodes; let i = index\" [value]=\"i\">{{code.imm_description}}</ion-select-option>\r\n            </ion-select>\r\n          </div>\r\n          <div class=\"illnessSection\">\r\n            <ion-label class=\"textLabel\" [color]=\"(otherImmunization && otherImmunization.length > 2000) ? 'danger':'dark'\">Other Immunization</ion-label>\r\n            <ion-textarea  rows=\"3\" [disabled]=\"!pImmunizationSave || hasImmunization\" [(ngModel)]=\"otherImmunization\" name=\"other_immunization\" type=\"text\" class=\"normalTextInput\" placeholder=\"Enter your text here . . .\"></ion-textarea>\r\n            <p class=\"warning-message\" *ngIf=\"(otherImmunization && otherImmunization.length > 2000)\">You have reached the character limit.</p>\r\n          </div>\r\n          <div class=\"illnessSection\">\r\n            <ion-label class=\"textAreaTextLabel\" [color]=\"(immunizationRemarks && immunizationRemarks.length > 2000) ? 'danger':'dark'\">Remarks</ion-label>\r\n            <ion-textarea [disabled]=\"!pImmunizationSave || hasImmunization\" rows=\"8\" [(ngModel)]=\"immunizationRemarks\" name=\"remarks\" class=\"bigTextArea\" placeholder=\"Enter your text here . . .\"></ion-textarea>\r\n            <p class=\"warning-message\" *ngIf=\"(immunizationRemarks && immunizationRemarks.length > 2000)\">You have reached the character limit.</p>\r\n          </div>\r\n          <div class=\"ion-padding\">\r\n            <ion-button type=\"submit\" [hidden]=\"hasImmunization\" [disabled]=\"immunization.invalid || !pImmunizationSave || ((otherImmunization || otherImmunization == '') && otherImmunization.length > 2000) || ((immunizationRemarks || immunizationRemarks == '') && immunizationRemarks.length > 2000)\" expand=\"block\"><ion-icon name=\"paper-plane\"></ion-icon> Save</ion-button>\r\n            <ion-button type=\"button\" expand=\"block\" (click)=\"hasImmunization = !hasImmunization\" [hidden]=\"!hasImmunization\" [disabled]=\"immunization.invalid || !pImmunizationSave\"><ion-icon name=\"create\"></ion-icon> Edit</ion-button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </ion-slide>\r\n  </ion-slides>\r\n</ion-content>\r\n\r\n<ion-footer>\r\n  <ion-toolbar>\r\n    <ion-segment scrollable [(ngModel)]=\"selectedTab\" (ionChange)=\"onSegmentChange($event)\">\r\n      <ion-segment-button *ngIf=\"pIllnessView\" id=\"present-illness\" value=\"present-illness\" style=\"text-transform: none;\">\r\n        <p>History of Present Illness</p>\r\n      </ion-segment-button>\r\n      <ion-segment-button *ngIf=\"pPastmedicalHistoryView\" id=\"past-history\" value=\"past-history\" style=\"text-transform: none;\">\r\n        <p>Past Medical History</p>\r\n      </ion-segment-button>\r\n      <ion-segment-button *ngIf=\"pSurgicalHistoryView\" id=\"surgical-history\" value=\"surgical-history\" style=\"text-transform: none;\">\r\n        <p>Surgical History</p>\r\n      </ion-segment-button>\r\n      <ion-segment-button *ngIf=\"pFamilyHistoryView\" id=\"family-history\" value=\"family-history\" style=\"text-transform: none;\">\r\n        <p>Family History</p>\r\n      </ion-segment-button>\r\n      <ion-segment-button *ngIf=\"pSocialHistoryView\" id=\"social-history\" value=\"social-history\" style=\"text-transform: none;\">\r\n        <p>Social History</p>\r\n      </ion-segment-button>\r\n      <ion-segment-button *ngIf=\"pGynecologicalObstetricHistoryView\" id=\"gynecological-history\" value=\"gynecological-history\" style=\"text-transform: none;\">\r\n        <p>Gynecological Obstetric History</p>\r\n      </ion-segment-button>\r\n      <ion-segment-button *ngIf=\"pImmunizationView\" id=\"immunization-record\" value=\"immunization-record\" style=\"text-transform: none;\">\r\n        <p>Immunization Record</p>\r\n      </ion-segment-button>\r\n    </ion-segment>\r\n  </ion-toolbar>\r\n</ion-footer>\r\n";
    /***/
  },

  /***/
  "./src/app/app/services/alert-service.service.ts":
  /*!*******************************************************!*\
    !*** ./src/app/app/services/alert-service.service.ts ***!
    \*******************************************************/

  /*! exports provided: AlertServiceService */

  /***/
  function srcAppAppServicesAlertServiceServiceTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "AlertServiceService", function () {
      return AlertServiceService;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/fesm2015/core.js");
    /* harmony import */


    var _ionic_angular__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! @ionic/angular */
    "./node_modules/@ionic/angular/dist/fesm5.js");
    /* harmony import */


    var src_app_pages_prompt_modal_prompt_modal_page__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! src/app/pages/prompt-modal/prompt-modal.page */
    "./src/app/pages/prompt-modal/prompt-modal.page.ts");
    /* harmony import */


    var src_app_pages_prompt_modal_c_prompt_modal_c_page__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! src/app/pages/prompt-modal-c/prompt-modal-c.page */
    "./src/app/pages/prompt-modal-c/prompt-modal-c.page.ts");

    var AlertServiceService =
    /*#__PURE__*/
    function () {
      function AlertServiceService(toastCtrl, modalController, alertController) {
        _classCallCheck(this, AlertServiceService);

        this.toastCtrl = toastCtrl;
        this.modalController = modalController;
        this.alertController = alertController;
      }

      _createClass(AlertServiceService, [{
        key: "alertToast",
        value: function alertToast(message) {
          return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0,
          /*#__PURE__*/
          regeneratorRuntime.mark(function _callee() {
            var toast;
            return regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    console.log('AlertToast Message:', message);
                    _context.next = 3;
                    return this.toastCtrl.create({
                      message: message,
                      duration: 8000
                    });

                  case 3:
                    toast = _context.sent;

                    toast.onclick = function (ev) {
                      toast.dismiss();
                    };

                    toast.present();

                  case 6:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));
        }
      }, {
        key: "openAlertModalValidation",
        value: function openAlertModalValidation(alert, title, message, messageArray) {
          var ok = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'Done';
          var okCallBack = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : function (result) {};
          return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0,
          /*#__PURE__*/
          regeneratorRuntime.mark(function _callee2() {
            var modal;
            return regeneratorRuntime.wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    _context2.next = 2;
                    return this.modalController.create({
                      component: src_app_pages_prompt_modal_prompt_modal_page__WEBPACK_IMPORTED_MODULE_3__["PromptModalPage"],
                      cssClass: 'my-custom-modal-array-css',
                      componentProps: {
                        alert: alert,
                        title: title,
                        message: message,
                        messageArray: messageArray,
                        ok: ok
                      }
                    });

                  case 2:
                    modal = _context2.sent;
                    modal.onDidDismiss().then(function (result) {
                      okCallBack(result);
                    });
                    _context2.next = 6;
                    return modal.present();

                  case 6:
                    return _context2.abrupt("return", _context2.sent);

                  case 7:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, this);
          }));
        }
      }, {
        key: "openSearchModal",
        value: function openSearchModal() {
          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
          var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
          var placeholder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Enter here...";
          var maxLength = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
          var okCallBack = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : function (result) {};
          return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0,
          /*#__PURE__*/
          regeneratorRuntime.mark(function _callee3() {
            var modal;
            return regeneratorRuntime.wrap(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    _context3.next = 2;
                    return this.modalController.create({
                      component: src_app_pages_prompt_modal_c_prompt_modal_c_page__WEBPACK_IMPORTED_MODULE_4__["PromptModalCPage"],
                      cssClass: 'my-custom-modal-css',
                      componentProps: {
                        searchData: {
                          isForSearch: true,
                          libs: options,
                          searchQuery: value,
                          maxLength: maxLength,
                          placeholder: placeholder
                        }
                      }
                    });

                  case 2:
                    modal = _context3.sent;
                    modal.onDidDismiss().then(function (result) {
                      okCallBack(result);
                    });
                    _context3.next = 6;
                    return modal.present();

                  case 6:
                    return _context3.abrupt("return", _context3.sent);

                  case 7:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3, this);
          }));
        }
      }, {
        key: "openPromptModal",
        value: function openPromptModal(title, message) {
          var ok = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'Save';
          var okCallBack = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function (result) {};
          var cancel = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'Cancel';
          var cancelCallBack = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : function (result) {};
          return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0,
          /*#__PURE__*/
          regeneratorRuntime.mark(function _callee4() {
            var modal;
            return regeneratorRuntime.wrap(function _callee4$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    _context4.next = 2;
                    return this.modalController.create({
                      component: src_app_pages_prompt_modal_prompt_modal_page__WEBPACK_IMPORTED_MODULE_3__["PromptModalPage"],
                      cssClass: 'my-custom-modal-css',
                      componentProps: {
                        prompt: prompt,
                        title: title,
                        message: message,
                        cancel: cancel,
                        ok: ok
                      }
                    });

                  case 2:
                    modal = _context4.sent;
                    modal.onDidDismiss().then(function (result) {
                      okCallBack(result);
                      cancelCallBack(result);
                    });
                    _context4.next = 6;
                    return modal.present();

                  case 6:
                    return _context4.abrupt("return", _context4.sent);

                  case 7:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4, this);
          }));
        }
      }, {
        key: "openAlertModal",
        value: function openAlertModal(alert, title, message) {
          var ok = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'Done';
          var okCallBack = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : function (result) {};
          return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0,
          /*#__PURE__*/
          regeneratorRuntime.mark(function _callee5() {
            var modal;
            return regeneratorRuntime.wrap(function _callee5$(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    _context5.next = 2;
                    return this.modalController.create({
                      component: src_app_pages_prompt_modal_prompt_modal_page__WEBPACK_IMPORTED_MODULE_3__["PromptModalPage"],
                      // cssClass: 'auto-height',
                      cssClass: 'my-custom-modal-css',
                      componentProps: {
                        alert: alert,
                        title: title,
                        message: message,
                        ok: ok
                      }
                    });

                  case 2:
                    modal = _context5.sent;
                    modal.onDidDismiss().then(function (result) {
                      okCallBack(result);
                    });
                    _context5.next = 6;
                    return modal.present();

                  case 6:
                    return _context5.abrupt("return", _context5.sent);

                  case 7:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee5, this);
          }));
        }
      }, {
        key: "prompNAlert",
        value: function prompNAlert() {
          var header = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
          var subHeader = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
          var message = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
          var inputs = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
          var buttons = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];
          var backdropDismiss = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;
          var keyboardClose = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : true;
          return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0,
          /*#__PURE__*/
          regeneratorRuntime.mark(function _callee6() {
            var _this = this;

            return regeneratorRuntime.wrap(function _callee6$(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    this.nativeAlert = this.alertController.create({
                      header: header,
                      subHeader: subHeader,
                      message: message,
                      backdropDismiss: backdropDismiss,
                      keyboardClose: keyboardClose,
                      inputs: inputs,
                      buttons: buttons
                    }).then(function (alert) {
                      _this.nativeAlert.present();
                    });

                  case 1:
                  case "end":
                    return _context6.stop();
                }
              }
            }, _callee6, this);
          }));
        }
      }, {
        key: "prompInputNAlert",
        value: function prompInputNAlert() {
          var header = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
          var subHeader = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
          var message = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
          var backdropDismiss = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
          var keyboardClose = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
          var inputs = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];
          var buttons = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : [];
          var callBackOk = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : function () {};
          var callBackNo = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : function () {};
          return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0,
          /*#__PURE__*/
          regeneratorRuntime.mark(function _callee7() {
            var _this2 = this;

            return regeneratorRuntime.wrap(function _callee7$(_context7) {
              while (1) {
                switch (_context7.prev = _context7.next) {
                  case 0:
                    if (buttons.length == 0) buttons = [{
                      text: 'OK',
                      handler: function handler(data) {
                        callBackOk();
                      }
                    }, {
                      text: 'Cancel',
                      handler: function handler(data) {
                        callBackNo();
                      }
                    }];
                    this.nativeAlert = this.alertController.create({
                      header: '',
                      subHeader: '',
                      backdropDismiss: backdropDismiss,
                      keyboardClose: keyboardClose,
                      message: '',
                      inputs: inputs,
                      buttons: buttons
                    }).then(function (alert) {
                      _this2.nativeAlert.present();
                    });

                  case 2:
                  case "end":
                    return _context7.stop();
                }
              }
            }, _callee7, this);
          }));
        }
      }]);

      return AlertServiceService;
    }();

    AlertServiceService.ctorParameters = function () {
      return [{
        type: _ionic_angular__WEBPACK_IMPORTED_MODULE_2__["ToastController"]
      }, {
        type: _ionic_angular__WEBPACK_IMPORTED_MODULE_2__["ModalController"]
      }, {
        type: _ionic_angular__WEBPACK_IMPORTED_MODULE_2__["AlertController"]
      }];
    };

    AlertServiceService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
      providedIn: 'root'
    }), tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_ionic_angular__WEBPACK_IMPORTED_MODULE_2__["ToastController"], _ionic_angular__WEBPACK_IMPORTED_MODULE_2__["ModalController"], _ionic_angular__WEBPACK_IMPORTED_MODULE_2__["AlertController"]])], AlertServiceService);
    /***/
  },

  /***/
  "./src/app/models/family-medical-history.ts":
  /*!**************************************************!*\
    !*** ./src/app/models/family-medical-history.ts ***!
    \**************************************************/

  /*! exports provided: FamilyMedicalHistory */

  /***/
  function srcAppModelsFamilyMedicalHistoryTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "FamilyMedicalHistory", function () {
      return FamilyMedicalHistory;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");

    var FamilyMedicalHistory = function FamilyMedicalHistory() {
      var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, FamilyMedicalHistory);

      Object.assign(this, values);
    };
    /***/

  },

  /***/
  "./src/app/models/past-medical-history-config.ts":
  /*!*******************************************************!*\
    !*** ./src/app/models/past-medical-history-config.ts ***!
    \*******************************************************/

  /*! exports provided: PastMedicalHistoryConfig */

  /***/
  function srcAppModelsPastMedicalHistoryConfigTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "PastMedicalHistoryConfig", function () {
      return PastMedicalHistoryConfig;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");

    var PastMedicalHistoryConfig = function PastMedicalHistoryConfig() {
      var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, PastMedicalHistoryConfig);

      Object.assign(this, values);
    };
    /***/

  },

  /***/
  "./src/app/models/past-medical-history.ts":
  /*!************************************************!*\
    !*** ./src/app/models/past-medical-history.ts ***!
    \************************************************/

  /*! exports provided: PastMedicalHistory */

  /***/
  function srcAppModelsPastMedicalHistoryTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "PastMedicalHistory", function () {
      return PastMedicalHistory;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");

    var PastMedicalHistory = function PastMedicalHistory() {
      var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, PastMedicalHistory);

      Object.assign(this, values);
    };
    /***/

  },

  /***/
  "./src/app/models/present-illness.ts":
  /*!*******************************************!*\
    !*** ./src/app/models/present-illness.ts ***!
    \*******************************************/

  /*! exports provided: PresentIllness */

  /***/
  function srcAppModelsPresentIllnessTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "PresentIllness", function () {
      return PresentIllness;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");

    var PresentIllness = function PresentIllness() {
      var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, PresentIllness);

      Object.assign(this, values);
    };
    /***/

  },

  /***/
  "./src/app/models/surgical-history.ts":
  /*!********************************************!*\
    !*** ./src/app/models/surgical-history.ts ***!
    \********************************************/

  /*! exports provided: SurgicalHistory */

  /***/
  function srcAppModelsSurgicalHistoryTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "SurgicalHistory", function () {
      return SurgicalHistory;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");

    var SurgicalHistory = function SurgicalHistory() {
      var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, SurgicalHistory);

      Object.assign(this, values);
    };
    /***/

  },

  /***/
  "./src/app/pages/past-medical-history/digit-quantitiy-validator.ts":
  /*!*************************************************************************!*\
    !*** ./src/app/pages/past-medical-history/digit-quantitiy-validator.ts ***!
    \*************************************************************************/

  /*! exports provided: DigitQuantitiyValidator */

  /***/
  function srcAppPagesPastMedicalHistoryDigitQuantitiyValidatorTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DigitQuantitiyValidator", function () {
      return DigitQuantitiyValidator;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");

    var DigitQuantitiyValidator =
    /*#__PURE__*/
    function () {
      function DigitQuantitiyValidator() {
        _classCallCheck(this, DigitQuantitiyValidator);
      }

      _createClass(DigitQuantitiyValidator, null, [{
        key: "isQuantityRequired",
        value: function isQuantityRequired(control) {
          var isInteger = Number.isInteger(control.value);
          console.error('isInteger', control.value, isInteger);
          if (!isInteger) return true;
          if (!(control.value > 0)) return true;
          return null;
        }
      }, {
        key: "isQuantityNotRequired",
        value: function isQuantityNotRequired(control) {
          var isInteger = Number.isInteger(control.value);
          console.error('isInteger', control.value, isInteger, !(control.value == null || control.value == ''));

          if (!(control.value == null || control.value == '')) {
            if (!isInteger) return true;
            if (control.value < 0) return true;
          }

          return null;
        }
      }]);

      return DigitQuantitiyValidator;
    }();
    /***/

  },

  /***/
  "./src/app/pages/past-medical-history/past-medical-history.module.ts":
  /*!***************************************************************************!*\
    !*** ./src/app/pages/past-medical-history/past-medical-history.module.ts ***!
    \***************************************************************************/

  /*! exports provided: PastMedicalHistoryPageModule */

  /***/
  function srcAppPagesPastMedicalHistoryPastMedicalHistoryModuleTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "PastMedicalHistoryPageModule", function () {
      return PastMedicalHistoryPageModule;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/fesm2015/core.js");
    /* harmony import */


    var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! @angular/common */
    "./node_modules/@angular/common/fesm2015/common.js");
    /* harmony import */


    var _angular_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! @angular/forms */
    "./node_modules/@angular/forms/fesm2015/forms.js");
    /* harmony import */


    var _angular_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! @angular/router */
    "./node_modules/@angular/router/fesm2015/router.js");
    /* harmony import */


    var _ionic_angular__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! @ionic/angular */
    "./node_modules/@ionic/angular/dist/fesm5.js");
    /* harmony import */


    var _past_medical_history_page__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ./past-medical-history.page */
    "./src/app/pages/past-medical-history/past-medical-history.page.ts");
    /* harmony import */


    var ngx_pagination__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
    /*! ngx-pagination */
    "./node_modules/ngx-pagination/dist/ngx-pagination.js");
    /* harmony import */


    var _components_components_module__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
    /*! ./../../components/components.module */
    "./src/app/components/components.module.ts");

    var routes = [{
      path: '',
      component: _past_medical_history_page__WEBPACK_IMPORTED_MODULE_6__["PastMedicalHistoryPage"]
    }];

    var PastMedicalHistoryPageModule = function PastMedicalHistoryPageModule() {
      _classCallCheck(this, PastMedicalHistoryPageModule);
    };

    PastMedicalHistoryPageModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_3__["ReactiveFormsModule"], _ionic_angular__WEBPACK_IMPORTED_MODULE_5__["IonicModule"], _angular_router__WEBPACK_IMPORTED_MODULE_4__["RouterModule"].forChild(routes), ngx_pagination__WEBPACK_IMPORTED_MODULE_7__["NgxPaginationModule"], _components_components_module__WEBPACK_IMPORTED_MODULE_8__["ComponentsModule"]],
      declarations: [_past_medical_history_page__WEBPACK_IMPORTED_MODULE_6__["PastMedicalHistoryPage"]]
    })], PastMedicalHistoryPageModule);
    /***/
  },

  /***/
  "./src/app/pages/past-medical-history/past-medical-history.page.scss":
  /*!***************************************************************************!*\
    !*** ./src/app/pages/past-medical-history/past-medical-history.page.scss ***!
    \***************************************************************************/

  /*! exports provided: default */

  /***/
  function srcAppPagesPastMedicalHistoryPastMedicalHistoryPageScss(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony default export */


    __webpack_exports__["default"] = "ion-refresher {\n  z-index: 1;\n}\n\nion-refresher-content {\n  background-color: transparent;\n}\n\n::-webkit-input-placeholder {\n  /* Chrome, Firefox, Opera, Safari 10.1+ */\n  color: #c8c8c8;\n  font-style: italic;\n}\n\n::-moz-placeholder {\n  /* Chrome, Firefox, Opera, Safari 10.1+ */\n  color: #c8c8c8;\n  font-style: italic;\n}\n\n::-ms-input-placeholder {\n  /* Chrome, Firefox, Opera, Safari 10.1+ */\n  color: #c8c8c8;\n  font-style: italic;\n}\n\n::placeholder {\n  /* Chrome, Firefox, Opera, Safari 10.1+ */\n  color: #c8c8c8;\n  font-style: italic;\n}\n\np {\n  text-align: left;\n}\n\nion-content {\n  background: #f9f9f9;\n  --ion-background-color: #f9f9f9;\n}\n\nion-content .slideSection {\n  min-height: 90vh;\n  display: block;\n}\n\nion-content .wrapper {\n  margin-top: 20px;\n  padding: 10px;\n  margin-left: 10px;\n  margin-right: 10px;\n  margin-bottom: 20px;\n}\n\nion-content .wrapper .socialSectionTitle {\n  margin-top: 0;\n  font-size: large;\n  font-weight: bold;\n  color: #949494;\n  border-bottom: 1px solid #cccccc;\n  margin-bottom: 10px !important;\n  text-align: left;\n}\n\nion-content .wrapper .outerIllnessSection {\n  padding-left: 10px;\n  padding-right: 10px;\n}\n\nion-content .wrapper .illnessSection {\n  margin-bottom: 20px;\n}\n\nion-content .wrapper .illnessSection .normalSelect {\n  background: white;\n  text-align: left;\n  height: auto;\n  width: 100%;\n  border: none;\n  border-radius: 10px;\n  padding: 10px;\n}\n\nion-content .wrapper .illnessSection .normalTextInput {\n  background: white;\n  width: 100%;\n  border: none;\n  padding-right: 10px;\n  border-radius: 10px;\n  text-align: left;\n}\n\nion-content .wrapper .illnessSection .mediumTextArea {\n  background: white;\n  width: 100%;\n  border: none;\n  padding: 10px;\n  border-radius: 10px;\n}\n\nion-content .wrapper .illnessSection .bigTextArea {\n  background: white;\n  padding: 10px;\n  width: 100%;\n  border: none;\n  border-radius: 10px;\n  text-align: left;\n}\n\nion-content .wrapper .illnessSection .dateTimeItem {\n  width: 100%;\n  padding: 0px !important;\n  margin-bottom: 10px;\n  --background: white;\n  border-radius: 10px;\n}\n\nion-content .wrapper .illnessSection .dateTimeItem .dateTimePlaceHolder {\n  margin-left: 0px;\n  padding-right: 0px;\n  margin-top: 0px;\n  margin-bottom: 0px;\n}\n\nion-content .wrapper .illnessSection .dateTimeItem .dateTimeInput {\n  padding-left: 0px;\n  margin: 0px;\n  padding-top: 0px;\n  padding-bottom: 0px;\n}\n\nion-content .wrapper .illnessSection .textLabel {\n  margin-bottom: 10px;\n  text-align: left;\n  display: -webkit-box;\n  display: flex;\n}\n\nion-content .wrapper .illnessSection .textSubLabel {\n  float: left;\n  color: #949494;\n  font-size: x-small;\n  text-align: left;\n}\n\nion-content .wrapper .illnessSection .redLabel {\n  color: #ff5757;\n  font-weight: normal;\n  margin-bottom: 10px;\n  text-align: left;\n  display: -webkit-box;\n  display: flex;\n}\n\nion-content .wrapper .illnessSection .textAreaTextLabel {\n  font-weight: normal;\n  margin-bottom: 10px;\n  text-align: left;\n  display: -webkit-box;\n  display: flex;\n}\n\nion-content .wrapper .illnessSection .right {\n  float: right;\n}\n\nion-content .wrapper .ion-padding ion-button {\n  height: 48px;\n}\n\nion-content .illnessSectionList {\n  margin-bottom: 25px;\n  margin-top: 25px;\n}\n\nion-content .illnessSectionList #listItem {\n  border-left: #0096c6 1vw solid;\n  --ion-background-color: white;\n  background: white;\n  --background: white;\n}\n\nion-content .illnessSectionList #listItem .diseaseLabel {\n  margin: 20px;\n}\n\nion-content .illnessSectionList #listItem .diseaseLabel .textSubLabel {\n  text-align: left;\n  color: #949494;\n  font-size: x-small;\n  margin-left: 10px;\n  margin-right: 10px;\n  margin-bottom: 0px;\n  padding: 0px;\n}\n\nion-content .illnessSectionList #listItem .diseaseLabel .textLabel {\n  margin-bottom: 10px;\n  text-align: left;\n  color: black;\n  margin-left: 10px;\n  margin-right: 10px;\n  padding: 0px;\n}\n\nion-content .illnessSectionList .paginationTextLabel {\n  font-size: small;\n  display: -webkit-box;\n  display: flex;\n  text-align: left;\n  color: black;\n  margin-left: 15px;\n  margin-right: 15px;\n  padding: 0px;\n}\n\nion-segment ion-segment-button {\n  padding-left: 10px;\n  padding-right: 10px;\n  max-width: 100%;\n}\n/*# sourceMappingURL=data:application/json;base64, */";
    /***/
  },

  /***/
  "./src/app/pages/past-medical-history/past-medical-history.page.ts":
  /*!*************************************************************************!*\
    !*** ./src/app/pages/past-medical-history/past-medical-history.page.ts ***!
    \*************************************************************************/

  /*! exports provided: PastMedicalHistoryPage */

  /***/
  function srcAppPagesPastMedicalHistoryPastMedicalHistoryPageTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "PastMedicalHistoryPage", function () {
      return PastMedicalHistoryPage;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/fesm2015/core.js");
    /* harmony import */


    var _services_past_medical_history_api_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./../../services/past-medical-history-api.service */
    "./src/app/services/past-medical-history-api.service.ts");
    /* harmony import */


    var _services_patient_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ./../../services/patient.service */
    "./src/app/services/patient.service.ts");
    /* harmony import */


    var _services_login_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ./../../services/login.service */
    "./src/app/services/login.service.ts");
    /* harmony import */


    var _services_api_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ./../../services/api.service */
    "./src/app/services/api.service.ts");
    /* harmony import */


    var _services_loading_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ./../../services/loading.service */
    "./src/app/services/loading.service.ts");
    /* harmony import */


    var _services_string_utils_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
    /*! ./../../services/string-utils.service */
    "./src/app/services/string-utils.service.ts");
    /* harmony import */


    var _services_permission_validator_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
    /*! ./../../services/permission-validator.service */
    "./src/app/services/permission-validator.service.ts");
    /* harmony import */


    var _models_present_illness__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
    /*! ./../../models/present-illness */
    "./src/app/models/present-illness.ts");
    /* harmony import */


    var _models_past_medical_history__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
    /*! ./../../models/past-medical-history */
    "./src/app/models/past-medical-history.ts");
    /* harmony import */


    var _models_surgical_history__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
    /*! ./../../models/surgical-history */
    "./src/app/models/surgical-history.ts");
    /* harmony import */


    var _models_family_medical_history__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
    /*! ./../../models/family-medical-history */
    "./src/app/models/family-medical-history.ts");
    /* harmony import */


    var _models_past_medical_history_config__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(
    /*! ./../../models/past-medical-history-config */
    "./src/app/models/past-medical-history-config.ts");
    /* harmony import */


    var _ionic_angular__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(
    /*! @ionic/angular */
    "./node_modules/@ionic/angular/dist/fesm5.js");
    /* harmony import */


    var moment__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(
    /*! moment */
    "./node_modules/moment/moment.js");
    /* harmony import */


    var moment__WEBPACK_IMPORTED_MODULE_15___default =
    /*#__PURE__*/
    __webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_15__);
    /* harmony import */


    var src_app_app_services_alert_service_service__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(
    /*! src/app/app/services/alert-service.service */
    "./src/app/app/services/alert-service.service.ts");
    /* harmony import */


    var _angular_forms__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(
    /*! @angular/forms */
    "./node_modules/@angular/forms/fesm2015/forms.js");
    /* harmony import */


    var _digit_quantitiy_validator__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(
    /*! ./digit-quantitiy-validator */
    "./src/app/pages/past-medical-history/digit-quantitiy-validator.ts");

    var PastMedicalHistoryPage =
    /*#__PURE__*/
    function () {
      function PastMedicalHistoryPage(pastMedicalHistoryApiService, patientService, apiService, loginService, loadingService, stringUtilsService, permissionValidatorService, alertServ, formBuilder, menuController) {
        _classCallCheck(this, PastMedicalHistoryPage);

        this.pastMedicalHistoryApiService = pastMedicalHistoryApiService;
        this.patientService = patientService;
        this.apiService = apiService;
        this.loginService = loginService;
        this.loadingService = loadingService;
        this.stringUtilsService = stringUtilsService;
        this.permissionValidatorService = permissionValidatorService;
        this.alertServ = alertServ;
        this.formBuilder = formBuilder;
        this.menuController = menuController;
        this.pageTitle = 'History of Present Illness';
        this.haspresentIllness = false;
        this.presentIllnessModified = {
          modified_by: null,
          modified_dt: null
        };
        this.hasPastMedicalHistory = false;
        this.pastMedicalHistoryModified = {
          modified_by: null,
          modified_dt: null
        };
        this.hasSurgicalHistory = false;
        this.surgicalHistoryModified = {
          modified_by: null,
          modified_dt: null
        };
        this.hasFamilyHistory = false;
        this.familyHistoryModified = {
          modified_by: null,
          modified_dt: null
        };
        this.hasSocialHistory = false;
        this.socialHistoryModified = {
          modified_by: null,
          modified_dt: null
        };
        this.hasImmunization = false;
        this.immunizationRecordModified = {
          modified_by: null,
          modified_dt: null
        };
        this.hasMenstrualHistory = false;
        this.menstrualHistoryModified = {
          modified_by: null,
          modified_dt: null
        };
        this.hasPregnantHistory = false;
        this.pregnantHistoryModified = {
          modified_by: null,
          modified_dt: null
        };
        this.tabs = [];
        this.selectedTab = '';
        this.currentTab = '';
        this.historyOfPresentIllness = '';
        this.isSmoker = 'Y';
        this.isDrinker = 'Y';
        this.isDrugUser = 'Y';
        this.yearsOfSmoking = 0;
        this.stickPerDay = 0;
        this.stickPerYear = 0;
        this.noOfBottles = 0;
        this.gynecologicalTab = 'menstrual-history';
        this.isMenopause = 'N';
        this.isMenstrualApplicable = 'Y';
        this.isPregnantlApplicable = 'Y';
        this.ageOfFirstMenstrual = 0;
        this.dateOfLastMenstrual = '';
        this.durationOfMenstrualPeriod = 0;
        this.intervalOfMenstrual = 0;
        this.noOfPadsPerDay = 0;
        this.ageOfFirstSexualIntercourse = 0;
        this.birthControlMethodUsed = '';
        this.ageOfMenopause = 0;
        this.menstrualRemarks = '';
        this.noOfPregnancy = 0;
        this.noOfDelivery = 0;
        this.typeOfDeliver = '';
        this.noOfFullTermPregnancy = 0;
        this.noOfPrematurePregnancy = 0;
        this.noOfAbortion = 0;
        this.noOfLivingChildren = 0;
        this.inducedHypertension = '';
        this.accessToFamilyPlanning = '';
        this.pregnancyRemarks = '';
        this.childImmunizationIndex = 0;
        this.adultImmunizationIndex = 0;
        this.elderlyImmunizationIndex = 0;
        this.otherImmunization = '';
        this.immunizationRemarks = '';
        this.pastMed_DeseacDescription = 'None';
        this.pastMedSurgical_description = '';
        this.pastMedSurgical_remarks = '';
        this.familyIllnessDefaultDescription = 'None';
        this.surgicalRemarks = '';
        this.options = {
          noSwiping: true,
          noSwipingClass: 'illnessSectionList',
          autoHeight: true
        };
        this.isPresentIllnessLoaded = false;
        this.isPastMedicalHistoryLoaded = false;
        this.isSurgicalHistoryLoaded = false;
        this.isFamilyHistoryLoaded = false;
        this.isSocialHistoryLoaded = false;
        this.isGynecologicalHistoryLoaded = false;
        this.isImmunizationRecordLoaded = false;
        this.pIllnessView = true;
        this.pIllnessSave = true;
        this.pPastmedicalHistorySave = true;
        this.pPastmedicalHistoryView = true;
        this.pSurgicalHistoryView = true;
        this.pSurgicalHistorySave = true;
        this.pFamilyHistoryView = true;
        this.pFamilyHistorySave = true;
        this.pSocialHistoryView = true;
        this.pSocialHistorySave = true;
        this.pGynecologicalObstetricHistoryView = true;
        this.pMenstrualView = true;
        this.pMenstrualSave = true;
        this.pPregnantView = true;
        this.pPregnantSave = true;
        this.pImmunizationView = true;
        this.pImmunizationSave = true;
        this.SAVE_PRESENT_DISEASE = 1;
        this.ADD_PAST_MEDICAL_HISTORY = 2;
        this.REMOVE_PAST_MEDICAL_HISTORY = 3;
        this.ADD_SURGICAL_HISTORY = 4;
        this.REMOVE_SURGICAL_HISTORY = 5;
        this.ADD_FAMILY_MEDICAL_HISTORY = 6;
        this.REMOVE_FAMILY_MEDICAL_HISTORY = 7;
        this.SAVE_SOCIAL_MEDICAL_HISTORY = 8;
        this.SAVE_MENSTRUAL_HISTORY = 9;
        this.SAVE_PREGNANCY_HISTORY = 10;
        this.SAVE_IMMUNIZATION_RECORD = 11;
        this.authentication = this.loginService.getAuthentication();
        this.pastMedicalHistoryApiService.setToken(this.authentication.token);
        this.pastMedicalHistoryApiService.setUrl(this.apiService.getUrl());
        this.selectedPatient = this.patientService.getSelectedPatientBriefInformation();
        this.selectedEncounterNo = this.patientService.getSelectedEncounterNo();
        var configAndDefaults = this.loginService.getConfigAndDefaults();
        this.config = new _models_past_medical_history_config__WEBPACK_IMPORTED_MODULE_13__["PastMedicalHistoryConfig"]();
        this.config.m_patient_presentillness = configAndDefaults.pastmedical['m-patient-presentillness'];
        this.config.m_patient_pastmedicalhistory = configAndDefaults.pastmedical['m-patient-pastmedicalhistory'];
        this.config.m_patient_surgicalhistory = configAndDefaults.pastmedical['m-patient-surgicalhistory'];
        this.config.m_patient_familyhistory = configAndDefaults.pastmedical['m-patient-familyhistory'];
        this.config.m_patient_socialhistory = configAndDefaults.pastmedical['m-patient-socialhistory'];
        this.config.m_patient_menstrual = configAndDefaults.pastmedical['m-patient-menstrual'];
        this.config.m_patient_pregnant = configAndDefaults.pastmedical['m-patient-pregnant'];
        this.config.m_patient_immunization = configAndDefaults.pastmedical['m-patient-immunization'];
        var pastMedicalDefaultOptions = this.config.m_patient_pastmedicalhistory['default-options'];
        this.pastIllnesses = pastMedicalDefaultOptions.pastmedical.disease;
        console.log('pastIllnesses', this.pastIllnesses);
        this.pastIllnessDefaultIndex = 0;
        var familyHistoryDefaultOptions = this.config.m_patient_familyhistory['default-options'];
        this.familyIllnesses = familyHistoryDefaultOptions.familyhistory.disease;
        console.log('illnesses', this.familyIllnesses);
        this.familyIllnessDefaultIndex = 0;
        var immunizationDefaultOptions = this.config.m_patient_immunization['default-options'];
        this.childImmunizationCodes = immunizationDefaultOptions.immunization.childimm;
        console.log('childImmunizationCodes', this.childImmunizationCodes);
        this.adultImmunizationCodes = immunizationDefaultOptions.immunization.adultimm;
        console.log('adultImmunizationCodes', this.adultImmunizationCodes);
        this.elderlyImmunizationCodes = immunizationDefaultOptions.immunization.elderlyimm;
        console.log('elderlyImmunizationCodes', this.elderlyImmunizationCodes); // init immunization selection

        this.childImmunizationIndex = 0;
        this.adultImmunizationIndex = 0;
        this.elderlyImmunizationIndex = 0;
        this.fetchDefaultOptions();
      }

      _createClass(PastMedicalHistoryPage, [{
        key: "initUserInterfaceByRole",
        value: function initUserInterfaceByRole() {
          console.error('initUserInterfaceByRole() called');
          this.pIllnessSave = this.permissionValidatorService.hasPastMedEdit(); // tslint:disable-next-line: max-line-length

          this.pPastmedicalHistorySave = this.permissionValidatorService.hasPastMedEdit(); // tslint:disable-next-line: max-line-length

          this.pSurgicalHistorySave = this.permissionValidatorService.hasPastMedEdit(); // tslint:disable-next-line: max-line-length

          this.pFamilyHistorySave = this.permissionValidatorService.hasPastMedEdit(); // tslint:disable-next-line: max-line-length

          this.pSocialHistorySave = this.permissionValidatorService.hasPastMedEdit();
          this.pMenstrualSave = this.permissionValidatorService.hasPastMedEdit();
          this.pPregnantSave = this.permissionValidatorService.hasPastMedEdit();
          this.pImmunizationSave = this.permissionValidatorService.hasPastMedEdit();
          this.tabs = ['present-illness', 'past-history', 'surgical-history', 'family-history', 'social-history', 'gynecological-history', 'immunization-record'];
          console.error('this.selectedPatient.spin0.person_his.gender', this.selectedPatient.spin0.person_his.gender);

          if (this.selectedPatient.spin0.person_his.gender == 'm') {
            this.pGynecologicalObstetricHistoryView = false;
          } else {
            this.pGynecologicalObstetricHistoryView = this.pMenstrualView || this.pPregnantView;
          }

          if (this.pMenstrualView) {
            this.gynecologicalTab = 'menstrual-history';
          } else if (this.pPregnantView) {
            this.gynecologicalTab = 'pregnant-history';
          }

          if (!this.pGynecologicalObstetricHistoryView) {
            var i = this.tabs.indexOf('gynecological-history');

            if (i >= 0) {
              this.tabs.splice(i, 1);
            }
          }

          console.log(this.tabs);

          if (this.tabs.length > 0) {
            this.selectedTab = this.tabs[0];
          }
        }
      }, {
        key: "getPresentIllness",
        value: function getPresentIllness() {
          var _this3 = this;

          return new Promise(function (resolve, reject) {
            _this3.historyOfPresentIllness = '';

            _this3.loadingService.present();

            _this3.pastMedicalHistoryApiService.getPresentIllness(_this3.selectedEncounterNo).subscribe(function (result) {
              console.log(result);

              _this3.loadingService.dismiss().then(function (_) {
                var presentIllness = new _models_present_illness__WEBPACK_IMPORTED_MODULE_9__["PresentIllness"](result);

                if (result.id) {
                  presentIllness = result;
                  _this3.haspresentIllness = true;
                  _this3.historyOfPresentIllness = presentIllness.history ? presentIllness.history : '';
                } else {
                  _this3.haspresentIllness = false;
                  _this3.historyOfPresentIllness = '';
                }

                _this3.presentIllnessModified.modified_by = presentIllness.modified_name;
                _this3.presentIllnessModified.modified_dt = presentIllness.updated_at;
                console.log(_this3.historyOfPresentIllness);
                resolve(presentIllness);
              });
            }, function (err) {
              console.log('err ', err);

              _this3.loadingService.dismiss().then(function (_) {
                var message = _this3.stringUtilsService.parseErrorMessage(err);

                _this3.alertServ.openAlertModal('fail', 'Failed', message, 'Ok');

                reject(err);
              });
            });
          });
        }
      }, {
        key: "fetchDefaultOptions",
        value: function fetchDefaultOptions() {
          var _this4 = this;

          return new Promise(function (resolve, reject) {
            if (_this4.adultImmunizationCodes.length > 0) {
              console.log('Past med options already loaded...');
              resolve([]);
            } else {
              _this4.pastMedicalHistoryApiService.getDefaultOptions().subscribe(function (result) {
                _this4.config.m_patient_pastmedicalhistory['default-options'].pastmedical.disease = result.pastmedical.disease;
                _this4.config.m_patient_familyhistory['default-options'].familyhistory.disease = result.familyhistory.disease;
                _this4.config.m_patient_immunization['default-options'].immunization.childimm = result.immunization.childimm;
                _this4.config.m_patient_immunization['default-options'].immunization.adultimm = result.immunization.adultimm;
                _this4.config.m_patient_immunization['default-options'].immunization.elderlyimm = result.immunization.elderlyimm;
                _this4.pastIllnesses = result.pastmedical.disease;
                _this4.familyIllnesses = result.familyhistory.disease;
                _this4.childImmunizationCodes = result.immunization.childimm;
                _this4.adultImmunizationCodes = result.immunization.adultimm;
                _this4.elderlyImmunizationCodes = result.immunization.elderlyimm;
                _this4.pastIllnessDefaultIndex = 0;
                _this4.familyIllnessDefaultIndex = 0;
                _this4.childImmunizationIndex = 0;
                _this4.adultImmunizationIndex = 0;
                _this4.elderlyImmunizationIndex = 0;
              }, function (err) {
                console.log('err ', err);

                _this4.loadingService.dismiss().then(function (_) {
                  var message = _this4.stringUtilsService.parseErrorMessage(err);

                  _this4.alertServ.openAlertModal('fail', 'Failed', message, 'Ok');

                  reject(err);
                });
              });
            }
          });
        }
      }, {
        key: "getPastMedicalHistories",
        value: function getPastMedicalHistories() {
          var _this5 = this;

          return new Promise(function (resolve, reject) {
            _this5.medicalHistories = [];

            _this5.loadingService.present();

            _this5.pastMedicalHistoryApiService.getPastMedicalHistories(_this5.selectedEncounterNo).subscribe(function (result) {
              _this5.loadingService.dismiss().then(function (_) {
                _this5.medicalHistories = result;

                if (result.length > 0) {
                  _this5.medicalHistories = _this5.medicalHistories.filter(function (item) {
                    return item.is_deleted == 0;
                  });
                  _this5.hasPastMedicalHistory = true;
                  _this5.pastMedicalHistoryModified.modified_by = result[result.length - 1].modified_name;
                  _this5.pastMedicalHistoryModified.modified_dt = result[result.length - 1].updated_at;
                } else {
                  _this5.hasPastMedicalHistory = false;
                  _this5.pastMedicalHistoryModified.modified_by = null;
                  _this5.pastMedicalHistoryModified.modified_dt = null;
                }

                _this5.pastIllnessDefaultIndex = 0;
                resolve(result);
              });
            }, function (err) {
              console.log('err ', err);

              _this5.loadingService.dismiss().then(function (_) {
                var message = _this5.stringUtilsService.parseErrorMessage(err);

                _this5.alertServ.openAlertModal('fail', 'Failed', message, 'Ok');

                reject(err);
              });
            });
          });
        }
      }, {
        key: "getSurgicalHistories",
        value: function getSurgicalHistories() {
          var _this6 = this;

          return new Promise(function (resolve, reject) {
            _this6.surgicalHistories = [];

            _this6.loadingService.present();

            _this6.pastMedicalHistoryApiService.getSurgicalHistories(_this6.selectedEncounterNo).subscribe(function (result) {
              console.log(result);
              _this6.surgicalHistories = result;

              _this6.loadingService.dismiss().then(function (_) {
                if (result.length > 0) {
                  _this6.surgicalHistories = _this6.surgicalHistories.filter(function (item) {
                    return item.is_deleted == 0;
                  });
                  _this6.hasSurgicalHistory = true;
                  _this6.surgicalHistoryModified.modified_by = result[result.length - 1].modified_name;
                  _this6.surgicalHistoryModified.modified_dt = result[result.length - 1].updated_at;
                } else {
                  _this6.surgicalHistoryModified.modified_by = '';
                  _this6.surgicalHistoryModified.modified_dt = '';
                  _this6.hasSurgicalHistory = false;
                }

                resolve(result);
              });
            }, function (err) {
              console.log('err ', err);

              _this6.loadingService.dismiss().then(function (_) {
                var message = _this6.stringUtilsService.parseErrorMessage(err);

                _this6.alertServ.openAlertModal('fail', 'Failed', message, 'Ok');

                reject(err);
              });
            });
          });
        }
      }, {
        key: "getFamilyMedicalHistories",
        value: function getFamilyMedicalHistories() {
          var _this7 = this;

          return new Promise(function (resolve, reject) {
            _this7.familyMedicalHistories = [];

            _this7.loadingService.present();

            _this7.pastMedicalHistoryApiService.getFamilyMedicalHistories(_this7.selectedEncounterNo).subscribe(function (result) {
              console.log(result);

              _this7.loadingService.dismiss().then(function (_) {
                _this7.familyMedicalHistories = result;

                if (result.length > 0) {
                  _this7.familyMedicalHistories = _this7.familyMedicalHistories.filter(function (item) {
                    return item.is_deleted == 0;
                  });
                  _this7.hasFamilyHistory = true;
                  _this7.familyHistoryModified.modified_by = result[result.length - 1].modified_name;
                  _this7.familyHistoryModified.modified_dt = result[result.length - 1].updated_at;
                } else {
                  _this7.familyHistoryModified.modified_by = '';
                  _this7.familyHistoryModified.modified_dt = '';
                  _this7.hasFamilyHistory = false;
                }

                _this7.familyIllnessDefaultIndex = 0;
                resolve(result);
              });
            }, function (err) {
              console.log('err ', err);

              _this7.loadingService.dismiss().then(function (_) {
                var message = _this7.stringUtilsService.parseErrorMessage(err);

                _this7.alertServ.openAlertModal('fail', 'Failed', message, 'Ok');

                reject(err);
              });
            });
          });
        }
      }, {
        key: "getSocialMedicalHistory",
        value: function getSocialMedicalHistory() {
          var _this8 = this;

          return new Promise(function (resolve, reject) {
            _this8.isSmoker = 'N';
            _this8.isDrinker = 'N';
            _this8.isDrugUser = 'N';
            _this8.yearsOfSmoking = 0;
            _this8.stickPerDay = 0;
            _this8.stickPerYear = 0;
            _this8.noOfBottles = 0;

            _this8.loadingService.present();

            _this8.pastMedicalHistoryApiService.getSocialMedicalHistory(_this8.selectedEncounterNo).subscribe(function (result) {
              console.log(result);

              _this8.loadingService.dismiss().then(function (_) {
                if (result.length > 0) {
                  _this8.socialHistory = result[0];
                } else {
                  _this8.socialHistory = result;
                }

                if (_this8.socialHistory) {
                  _this8.hasSocialHistory = false;
                  _this8.socialHistoryModified.modified_by = _this8.socialHistory.modified_name;
                  _this8.socialHistoryModified.modified_dt = _this8.socialHistory.updated_at;

                  if (_this8.socialHistory.is_smoke) {
                    _this8.isSmoker = _this8.socialHistory.is_smoke.toLocaleUpperCase();

                    if ('Y' == _this8.isSmoker) {
                      _this8.yearsOfSmoking = _this8.socialHistory.years_smoking ? _this8.socialHistory.years_smoking : 0;
                      _this8.stickPerDay = _this8.socialHistory.stick_per_day ? _this8.socialHistory.stick_per_day : 0;
                      _this8.stickPerYear = _this8.computeStringPerYear(_this8.yearsOfSmoking, _this8.stickPerDay);
                    }
                  }

                  if (_this8.socialHistory.is_alcohol) {
                    _this8.isDrinker = _this8.socialHistory.is_alcohol.toLocaleUpperCase();

                    if ('Y' == _this8.isDrinker) {
                      _this8.noOfBottles = _this8.socialHistory.no_bottles ? _this8.socialHistory.no_bottles : 0;
                    }
                  }

                  if (_this8.socialHistory.is_drug) {
                    _this8.isDrugUser = _this8.socialHistory.is_drug.toLocaleUpperCase();

                    if ('Y' == _this8.isDrugUser) {}
                  }
                }

                if (result.length == 0) {
                  _this8.hasSocialHistory = true;
                }

                console.error('update values after fetching');
                _this8.socialHistform = _this8.formBuilder.group(_this8.getSocialhisFormRules());

                if (_this8.isDrinker == 'Y' || _this8.isDrinker == 'X') {
                  _this8.socialHistform.get('noOfBottles').setValue(_this8.noOfBottles);
                }

                if (_this8.isSmoker == 'Y') {
                  _this8.socialHistform.get('yearsOfSmoking').setValue(_this8.yearsOfSmoking);

                  _this8.socialHistform.get('stickPerDay').setValue(_this8.stickPerDay);
                }

                resolve(result);
              });
            }, function (err) {
              console.log('err ', err);

              _this8.loadingService.dismiss().then(function (_) {
                var message = _this8.stringUtilsService.parseErrorMessage(err);

                _this8.alertServ.openAlertModal('fail', 'Failed', message, 'Ok');

                reject(err);
              });
            });
          });
        }
      }, {
        key: "getGynecologicalHistory",
        value: function getGynecologicalHistory() {
          var _this9 = this;

          return new Promise(function (resolve, reject) {
            _this9.isMenopause = 'N';
            _this9.isMenstrualApplicable = 'N';
            _this9.isPregnantlApplicable = 'N';
            _this9.ageOfFirstMenstrual = 0;
            _this9.dateOfLastMenstrual = '';
            _this9.durationOfMenstrualPeriod = 0;
            _this9.intervalOfMenstrual = 0;
            _this9.noOfPadsPerDay = 0;
            _this9.ageOfFirstSexualIntercourse = 0;
            _this9.birthControlMethodUsed = '';
            _this9.ageOfMenopause = 0;
            _this9.menstrualRemarks = '';
            _this9.noOfPregnancy = 0;
            _this9.noOfDelivery = 0;
            _this9.typeOfDeliver = '';
            _this9.noOfFullTermPregnancy = 0;
            _this9.noOfPrematurePregnancy = 0;
            _this9.noOfAbortion = 0;
            _this9.noOfLivingChildren = 0;
            _this9.inducedHypertension = '';
            _this9.accessToFamilyPlanning = '';
            _this9.pregnancyRemarks = '';

            _this9.loadingService.present();

            _this9.pastMedicalHistoryApiService.getGynecologicalObstetricHistory(_this9.selectedEncounterNo).subscribe(function (result) {
              console.log(result);

              _this9.loadingService.dismiss().then(function (_) {
                if (result.length > 0) {
                  if (result[0].data) {
                    if (result[0].data.menstrualHistory) {
                      _this9.menstrualHistory = result[0].data.menstrualHistory;
                    }

                    if (result[0].data.pregnantHistory) {
                      _this9.pregnantHistory = result[0].data.pregnantHistory;
                    }
                  }
                } else {
                  if (result.data) {
                    if (result.data.menstrualHistory) {
                      _this9.menstrualHistory = result.data.menstrualHistory;
                    }

                    if (result.data.menstrualHistory == null) {
                      _this9.hasMenstrualHistory = false;
                      _this9.menstrualHistoryModified.modified_by = '';
                      _this9.menstrualHistoryModified.modified_dt = '';
                    } else {
                      _this9.hasMenstrualHistory = true;
                      _this9.menstrualHistoryModified.modified_by = _this9.menstrualHistory.modified_name;
                      _this9.menstrualHistoryModified.modified_dt = _this9.menstrualHistory.updated_at;
                    }

                    if (result.data.pregnantHistory == null) {
                      _this9.pregnantHistoryModified.modified_by = '';
                      _this9.pregnantHistoryModified.modified_dt = '';
                      _this9.hasPregnantHistory = false;
                    } else {
                      _this9.pregnantHistory = result.data.pregnantHistory;
                      _this9.hasPregnantHistory = true;
                      _this9.pregnantHistoryModified.modified_by = _this9.pregnantHistory.modified_name;
                      _this9.pregnantHistoryModified.modified_dt = _this9.pregnantHistory.updated_at;
                    }
                  }
                }

                console.log(_this9.menstrualHistory);

                if (_this9.menstrualHistory) {
                  if (_this9.menstrualHistory.is_applicable_menstrual) {
                    _this9.isMenstrualApplicable = _this9.menstrualHistory.is_applicable_menstrual;
                    _this9.ageOfFirstMenstrual = _this9.menstrualHistory.age_first_menstrual;
                    _this9.dateOfLastMenstrual = _this9.menstrualHistory.last_period_menstrual;
                    _this9.durationOfMenstrualPeriod = _this9.menstrualHistory.no_days_menstrual_period;
                    _this9.intervalOfMenstrual = _this9.menstrualHistory.interval_menstrual_period;
                    _this9.noOfPadsPerDay = _this9.menstrualHistory.no_pads;
                    _this9.ageOfFirstSexualIntercourse = _this9.menstrualHistory.age_sex_intercourse;
                    _this9.birthControlMethodUsed = _this9.menstrualHistory.birth_control_used;
                    _this9.isMenopause = _this9.menstrualHistory.is_menopause;
                    _this9.ageOfMenopause = _this9.menstrualHistory.age_menopause;
                    _this9.menstrualRemarks = _this9.menstrualHistory.remarks;
                  }
                }

                console.log(_this9.pregnantHistory);

                if (_this9.pregnantHistory) {
                  if (_this9.pregnantHistory.is_applicable_pregnant) {
                    _this9.isPregnantlApplicable = _this9.pregnantHistory.is_applicable_pregnant;
                    _this9.noOfPregnancy = _this9.pregnantHistory.date_gravidity;
                    _this9.noOfDelivery = _this9.pregnantHistory.date_parity;
                    _this9.typeOfDeliver = _this9.pregnantHistory.type_delivery;
                    _this9.noOfFullTermPregnancy = _this9.pregnantHistory.no_full_term_preg;
                    _this9.noOfPrematurePregnancy = _this9.pregnantHistory.no_premature;
                    _this9.noOfAbortion = _this9.pregnantHistory.no_abortion;
                    _this9.noOfLivingChildren = _this9.pregnantHistory.no_living_children;
                    _this9.inducedHypertension = _this9.pregnantHistory.induced_hyper;
                    _this9.accessToFamilyPlanning = _this9.pregnantHistory.family_planning;
                    _this9.pregnancyRemarks = _this9.pregnantHistory.remarks;
                  }
                }

                _this9.menHistform = _this9.formBuilder.group(_this9.getMenhisFormRules());

                if (_this9.isMenstrualApplicable == 'Y') {
                  _this9.menHistform.get('ageOfFirstMenstrual').setValue(_this9.ageOfFirstMenstrual);

                  _this9.menHistform.get('durationOfMenstrualPeriod').setValue(_this9.durationOfMenstrualPeriod);

                  _this9.menHistform.get('intervalOfMenstrual').setValue(_this9.intervalOfMenstrual);

                  _this9.menHistform.get('noOfPadsPerDay').setValue(_this9.noOfPadsPerDay);

                  _this9.menHistform.get('ageOfFirstSexualIntercourse').setValue(_this9.ageOfFirstSexualIntercourse);

                  _this9.menHistform.get('birthControlMethodUsed').setValue(_this9.birthControlMethodUsed);

                  _this9.menHistform.get('ageOfMenopause').setValue(_this9.ageOfMenopause);

                  _this9.menHistform.get('menstrualRemarks').setValue(_this9.menstrualRemarks);
                }

                _this9.pregHistform = _this9.formBuilder.group(_this9.getPreghisFormRules());

                if (_this9.isPregnantlApplicable == 'Y') {
                  _this9.pregHistform.get('noOfPregnancy').setValue(_this9.noOfPregnancy);

                  _this9.pregHistform.get('noOfDelivery').setValue(_this9.noOfDelivery);

                  _this9.pregHistform.get('typeOfDeliver').setValue(_this9.typeOfDeliver);

                  _this9.pregHistform.get('noOfFullTermPregnancy').setValue(_this9.noOfFullTermPregnancy);

                  _this9.pregHistform.get('noOfPrematurePregnancy').setValue(_this9.noOfPrematurePregnancy);

                  _this9.pregHistform.get('noOfAbortion').setValue(_this9.noOfAbortion);

                  _this9.pregHistform.get('noOfLivingChildren').setValue(_this9.noOfLivingChildren);

                  _this9.pregHistform.get('inducedHypertension').setValue(_this9.inducedHypertension);

                  _this9.pregHistform.get('accessToFamilyPlanning').setValue(_this9.accessToFamilyPlanning);

                  _this9.pregHistform.get('pregnancyRemarks').setValue(_this9.pregnancyRemarks);
                }

                resolve(result);
              });
            }, function (err) {
              console.log('err ', err);

              _this9.loadingService.dismiss().then(function (_) {
                var message = _this9.stringUtilsService.parseErrorMessage(err);

                _this9.alertServ.openAlertModal('fail', 'Failed', message, 'Ok');

                reject(err);
              });
            });
          });
        }
      }, {
        key: "getImmunizationRecord",
        value: function getImmunizationRecord() {
          var _this10 = this;

          return new Promise(function (resolve, reject) {
            _this10.loadingService.present();

            _this10.pastMedicalHistoryApiService.getImmunizationRecord(_this10.selectedEncounterNo).subscribe(function (result) {
              console.log(result);

              _this10.loadingService.dismiss().then(function (_) {
                _this10.childImmunizationIndex = 0;
                _this10.adultImmunizationIndex = 0;
                _this10.elderlyImmunizationIndex = 0;
                _this10.otherImmunization = '';
                _this10.immunizationRemarks = '';
                var immunizationRecord;

                if (result.length > 0) {
                  immunizationRecord = result;
                } else {
                  immunizationRecord = result;
                }

                if (immunizationRecord) {
                  _this10.hasImmunization = true;
                  _this10.immunizationRecordModified.modified_by = immunizationRecord.modified_name;
                  _this10.immunizationRecordModified.modified_dt = immunizationRecord.updated_at;

                  if (immunizationRecord.code) {
                    _this10.alertServ.openAlertModal('fail', 'Failed', immunizationRecord.message, 'Ok');
                  } else if (immunizationRecord.id) {
                    var cIndex = _this10.childImmunizationCodes.findIndex(function (item) {
                      var cId = immunizationRecord.child_id ? immunizationRecord.child_id : 0;
                      return item.id == cId;
                    });

                    _this10.childImmunizationIndex = cIndex;

                    var aIndex = _this10.adultImmunizationCodes.findIndex(function (item) {
                      var aId = immunizationRecord.young_id ? immunizationRecord.young_id : 0;
                      return item.id == aId;
                    });

                    _this10.adultImmunizationIndex = aIndex;

                    var eIndex = _this10.elderlyImmunizationCodes.findIndex(function (item) {
                      var eId = immunizationRecord.elder_id ? immunizationRecord.elder_id : 0;
                      return item.id == eId;
                    });

                    _this10.elderlyImmunizationIndex = eIndex;
                    _this10.otherImmunization = immunizationRecord.other_code;
                    _this10.immunizationRemarks = immunizationRecord.remarks;
                  }
                }

                if (result.length == 0) {
                  _this10.hasImmunization = false;
                  _this10.immunizationRecordModified.modified_by = null;
                  _this10.immunizationRecordModified.modified_dt = null;
                }

                resolve(immunizationRecord);
              });
            }, function (err) {
              console.log('err ', err);

              _this10.loadingService.dismiss().then(function (_) {
                var message = _this10.stringUtilsService.parseErrorMessage(err);

                _this10.alertServ.openAlertModal('fail', 'Failed', message, 'Ok');

                reject(err);
              });
            });
          });
        }
      }, {
        key: "getMenhisFormRules",
        value: function getMenhisFormRules() {
          var rules = {// isMenstrualApplicable: ['', Validators.compose([
            //   Validators.required
            // ])],
          };

          if (this.isMenstrualApplicable == 'Y') {
            rules['ageOfFirstMenstrual'] = [0, _angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].pattern("^[0-9]+$"), _angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].min(0)])];
            rules['durationOfMenstrualPeriod'] = [0, _angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].pattern("^[0-9]+$"), _angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].min(0)])];
            rules['intervalOfMenstrual'] = [0, _angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].pattern("^[0-9]+$"), _angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].min(0)])];
            rules['noOfPadsPerDay'] = [0, _angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].pattern("^[0-9]+$"), _angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].min(0)])];
            rules['ageOfFirstSexualIntercourse'] = [0, _angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].pattern("^[0-9]+$"), _angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].min(0)])];
            rules['birthControlMethodUsed'] = ['', _angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].maxLength(2000)])];
            rules['ageOfMenopause'] = [0, _angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].pattern("^[0-9]+$"), _angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].min(0)])];
            rules['menstrualRemarks'] = ['', _angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].maxLength(2000)])];
          }

          console.error('this.menHistform rules', rules);
          return rules;
        }
      }, {
        key: "getSocialhisFormRules",
        value: function getSocialhisFormRules() {
          var rules = {// isMenstrualApplicable: ['', Validators.compose([
            //   Validators.required
            // ])],
          };

          if (this.isDrinker == 'Y' || this.isDrinker == 'X') {
            rules['noOfBottles'] = ['', _angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].compose([// Validators.pattern("^[0-9]+$"),
            // Validators.min(0)
            _digit_quantitiy_validator__WEBPACK_IMPORTED_MODULE_18__["DigitQuantitiyValidator"].isQuantityNotRequired])];
          }

          if (this.isSmoker == 'Y') {
            rules['yearsOfSmoking'] = ['', _angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].compose([// Validators.pattern("^[0-9]+$"),
            // Validators.min(0)
            _digit_quantitiy_validator__WEBPACK_IMPORTED_MODULE_18__["DigitQuantitiyValidator"].isQuantityNotRequired])];
            rules['stickPerDay'] = ['', _angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].compose([// Validators.pattern("^[0-9]+$"),
            // Validators.min(0)
            _digit_quantitiy_validator__WEBPACK_IMPORTED_MODULE_18__["DigitQuantitiyValidator"].isQuantityNotRequired])];
          }

          console.error('this.socialHistform rules', rules);
          return rules;
        }
      }, {
        key: "getPreghisFormRules",
        value: function getPreghisFormRules() {
          var rules = {// isMenstrualApplicable: ['', Validators.compose([
            //   Validators.required
            // ])],
          };

          if (this.isPregnantlApplicable == 'Y') {
            rules['noOfPregnancy'] = [0, _angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].pattern("^[0-9]+$"), _angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].min(0), _angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].required])];
            rules['noOfDelivery'] = [0, _angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].pattern("^[0-9]+$"), _angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].min(0), _angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].required])];
            rules['typeOfDeliver'] = ['', _angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].maxLength(2000)])];
            rules['noOfFullTermPregnancy'] = [0, _angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].pattern("^[0-9]+$"), _angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].min(0), _angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].required])];
            rules['noOfPrematurePregnancy'] = [0, _angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].pattern("^[0-9]+$"), _angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].min(0), _angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].required])];
            rules['noOfAbortion'] = [0, _angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].pattern("^[0-9]+$"), _angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].min(0), _angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].required])];
            rules['noOfLivingChildren'] = [0, _angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].pattern("^[0-9]+$"), _angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].min(0), _angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].required])];
            rules['inducedHypertension'] = ['', _angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].maxLength(2000)])];
            rules['accessToFamilyPlanning'] = ['', _angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].maxLength(2000)])];
            rules['pregnancyRemarks'] = ['', _angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_17__["Validators"].maxLength(2000)])];
          }

          console.error('this.menHistform rules', rules);
          return rules;
        }
      }, {
        key: "updateMenstrualHistoryRules",
        value: function updateMenstrualHistoryRules() {
          if (this.isMenstrualApplicable == 'N') {
            this.menHistform.removeControl('ageOfFirstMenstrual');
            this.menHistform.removeControl('durationOfMenstrualPeriod');
            this.menHistform.removeControl('intervalOfMenstrual');
            this.menHistform.removeControl('noOfPadsPerDay');
            this.menHistform.removeControl('ageOfFirstSexualIntercourse');
            this.menHistform.removeControl('birthControlMethodUsed');
            this.menHistform.removeControl('ageOfMenopause');
            this.menHistform.removeControl('menstrualRemarks');
          } else {
            var rules = this.getMenhisFormRules();
            this.menHistform.addControl('ageOfFirstMenstrual', new _angular_forms__WEBPACK_IMPORTED_MODULE_17__["FormControl"](rules.ageOfFirstMenstrual[0], rules.ageOfFirstMenstrual[1]));
            this.menHistform.addControl('durationOfMenstrualPeriod', new _angular_forms__WEBPACK_IMPORTED_MODULE_17__["FormControl"](rules.durationOfMenstrualPeriod[0], rules.durationOfMenstrualPeriod[1]));
            this.menHistform.addControl('intervalOfMenstrual', new _angular_forms__WEBPACK_IMPORTED_MODULE_17__["FormControl"](rules.intervalOfMenstrual[0], rules.intervalOfMenstrual[1]));
            this.menHistform.addControl('noOfPadsPerDay', new _angular_forms__WEBPACK_IMPORTED_MODULE_17__["FormControl"](rules.noOfPadsPerDay[0], rules.noOfPadsPerDay[1]));
            this.menHistform.addControl('ageOfFirstSexualIntercourse', new _angular_forms__WEBPACK_IMPORTED_MODULE_17__["FormControl"](rules.ageOfFirstSexualIntercourse[0], rules.ageOfFirstSexualIntercourse[1]));
            this.menHistform.addControl('birthControlMethodUsed', new _angular_forms__WEBPACK_IMPORTED_MODULE_17__["FormControl"](rules.birthControlMethodUsed[0], rules.birthControlMethodUsed[1]));
            this.menHistform.addControl('ageOfMenopause', new _angular_forms__WEBPACK_IMPORTED_MODULE_17__["FormControl"](rules.ageOfMenopause[0], rules.ageOfMenopause[1]));
            this.menHistform.addControl('menstrualRemarks', new _angular_forms__WEBPACK_IMPORTED_MODULE_17__["FormControl"](rules.menstrualRemarks[0], rules.menstrualRemarks[1]));
          }

          console.error('this.menHistform rules updated', this.menHistform);
        }
      }, {
        key: "updateSocialHistoryRules",
        value: function updateSocialHistoryRules() {
          var _this11 = this;

          new Promise(function (resolve, reject) {
            setTimeout(function () {
              var rules = _this11.getSocialhisFormRules();

              console.error('this.isDrinker', _this11.isDrinker);

              if (_this11.isDrinker == 'Y' || _this11.isDrinker == 'X') {
                _this11.socialHistform.addControl('noOfBottles', new _angular_forms__WEBPACK_IMPORTED_MODULE_17__["FormControl"](rules.noOfBottles[0], rules.noOfBottles[1]));
              } else {
                _this11.socialHistform.removeControl('noOfBottles');
              }

              console.error('this.isSmoker', _this11.isSmoker);

              if (_this11.isSmoker == 'Y') {
                _this11.socialHistform.addControl('yearsOfSmoking', new _angular_forms__WEBPACK_IMPORTED_MODULE_17__["FormControl"](rules.yearsOfSmoking[0], rules.yearsOfSmoking[1]));

                _this11.socialHistform.addControl('stickPerDay', new _angular_forms__WEBPACK_IMPORTED_MODULE_17__["FormControl"](rules.stickPerDay[0], rules.stickPerDay[1]));

                _this11.socialHistform.get('yearsOfSmoking').valueChanges.subscribe(function (ok) {
                  _this11.onYearsOfSmokingChange();
                });

                _this11.socialHistform.get('stickPerDay').valueChanges.subscribe(function (ok) {
                  _this11.onStickPerDay();
                });
              } else {
                _this11.socialHistform.removeControl('yearsOfSmoking');

                _this11.socialHistform.removeControl('stickPerDay');
              }

              console.error('this.socialHistform rules updated', _this11.socialHistform);
            }, 2000);
          });
        }
      }, {
        key: "updatePregHistoryRules",
        value: function updatePregHistoryRules() {
          if (this.isPregnantlApplicable == 'N') {
            this.pregHistform.removeControl('noOfPregnancy');
            this.pregHistform.removeControl('noOfDelivery');
            this.pregHistform.removeControl('typeOfDeliver');
            this.pregHistform.removeControl('noOfFullTermPregnancy');
            this.pregHistform.removeControl('noOfPrematurePregnancy');
            this.pregHistform.removeControl('noOfAbortion');
            this.pregHistform.removeControl('noOfLivingChildren');
            this.pregHistform.removeControl('inducedHypertension');
            this.pregHistform.removeControl('accessToFamilyPlanning');
            this.pregHistform.removeControl('pregnancyRemarks');
          } else {
            var rules = this.getPreghisFormRules();
            this.pregHistform.addControl('noOfPregnancy', new _angular_forms__WEBPACK_IMPORTED_MODULE_17__["FormControl"](rules.noOfPregnancy[0], rules.noOfPregnancy[1]));
            this.pregHistform.addControl('noOfDelivery', new _angular_forms__WEBPACK_IMPORTED_MODULE_17__["FormControl"](rules.noOfDelivery[0], rules.noOfDelivery[1]));
            this.pregHistform.addControl('typeOfDeliver', new _angular_forms__WEBPACK_IMPORTED_MODULE_17__["FormControl"](rules.typeOfDeliver[0], rules.typeOfDeliver[1]));
            this.pregHistform.addControl('noOfFullTermPregnancy', new _angular_forms__WEBPACK_IMPORTED_MODULE_17__["FormControl"](rules.noOfFullTermPregnancy[0], rules.noOfFullTermPregnancy[1]));
            this.pregHistform.addControl('noOfPrematurePregnancy', new _angular_forms__WEBPACK_IMPORTED_MODULE_17__["FormControl"](rules.noOfPrematurePregnancy[0], rules.noOfPrematurePregnancy[1]));
            this.pregHistform.addControl('noOfAbortion', new _angular_forms__WEBPACK_IMPORTED_MODULE_17__["FormControl"](rules.noOfAbortion[0], rules.noOfAbortion[1]));
            this.pregHistform.addControl('noOfLivingChildren', new _angular_forms__WEBPACK_IMPORTED_MODULE_17__["FormControl"](rules.noOfLivingChildren[0], rules.noOfLivingChildren[1]));
            this.pregHistform.addControl('inducedHypertension', new _angular_forms__WEBPACK_IMPORTED_MODULE_17__["FormControl"](rules.inducedHypertension[0], rules.inducedHypertension[1]));
            this.pregHistform.addControl('accessToFamilyPlanning', new _angular_forms__WEBPACK_IMPORTED_MODULE_17__["FormControl"](rules.accessToFamilyPlanning[0], rules.accessToFamilyPlanning[1]));
            this.pregHistform.addControl('pregnancyRemarks', new _angular_forms__WEBPACK_IMPORTED_MODULE_17__["FormControl"](rules.pregnancyRemarks[0], rules.pregnancyRemarks[1]));
          }

          console.error('this.pregHistform rules updated', this.pregHistform);
        }
      }, {
        key: "ngOnInit",
        value: function ngOnInit() {
          this.initUserInterfaceByRole();
          this.menHistform = this.formBuilder.group(this.getMenhisFormRules());
          this.pregHistform = this.formBuilder.group(this.getPreghisFormRules());
          this.socialHistform = this.formBuilder.group(this.getSocialhisFormRules());
          this.updateMenstrualHistoryRules();
          console.error('on ngOnInit');
          this.menuController.swipeGesture(true, 'mainMenu');
          this.menuController.swipeGesture(false, 'accountMenu');
          this.onUpdateTab();
        }
      }, {
        key: "ionViewWillEnter",
        value: function ionViewWillEnter() {
          console.log('ionViewWillEnter');
          var tempSelectedEncounterNo = this.patientService.getSelectedEncounterNo();
          this.selectedPatient = this.patientService.getSelectedPatientBriefInformation();

          if (this.selectedEncounterNo !== tempSelectedEncounterNo) {
            console.log('selected patient changed');
            this.selectedEncounterNo = tempSelectedEncounterNo; // init load flag

            this.isPresentIllnessLoaded = false;
            this.isPastMedicalHistoryLoaded = false;
            this.isSurgicalHistoryLoaded = false;
            this.isFamilyHistoryLoaded = false;
            this.isSocialHistoryLoaded = false;
            this.isGynecologicalHistoryLoaded = false;
            this.isImmunizationRecordLoaded = false;
            this.initUserInterfaceByRole(); // if tab doest not change after initUserInterfaceByRoleAndSelectedPatient()

            if (this.currentTab == this.selectedTab) {
              this.onUpdateTab();
            }
          }

          window.addEventListener('native.keyboardshow', this.keyboardShowHandler);
          window.addEventListener('native.keyboardhide', this.keyboardHideHandler);
        }
      }, {
        key: "ionViewWillLeave",
        value: function ionViewWillLeave() {
          console.log('ionViewWillLeave');
          window.removeEventListener('native.keyboardshow', this.keyboardShowHandler);
          window.removeEventListener('native.keyboardhide', this.keyboardHideHandler);
          this.removeIonAppStyles();
          this.currentTab = this.selectedTab;
        }
      }, {
        key: "focusSegment",
        value: function focusSegment(segmentId) {
          document.getElementById(segmentId).scrollIntoView({
            behavior: 'smooth',
            block: 'start',
            inline: 'start'
          });
        }
      }, {
        key: "onSegmentChange",
        value: function onSegmentChange(event) {
          return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0,
          /*#__PURE__*/
          regeneratorRuntime.mark(function _callee8() {
            var segment;
            return regeneratorRuntime.wrap(function _callee8$(_context8) {
              while (1) {
                switch (_context8.prev = _context8.next) {
                  case 0:
                    console.log(event);
                    console.log(this.selectedTab);
                    segment = this.tabs.indexOf(this.selectedTab);
                    this.focusSegment(event.srcElement.children[segment].id);
                    _context8.next = 6;
                    return this.slider.slideTo(segment);

                  case 6:
                  case "end":
                    return _context8.stop();
                }
              }
            }, _callee8, this);
          }));
        }
      }, {
        key: "onSlideChange",
        value: function onSlideChange(event) {
          return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0,
          /*#__PURE__*/
          regeneratorRuntime.mark(function _callee9() {
            var _this12 = this;

            return regeneratorRuntime.wrap(function _callee9$(_context9) {
              while (1) {
                switch (_context9.prev = _context9.next) {
                  case 0:
                    console.log(event);
                    console.log(this.selectedTab);
                    _context9.next = 4;
                    return this.slider.getActiveIndex().then(function (index) {
                      _this12.selectedTab = _this12.tabs[index];

                      _this12.onUpdateTab();
                    });

                  case 4:
                  case "end":
                    return _context9.stop();
                }
              }
            }, _callee9, this);
          }));
        }
      }, {
        key: "onUpdateTab",
        value: function onUpdateTab() {
          var _this13 = this;

          if (this.selectedTab == 'present-illness') {
            this.pageTitle = 'History of Present Illness';
            this.menuController.swipeGesture(true, 'mainMenu');
            this.menuController.swipeGesture(false, 'accountMenu');

            if (!this.isPresentIllnessLoaded) {
              this.getPresentIllness().then(function (_) {
                _this13.isPresentIllnessLoaded = true;
              }).catch(function (_) {// do nothing
              });
            }
          } else if (this.selectedTab == 'past-history') {
            this.pageTitle = 'Past Medical History';
            this.menuController.swipeGesture(false, 'mainMenu');
            this.menuController.swipeGesture(false, 'accountMenu');

            if (!this.isPastMedicalHistoryLoaded) {
              this.getPastMedicalHistories().then(function (_) {
                _this13.isPastMedicalHistoryLoaded = true;
              }).catch(function (_) {// do nothing
              });
            }
          } else if (this.selectedTab == 'surgical-history') {
            this.pageTitle = 'Surgical History';
            this.menuController.swipeGesture(false, 'mainMenu');
            this.menuController.swipeGesture(false, 'accountMenu');

            if (!this.isSurgicalHistoryLoaded) {
              this.getSurgicalHistories().then(function (_) {
                _this13.isSurgicalHistoryLoaded = true;
              }).catch(function (_) {// do nothing
              });
            }
          } else if (this.selectedTab == 'family-history') {
            this.pageTitle = 'Family History';
            this.menuController.swipeGesture(false, 'mainMenu');
            this.menuController.swipeGesture(false, 'accountMenu');

            if (!this.isFamilyHistoryLoaded) {
              this.getFamilyMedicalHistories().then(function (_) {
                _this13.isFamilyHistoryLoaded = true;
              }).catch(function (_) {// do nothing
              });
            }
          } else if (this.selectedTab == 'social-history') {
            this.pageTitle = 'Social History';
            this.menuController.swipeGesture(false, 'mainMenu');
            this.menuController.swipeGesture(false, 'accountMenu');

            if (!this.isSocialHistoryLoaded) {
              this.getSocialMedicalHistory().then(function (_) {
                _this13.isSocialHistoryLoaded = true;
              }).catch(function (_) {// do nothing
              });
            }
          } else if (this.selectedTab == 'gynecological-history') {
            this.pageTitle = 'Gynecological/ Obstetric History';
            this.menuController.swipeGesture(false, 'mainMenu');
            this.menuController.swipeGesture(false, 'accountMenu');

            if (!this.isGynecologicalHistoryLoaded) {
              this.getGynecologicalHistory().then(function (_) {
                _this13.isGynecologicalHistoryLoaded = true;
              }).catch(function (_) {// do nothing
              });
            }
          } else if (this.selectedTab == 'immunization-record') {
            this.pageTitle = 'Immunization Record';
            this.menuController.swipeGesture(false, 'mainMenu');
            this.menuController.swipeGesture(true, 'accountMenu');

            if (!this.isImmunizationRecordLoaded) {
              this.getImmunizationRecord().then(function (_) {
                _this13.isImmunizationRecordLoaded = true;
              }).catch(function (_) {// do nothing
              });
            }
          }
        }
      }, {
        key: "onSavePresentDisease",
        value: function onSavePresentDisease(presentDisease) {
          this.openPromptModal(this.SAVE_PRESENT_DISEASE, {
            presentDisease: presentDisease
          }, 'Present Illness', 'Would you like to save your changes?');
        }
      }, {
        key: "onSavePresentDiseaseFunction",
        value: function onSavePresentDiseaseFunction(presentDisease) {
          var _this14 = this;

          console.log(presentDisease.value);
          var data = {
            id: this.selectedEncounterNo,
            encounter_no: this.selectedEncounterNo,
            history: presentDisease.value.name,
            spin: this.selectedPatient.spin0.pid,
            modified_by: this.authentication.user.person.pid
          };
          console.log(data);
          this.loadingService.present();
          this.pastMedicalHistoryApiService.savePresentIllness(data).subscribe(function (result) {
            console.log(result);

            _this14.loadingService.dismiss().then(function (_) {
              if (result && 200 == result.code) {
                _this14.alertServ.openAlertModal('success', 'Success', result.message);

                _this14.presentIllnessModified.modified_by = result.data.modified_by;
                _this14.presentIllnessModified.modified_dt = result.data.updated_at;
                _this14.haspresentIllness = true;
              } else {
                _this14.alertServ.openAlertModal('fail', 'Failed', result.message, 'Ok');
              }
            });
          }, function (err) {
            console.log('err ', err);

            _this14.loadingService.dismiss().then(function (_) {
              var message = _this14.stringUtilsService.parseErrorMessage(err);

              _this14.alertServ.openAlertModal('fail', 'Failed', message, 'Ok');
            });
          });
        }
      }, {
        key: "onDiseaseChange",
        value: function onDiseaseChange(event) {
          console.log(event);
        }
      }, {
        key: "onAddDisease",
        value: function onAddDisease(disease) {
          this.openPromptModal(this.ADD_PAST_MEDICAL_HISTORY, {
            disease: disease
          }, 'Past Medical History', 'Would you like to save your changes?');
        }
      }, {
        key: "onAddDiseaseFunction",
        value: function onAddDiseaseFunction(disease) {
          var _this15 = this;

          console.log(disease);
          var specificDescription = this.pastMed_DeseacDescription;
          var i = this.pastIllnessDefaultIndex;
          var d = this.pastIllnesses[i];
          var newDisease = {
            encounter_no: this.selectedEncounterNo,
            specific_disease_description: specificDescription,
            disease_id: d.id,
            phil_disease: {
              mdisease_description: d.mdisease_description
            },
            modified_by: this.authentication.user.person.pid
          };
          this.loadingService.present();
          this.pastMedicalHistoryApiService.addPastMedicalHistory(newDisease).subscribe(function (result) {
            console.log(result);

            _this15.loadingService.dismiss().then(function (_) {
              if (result && 200 == result.code) {
                var med = new _models_past_medical_history__WEBPACK_IMPORTED_MODULE_10__["PastMedicalHistory"](newDisease);
                med.id = result.data.data.id;

                _this15.medicalHistories.push(med);

                _this15.pastIllnessDefaultIndex = 0;
                _this15.pastMedicalHistoryModified.modified_by = result.data.modified_by;
                _this15.pastMedicalHistoryModified.modified_dt = result.data.updated_at;
                _this15.hasPastMedicalHistory = true;

                _this15.alertServ.openAlertModal('success', 'Success', result.message);
              } else {
                console.log('failed');

                _this15.alertServ.openAlertModal('fail', 'Failed', result.message, 'Ok');
              }
            });
          }, function (err) {
            console.log('err ', err);

            _this15.loadingService.dismiss().then(function (_) {
              var message = _this15.stringUtilsService.parseErrorMessage(err);

              _this15.alertServ.openAlertModal('fail', 'Failed', message, 'Ok');
            });
          });
        }
      }, {
        key: "onRemoveDisease",
        value: function onRemoveDisease(disease) {
          // tslint:disable-next-line: max-line-length
          this.openPromptModal(this.REMOVE_PAST_MEDICAL_HISTORY, {
            disease: disease
          }, 'Past Medical History', 'Are you sure you want to delete this item?', 'Delete');
        }
      }, {
        key: "onRemoveDiseaseFunction",
        value: function onRemoveDiseaseFunction(disease) {
          var _this16 = this;

          console.log(disease);
          this.loadingService.present(); // tslint:disable-next-line: max-line-length

          this.pastMedicalHistoryApiService.deletePastMedicalHistory(this.selectedEncounterNo, disease.id).subscribe(function (result) {
            console.log(result);

            _this16.loadingService.dismiss().then(function (_) {
              if (result && 200 == result.code) {
                console.log('onRemoveDisease success');

                _this16.medicalHistories.splice(_this16.medicalHistories.indexOf(disease), 1);

                _this16.alertServ.openAlertModal('success', 'Success', result.message);
              } else {
                console.log('onRemoveDisease failed');

                _this16.alertServ.openAlertModal('fail', 'Failed', result.message, 'Ok');
              }
            });
          }, function (err) {
            console.log('err ', err);

            _this16.loadingService.dismiss().then(function (_) {
              var message = _this16.stringUtilsService.parseErrorMessage(err);

              _this16.alertServ.openAlertModal('fail', 'Failed', message, 'Ok');
            });
          });
        }
      }, {
        key: "onAddSurgery",
        value: function onAddSurgery(surgery) {
          this.openPromptModal(this.ADD_SURGICAL_HISTORY, {
            surgery: surgery
          }, 'Surgical History', 'Would you like to save your changes?');
        }
      }, {
        key: "onAddSurgeryFunction",
        value: function onAddSurgeryFunction(surgery) {
          var _this17 = this;

          console.log(surgery.value);
          var dateObject = new Date(surgery.value.date);
          var date_of_operation = moment__WEBPACK_IMPORTED_MODULE_15__(dateObject).format('YYYY-MM-DD');
          console.log('dateObject: ', date_of_operation);
          var newSurgery = {
            encounter_no: this.selectedEncounterNo,
            description: surgery.value.description,
            date_of_operation: date_of_operation,
            remarks: surgery.value.remarks,
            modified_by: this.authentication.user.person.pid
          };
          this.loadingService.present();
          this.pastMedicalHistoryApiService.addSurgicalHistory(newSurgery).subscribe(function (result) {
            console.log(result);

            _this17.loadingService.dismiss().then(function (_) {
              if (result && 200 == result.code) {
                console.log(newSurgery);
                var surg = new _models_surgical_history__WEBPACK_IMPORTED_MODULE_11__["SurgicalHistory"](newSurgery);
                surg.id = result.data.data.id;

                _this17.surgicalHistories.push(surg);

                surgery.reset();
                _this17.surgicalHistoryModified.modified_by = result.data.modified_by;
                _this17.surgicalHistoryModified.modified_dt = result.data.updated_at;
                _this17.hasSurgicalHistory = false;

                _this17.alertServ.openAlertModal('success', 'Success', result.message);
              } else {
                console.log('failed');

                _this17.alertServ.openAlertModal('fail', 'Failed', result.message, 'Ok');
              }
            });
          }, function (err) {
            console.log('err ', err);

            _this17.loadingService.dismiss().then(function (_) {
              var message = _this17.stringUtilsService.parseErrorMessage(err);

              _this17.alertServ.openAlertModal('fail', 'Failed', message, 'Ok');
            });
          });
        }
      }, {
        key: "onRemoveSurgery",
        value: function onRemoveSurgery(surgery) {
          // tslint:disable-next-line: max-line-length
          this.openPromptModal(this.REMOVE_SURGICAL_HISTORY, {
            surgery: surgery
          }, 'Surgical History', 'Are you sure you want to delete this item?', 'Delete');
        }
      }, {
        key: "onRemoveSurgeryFunction",
        value: function onRemoveSurgeryFunction(surgery) {
          var _this18 = this;

          console.log(surgery);
          this.loadingService.present();
          this.pastMedicalHistoryApiService.deleteSurgicalHistory(this.selectedEncounterNo, surgery.id).subscribe(function (result) {
            console.log(result);

            _this18.loadingService.dismiss().then(function (_) {
              if (result && 200 == result.code) {
                _this18.surgicalHistories.splice(_this18.surgicalHistories.indexOf(surgery), 1);

                _this18.alertServ.openAlertModal('success', 'Success', result.message);
              } else {
                console.log('failed');

                _this18.alertServ.openAlertModal('fail', 'Failed', result.message, 'Ok');
              }
            });
          }, function (err) {
            console.log('err ', err);

            _this18.loadingService.dismiss().then(function (_) {
              var message = _this18.stringUtilsService.parseErrorMessage(err);

              _this18.alertServ.openAlertModal('fail', 'Failed', message, 'Ok');
            });
          });
        }
      }, {
        key: "onFamilyDiseaseChange",
        value: function onFamilyDiseaseChange(event) {
          console.log(event);
        }
      }, {
        key: "onAddFamilyDisease",
        value: function onAddFamilyDisease(disease) {
          this.openPromptModal(this.ADD_FAMILY_MEDICAL_HISTORY, {
            disease: disease
          }, 'Family Medical History', 'Would you like to save your changes?');
        }
      }, {
        key: "onAddFamilyDiseaseFunction",
        value: function onAddFamilyDiseaseFunction(disease) {
          var _this19 = this;

          console.log(disease);
          var specificDescription = this.familyIllnessDefaultDescription;
          var i = this.familyIllnessDefaultIndex;
          var d = this.familyIllnesses[i];
          var newDisease = {
            encounter_no: this.selectedEncounterNo,
            specific_disease_description: specificDescription,
            disease_id: d.id,
            phil_disease: {
              mdisease_description: d.mdisease_description
            },
            modified_by: this.authentication.user.person.pid
          };
          console.log(newDisease);
          this.loadingService.present();
          this.pastMedicalHistoryApiService.addFamilyHistory(newDisease).subscribe(function (result) {
            console.log(result);

            _this19.loadingService.dismiss().then(function (_) {
              if (result && 200 == result.code) {
                var fam = new _models_family_medical_history__WEBPACK_IMPORTED_MODULE_12__["FamilyMedicalHistory"](newDisease);
                fam.id = result.data.data.id;

                _this19.familyMedicalHistories.push(fam);

                _this19.familyIllnessDefaultIndex = 0;
                _this19.familyHistoryModified.modified_by = result.data.modified_by;
                _this19.familyHistoryModified.modified_dt = result.data.updated_at;
                _this19.hasFamilyHistory = true;

                _this19.alertServ.openAlertModal('success', 'Success', result.message);
              } else {
                console.log('failed');

                _this19.alertServ.openAlertModal('fail', 'Failed', result.message, 'Ok');
              }
            });
          }, function (err) {
            console.log('err ', err);

            _this19.loadingService.dismiss().then(function (_) {
              var message = _this19.stringUtilsService.parseErrorMessage(err);

              _this19.alertServ.openAlertModal('fail', 'Failed', message, 'Ok');
            });
          });
        }
      }, {
        key: "onRemoveFamilyDisease",
        value: function onRemoveFamilyDisease(disease) {
          // tslint:disable-next-line: max-line-length
          this.openPromptModal(this.REMOVE_FAMILY_MEDICAL_HISTORY, {
            disease: disease
          }, 'Family Medical History', 'Are you sure you want to delete this item?', 'Delete');
        }
      }, {
        key: "onRemoveFamilyDiseaseFunction",
        value: function onRemoveFamilyDiseaseFunction(disease) {
          var _this20 = this;

          console.log(disease);
          this.loadingService.present(); // tslint:disable-next-line: max-line-length

          this.pastMedicalHistoryApiService.deleteFamilyHistory(this.selectedEncounterNo, disease.id).subscribe(function (result) {
            console.log(result);

            _this20.loadingService.dismiss().then(function (_) {
              if (result && 200 == result.code) {
                _this20.familyMedicalHistories.splice(_this20.familyMedicalHistories.indexOf(disease), 1);

                _this20.alertServ.openAlertModal('success', 'Success', result.message);
              } else {
                console.log('failed');

                _this20.alertServ.openAlertModal('fail', 'Failed', result.message, 'Ok');
              }
            });
          }, function (err) {
            console.log('err ', err);

            _this20.loadingService.dismiss().then(function (_) {
              var message = _this20.stringUtilsService.parseErrorMessage(err);

              _this20.alertServ.openAlertModal('fail', 'Failed', message, 'Ok');
            });
          });
        }
      }, {
        key: "onIsSmokerChange",
        value: function onIsSmokerChange() {
          console.error('onIsSmokerChange()');
          this.updateSocialHistoryRules();
        }
      }, {
        key: "onIsDrinkerChange",
        value: function onIsDrinkerChange() {
          console.error('onIsDrinkerChange()');
          this.updateSocialHistoryRules();
        }
      }, {
        key: "onIsDrugUserChange",
        value: function onIsDrugUserChange() {}
      }, {
        key: "onYearsOfSmokingChange",
        value: function onYearsOfSmokingChange() {
          this.stickPerYear = this.computeStringPerYear(this.socialHistform.get('yearsOfSmoking').value, this.socialHistform.get('stickPerDay').value);
        }
      }, {
        key: "onStickPerDay",
        value: function onStickPerDay() {
          this.stickPerYear = this.computeStringPerYear(this.socialHistform.get('yearsOfSmoking').value, this.socialHistform.get('stickPerDay').value);
        }
      }, {
        key: "computeStringPerYear",
        value: function computeStringPerYear(yearOfSmoking, stickPerDay) {
          console.log(yearOfSmoking, stickPerDay);
          return stickPerDay / 20 * yearOfSmoking;
        }
      }, {
        key: "onUpdateSocialHistory",
        value: function onUpdateSocialHistory() {
          // tslint:disable-next-line: max-line-length
          this.openPromptModal(this.SAVE_SOCIAL_MEDICAL_HISTORY, null, 'Social Medical History', 'Would you like to save your changes?');
        }
      }, {
        key: "onUpdateSocialHistoryFunction",
        value: function onUpdateSocialHistoryFunction() {
          var _this21 = this;

          var updateSocialHistory = {
            encounter_no: this.selectedEncounterNo,
            spin: this.selectedPatient.spin0.pid,
            is_smoke: this.isSmoker,
            years_smoking: 'Y' == this.isSmoker ? Number.isInteger(this.socialHistform.get('yearsOfSmoking').value) ? this.socialHistform.get('yearsOfSmoking').value : 0 : 0,
            stick_per_day: 'Y' == this.isSmoker ? Number.isInteger(this.socialHistform.get('stickPerDay').value) ? this.socialHistform.get('stickPerDay').value : 0 : '',
            stick_per_year: 'Y' == this.isSmoker ? Number.isInteger(this.stickPerYear) ? this.stickPerYear : 0 : 0,
            is_alcohol: this.isDrinker,
            no_bottles: this.isDrinker == 'Y' || this.isDrinker == 'X' ? this.socialHistform.get('noOfBottles').value : '',
            is_drug: this.isDrugUser,
            // remarks: s.remarks,
            modified_by: this.authentication.user.person.pid
          };
          this.loadingService.present();
          this.pastMedicalHistoryApiService.saveSocialHistory(updateSocialHistory).subscribe(function (result) {
            console.log(result);

            _this21.loadingService.dismiss().then(function (_) {
              if (result && 200 == result.code) {
                _this21.socialHistoryModified.modified_by = result.data.modified_by;
                _this21.socialHistoryModified.modified_dt = result.data.updated_at;
                _this21.hasSocialHistory = false;

                _this21.alertServ.openAlertModal('success', 'Success', result.message);
              } else {
                console.log('failed');

                _this21.alertServ.openAlertModal('fail', 'Failed', result.message, 'Ok');
              }
            });
          }, function (err) {
            console.log('err ', err);

            _this21.loadingService.dismiss().then(function (_) {
              var message = _this21.stringUtilsService.parseErrorMessage(err);

              _this21.alertServ.openAlertModal('fail', 'Failed', message, 'Ok');
            });
          });
        }
      }, {
        key: "onGynecologicalTabChange",
        value: function onGynecologicalTabChange(event) {}
      }, {
        key: "onUpdateMenstrualHistory",
        value: function onUpdateMenstrualHistory() {
          this.openPromptModal(this.SAVE_MENSTRUAL_HISTORY, null, 'Menstrual History', 'Would you like to save your changes?');
        }
      }, {
        key: "onUpdateMenstrualHistoryFunction",
        value: function onUpdateMenstrualHistoryFunction() {
          var _this22 = this;

          console.error('onUpdateMenstrualHistoryFunction()');
          var updateMenstrualHistory = {
            encounter_no: this.selectedEncounterNo,
            spin: this.selectedPatient.spin0.pid,
            is_applicable_menstrual: this.isMenstrualApplicable,
            age_first_menstrual: this.isMenstrualApplicable == 'Y' ? this.menHistform.get('ageOfFirstMenstrual').value : 0,
            last_period_menstrual: this.isMenstrualApplicable == 'Y' ? this.dateOfLastMenstrual : '',
            no_days_menstrual_period: this.isMenstrualApplicable == 'Y' ? this.menHistform.get('durationOfMenstrualPeriod').value : 0,
            interval_menstrual_period: this.isMenstrualApplicable == 'Y' ? this.menHistform.get('intervalOfMenstrual').value : 0,
            no_pads: this.isMenstrualApplicable == 'Y' ? this.menHistform.get('noOfPadsPerDay').value : 0,
            age_sex_intercourse: this.isMenstrualApplicable == 'Y' ? this.menHistform.get('ageOfFirstSexualIntercourse').value : 0,
            birth_control_used: this.isMenstrualApplicable == 'Y' ? this.menHistform.get('birthControlMethodUsed').value ? this.menHistform.get('birthControlMethodUsed').value : '' : '',
            is_menopause: this.isMenopause,
            age_menopause: this.isMenstrualApplicable == 'Y' ? this.menHistform.get('ageOfMenopause').value : 0,
            remarks: this.isMenstrualApplicable == 'Y' ? this.menHistform.get('menstrualRemarks').value : '',
            modified_by: this.authentication.user.person.pid
          };
          this.loadingService.present();
          this.pastMedicalHistoryApiService.saveMenstrualHistory(updateMenstrualHistory).subscribe(function (result) {
            console.log(result);

            _this22.loadingService.dismiss().then(function (_) {
              if (result && 200 == result.code) {
                _this22.menstrualHistoryModified.modified_by = result.data.modified_by;
                _this22.menstrualHistoryModified.modified_dt = result.data.updated_at;
                _this22.hasMenstrualHistory = true;

                _this22.alertServ.openAlertModal('success', 'Success', result.message);
              } else {
                console.log('failed');

                _this22.alertServ.openAlertModal('fail', 'Failed', result.message, 'Ok');
              }
            });
          }, function (err) {
            console.log('err ', err);

            _this22.loadingService.dismiss().then(function (_) {
              var message = _this22.stringUtilsService.parseErrorMessage(err);

              _this22.alertServ.openAlertModal('fail', 'Failed', message, 'Ok');
            });
          });
        }
      }, {
        key: "onUpdatePregnantHistory",
        value: function onUpdatePregnantHistory() {
          this.openPromptModal(this.SAVE_PREGNANCY_HISTORY, null, 'Pregnancy History', 'Would you like to save your changes?');
        }
      }, {
        key: "onUpdatePregnantHistoryFunction",
        value: function onUpdatePregnantHistoryFunction() {
          var _this23 = this;

          var updatePregnantHistory = {
            encounter_no: this.selectedEncounterNo,
            spin: this.selectedPatient.spin0.pid,
            is_applicable_pregnant: this.isPregnantlApplicable,
            date_gravidity: this.isPregnantlApplicable == 'Y' ? this.pregHistform.get('noOfPregnancy').value : 0,
            date_parity: this.isPregnantlApplicable == 'Y' ? this.pregHistform.get('noOfDelivery').value : 0,
            type_delivery: this.isPregnantlApplicable == 'Y' ? this.pregHistform.get('typeOfDeliver').value : '',
            no_full_term_preg: this.isPregnantlApplicable == 'Y' ? this.pregHistform.get('noOfFullTermPregnancy').value : 0,
            no_premature: this.isPregnantlApplicable == 'Y' ? this.pregHistform.get('noOfPrematurePregnancy').value : 0,
            no_abortion: this.isPregnantlApplicable == 'Y' ? this.pregHistform.get('noOfAbortion').value : 0,
            no_living_children: this.isPregnantlApplicable == 'Y' ? this.pregHistform.get('noOfLivingChildren').value : 0,
            induced_hyper: this.isPregnantlApplicable == 'Y' ? this.pregHistform.get('inducedHypertension').value : '',
            family_planning: this.isPregnantlApplicable == 'Y' ? this.pregHistform.get('accessToFamilyPlanning').value : '',
            remarks: this.isPregnantlApplicable == 'Y' ? this.pregHistform.get('pregnancyRemarks').value : '',
            modified_by: this.authentication.user.person.pid
          };
          this.loadingService.present();
          this.pastMedicalHistoryApiService.savePregnantHistory(updatePregnantHistory).subscribe(function (result) {
            console.log(result);

            _this23.loadingService.dismiss().then(function (_) {
              if (result && 200 == result.code) {
                _this23.pregnantHistoryModified.modified_by = result.data.modified_by;
                _this23.pregnantHistoryModified.modified_dt = result.data.updated_at;
                _this23.hasPregnantHistory = true;

                _this23.alertServ.openAlertModal('success', 'Success', result.message);
              } else {
                console.log('failed');

                _this23.alertServ.openAlertModal('fail', 'Failed', result.message, 'Ok');
              }
            });
          }, function (err) {
            console.log('err ', err);

            _this23.loadingService.dismiss().then(function (_) {
              var message = _this23.stringUtilsService.parseErrorMessage(err);

              _this23.alertServ.openAlertModal('fail', 'Failed', message, 'Ok');
            });
          });
        }
      }, {
        key: "onUpdateImmunizationRecord",
        value: function onUpdateImmunizationRecord(immunization) {
          this.openPromptModal(this.SAVE_IMMUNIZATION_RECORD, {
            immunization: immunization
          }, 'Immunization Record', 'Would you like to save your changes?');
        }
      }, {
        key: "onUpdateImmunizationRecordFunction",
        value: function onUpdateImmunizationRecordFunction(immunization) {
          var _this24 = this;

          console.log(immunization.value);
          var i = immunization.value;
          var childImmCode = this.childImmunizationCodes[i.child_immunization_index];
          var adultImmCode = this.adultImmunizationCodes[i.adult_immunization_index];
          var ederlyImmCode = this.elderlyImmunizationCodes[i.adult_immunization_index];
          var updateImmunizationRecord = {
            id: i.id,
            encounter_no: this.selectedEncounterNo,
            spin: this.selectedPatient.spin0.pid,
            child_id: childImmCode.id,
            young_id: adultImmCode.id,
            preg_id: 0,
            elder_id: ederlyImmCode.id,
            other_code: i.other_immunization ? i.other_immunization : '',
            remarks: i.remarks ? i.remarks : '',
            modified_by: this.authentication.user.person.pid
          };
          console.log('updateImmunizationRecord ', updateImmunizationRecord);
          this.loadingService.present();
          this.pastMedicalHistoryApiService.saveImmunizationRecord(updateImmunizationRecord).subscribe(function (result) {
            console.log(result);

            _this24.loadingService.dismiss().then(function (_) {
              if (result && 200 == result.code) {
                _this24.immunizationRecordModified.modified_by = result.data.modified_by;
                _this24.immunizationRecordModified.modified_dt = result.data.updated_at;
                _this24.hasImmunization = true;

                _this24.alertServ.openAlertModal('success', 'Success', result.message);
              } else {
                console.log('failed');

                _this24.alertServ.openAlertModal('fail', 'Failed', result.message, 'Ok');
              }
            });
          }, function (err) {
            console.log('err ', err);

            _this24.loadingService.dismiss().then(function (_) {
              var message = _this24.stringUtilsService.parseErrorMessage(err);

              _this24.alertServ.openAlertModal('fail', 'Failed', message, 'Ok');
            });
          });
        }
      }, {
        key: "doRefreshPastMedicalHistory",
        value: function doRefreshPastMedicalHistory(event) {
          var _this25 = this;

          if (this.selectedTab == 'present-illness') {
            this.getPresentIllness().then(function (_) {
              _this25.isPresentIllnessLoaded = true;
              event.target.complete();
            }).catch(function (_) {
              event.target.complete();
            });
          } else if (this.selectedTab == 'past-history') {
            this.getPastMedicalHistories().then(function (_) {
              _this25.isPastMedicalHistoryLoaded = true;
              event.target.complete();
            }).catch(function (err) {
              event.target.complete();
            });
          } else if (this.selectedTab == 'surgical-history') {
            this.getSurgicalHistories().then(function (_) {
              _this25.isSurgicalHistoryLoaded = true;
              event.target.complete();
            }).catch(function (err) {
              event.target.complete();
            });
          } else if (this.selectedTab == 'family-history') {
            this.getFamilyMedicalHistories().then(function (_) {
              _this25.isFamilyHistoryLoaded = true;
              event.target.complete();
            }).catch(function (_) {
              event.target.complete();
            });
          } else if (this.selectedTab == 'social-history') {
            this.getSocialMedicalHistory().then(function (_) {
              _this25.isSocialHistoryLoaded = true;
              event.target.complete();
            }).catch(function (_) {
              event.target.complete();
            });
          } else if (this.selectedTab == 'gynecological-history') {
            this.getGynecologicalHistory().then(function (_) {
              _this25.isGynecologicalHistoryLoaded = true;
              event.target.complete();
            }).catch(function (_) {
              event.target.complete();
            });
          } else if (this.selectedTab == 'immunization-record') {
            this.getImmunizationRecord().then(function (_) {
              _this25.isImmunizationRecordLoaded = true;
              event.target.complete();
            }).catch(function (err) {
              event.target.complete();
            });
          }
        }
      }, {
        key: "openPromptModal",
        value: function openPromptModal(option, data, title, message) {
          var ok = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'Save';
          var cancel = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'Cancel';
          return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0,
          /*#__PURE__*/
          regeneratorRuntime.mark(function _callee10() {
            var _this26 = this;

            return regeneratorRuntime.wrap(function _callee10$(_context10) {
              while (1) {
                switch (_context10.prev = _context10.next) {
                  case 0:
                    this.alertServ.openPromptModal(title, message, ok, function (result) {
                      if (result !== null) {
                        console.log('result.data: ', result.data);

                        if (result.data && result.data.button == 'Save') {
                          if (option == _this26.SAVE_PRESENT_DISEASE) {
                            _this26.onSavePresentDiseaseFunction(data.presentDisease);
                          } else if (option == _this26.ADD_PAST_MEDICAL_HISTORY) {
                            _this26.onAddDiseaseFunction(data.disease);
                          } else if (option == _this26.ADD_SURGICAL_HISTORY) {
                            _this26.onAddSurgeryFunction(data.surgery);
                          } else if (option == _this26.ADD_FAMILY_MEDICAL_HISTORY) {
                            _this26.onAddFamilyDiseaseFunction(data.disease);
                          } else if (option == _this26.SAVE_SOCIAL_MEDICAL_HISTORY) {
                            _this26.onUpdateSocialHistoryFunction();
                          } else if (option == _this26.SAVE_MENSTRUAL_HISTORY) {
                            _this26.onUpdateMenstrualHistoryFunction();
                          } else if (option == _this26.SAVE_PREGNANCY_HISTORY) {
                            _this26.onUpdatePregnantHistoryFunction();
                          } else if (option == _this26.SAVE_IMMUNIZATION_RECORD) {
                            _this26.onUpdateImmunizationRecordFunction(data.immunization);
                          }
                        } else if (result.data && result.data.button == 'Delete') {
                          if (option == _this26.REMOVE_PAST_MEDICAL_HISTORY) {
                            _this26.onRemoveDiseaseFunction(data.disease);
                          } else if (option == _this26.REMOVE_SURGICAL_HISTORY) {
                            _this26.onRemoveSurgeryFunction(data.surgery);
                          } else if (option == _this26.REMOVE_FAMILY_MEDICAL_HISTORY) {
                            _this26.onRemoveFamilyDiseaseFunction(data.disease);
                          }
                        }
                      }
                    });

                  case 1:
                  case "end":
                    return _context10.stop();
                }
              }
            }, _callee10, this);
          }));
        }
      }, {
        key: "tapCoordinates",
        value: function tapCoordinates(e) {
          this.y = e.touches[0].clientY;
          this.h = window.innerHeight;
          this.offsetY = this.h - this.y;
          console.log('offset: ', this.offsetY);
        }
      }, {
        key: "keyboardShowHandler",
        value: function keyboardShowHandler(e) {
          var kH = e.keyboardHeight;
          console.log('show: ', e.keyboardHeight);
          var bodyMove = document.querySelector('ion-app'),
              bodyMoveStyle = bodyMove.style; // Adjust full keyboard height

          bodyMoveStyle.bottom = kH + 'px';
          /*
          if (this.offsetY < kH + 40) {
            bodyMoveStyle.bottom = (kH - this.offsetY + 40) + 'px';
            // bodyMoveStyle.top = 'initial';
          }
          */

          console.log(bodyMoveStyle.bottom);
        }
      }, {
        key: "keyboardHideHandler",
        value: function keyboardHideHandler() {
          console.log('gone');
          var removeStyles = document.querySelector('ion-app');
          removeStyles.removeAttribute('style');
        }
      }, {
        key: "removeIonAppStyles",
        value: function removeIonAppStyles() {
          var removeStyles = document.querySelector('ion-app');
          removeStyles.removeAttribute('style');
        }
      }]);

      return PastMedicalHistoryPage;
    }();

    PastMedicalHistoryPage.ctorParameters = function () {
      return [{
        type: _services_past_medical_history_api_service__WEBPACK_IMPORTED_MODULE_2__["PastMedicalHistoryApiService"]
      }, {
        type: _services_patient_service__WEBPACK_IMPORTED_MODULE_3__["PatientService"]
      }, {
        type: _services_api_service__WEBPACK_IMPORTED_MODULE_5__["ApiService"]
      }, {
        type: _services_login_service__WEBPACK_IMPORTED_MODULE_4__["LoginService"]
      }, {
        type: _services_loading_service__WEBPACK_IMPORTED_MODULE_6__["LoadingService"]
      }, {
        type: _services_string_utils_service__WEBPACK_IMPORTED_MODULE_7__["StringUtilsService"]
      }, {
        type: _services_permission_validator_service__WEBPACK_IMPORTED_MODULE_8__["PermissionValidatorService"]
      }, {
        type: src_app_app_services_alert_service_service__WEBPACK_IMPORTED_MODULE_16__["AlertServiceService"]
      }, {
        type: _angular_forms__WEBPACK_IMPORTED_MODULE_17__["FormBuilder"]
      }, {
        type: _ionic_angular__WEBPACK_IMPORTED_MODULE_14__["MenuController"]
      }];
    };

    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])('slides', {
      static: true
    }), tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _ionic_angular__WEBPACK_IMPORTED_MODULE_14__["IonSlides"])], PastMedicalHistoryPage.prototype, "slider", void 0);
    PastMedicalHistoryPage = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
      selector: 'app-past-medical-history',
      template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(
      /*! raw-loader!./past-medical-history.page.html */
      "./node_modules/raw-loader/dist/cjs.js!./src/app/pages/past-medical-history/past-medical-history.page.html")).default,
      styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(
      /*! ./past-medical-history.page.scss */
      "./src/app/pages/past-medical-history/past-medical-history.page.scss")).default]
    }), tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_services_past_medical_history_api_service__WEBPACK_IMPORTED_MODULE_2__["PastMedicalHistoryApiService"], _services_patient_service__WEBPACK_IMPORTED_MODULE_3__["PatientService"], _services_api_service__WEBPACK_IMPORTED_MODULE_5__["ApiService"], _services_login_service__WEBPACK_IMPORTED_MODULE_4__["LoginService"], _services_loading_service__WEBPACK_IMPORTED_MODULE_6__["LoadingService"], _services_string_utils_service__WEBPACK_IMPORTED_MODULE_7__["StringUtilsService"], _services_permission_validator_service__WEBPACK_IMPORTED_MODULE_8__["PermissionValidatorService"], src_app_app_services_alert_service_service__WEBPACK_IMPORTED_MODULE_16__["AlertServiceService"], _angular_forms__WEBPACK_IMPORTED_MODULE_17__["FormBuilder"], _ionic_angular__WEBPACK_IMPORTED_MODULE_14__["MenuController"]])], PastMedicalHistoryPage);
    /***/
  },

  /***/
  "./src/app/services/past-medical-history-api.service.ts":
  /*!**************************************************************!*\
    !*** ./src/app/services/past-medical-history-api.service.ts ***!
    \**************************************************************/

  /*! exports provided: PastMedicalHistoryApiService */

  /***/
  function srcAppServicesPastMedicalHistoryApiServiceTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "PastMedicalHistoryApiService", function () {
      return PastMedicalHistoryApiService;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/fesm2015/core.js");
    /* harmony import */


    var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! @angular/common/http */
    "./node_modules/@angular/common/fesm2015/http.js");
    /* harmony import */


    var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! rxjs */
    "./node_modules/rxjs/_esm2015/index.js");
    /* harmony import */


    var rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! rxjs/operators */
    "./node_modules/rxjs/_esm2015/operators/index.js");
    /* harmony import */


    var _ionic_angular__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! @ionic/angular */
    "./node_modules/@ionic/angular/dist/fesm5.js");
    /* harmony import */


    var _ionic_native_http_ngx__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! @ionic-native/http/ngx */
    "./node_modules/@ionic-native/http/ngx/index.js");

    var PastMedicalHistoryApiService =
    /*#__PURE__*/
    function () {
      function PastMedicalHistoryApiService(platform, httpClient, http) {
        _classCallCheck(this, PastMedicalHistoryApiService);

        this.platform = platform;
        this.httpClient = httpClient;
        this.http = http;
        this.url = 'http://localhost:3000';
        this.getPresentIllnessPath = '/api/doctor/patient/pmh/presentillness/data';
        this.getPastMedicalHistoryPath = '/api/doctor/patient/pmh/pastmedicalhistory/data';
        this.getSurgicalHistoryPath = '/api/doctor/patient/pmh/surgicalhistory/data';
        this.getFamilyMedicalHistoryPath = '/api/doctor/patient/pmh/familyhistory/data';
        this.getSocialMedicalHistoryPath = '/api/doctor/patient/pmh/socialhistory/data';
        this.getGynecologicalHistoryPath = '/api/doctor/patient/pmh/gynecologicalobstetrichistory/data';
        this.getImmunizationRecordPath = '/api/doctor/patient/pmh/immunizationrecord/data';
        this.savePresentIllnessPath = '/api/doctor/patient/pmh/presentillness/action';
        this.addPastMedicalHistoryPath = '/api/doctor/patient/pmh/pastmedicalhistory/action';
        this.addSurgicalHistoryPath = '/api/doctor/patient/pmh/surgicalhistory/action';
        this.addFamilyMedicalHistoryPath = '/api/doctor/patient/pmh/familyhistory/action';
        this.saveSocialHistoryPath = '/api/doctor/patient/pmh/socialhistory/action';
        this.saveMenstrualHistoryPath = '/api/doctor/patient/pmh/menstrualhistory/action';
        this.savePregnantHistoryPath = '/api/doctor/patient/pmh/pregnanthistory/action';
        this.saveImmunizationRecordPath = '/api/doctor/patient/pmh/immunizationrecord/action';
        this.deletePastMedicalHistoryPath = '/api/doctor/patient/pmh/pastmedicalhistory/delete';
        this.deleteSurgicalMedicalHistoryPath = '/api/doctor/patient/pmh/surgicalhistory/delete';
        this.deleteFamilyMedicalHistoryPath = '/api/doctor/patient/pmh/familyhistory/delete';
        this.getPastMedOptions = '/api/doctor/patient/pmh/presentillness/options';
      }

      _createClass(PastMedicalHistoryApiService, [{
        key: "setUrl",
        value: function setUrl(url) {
          this.url = url;
        }
      }, {
        key: "setToken",
        value: function setToken(token) {
          this.token = token;
        }
      }, {
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
          if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            var params = {};
            var headers = {
              Accept: 'application/json',
              'Content-Type': 'application/json',
              Authorization: 'Bearer ' + this.token
            };
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.get(this.url + this.getPastMedOptions, params, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (response) {
              return JSON.parse(response.data);
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              if (typeof err.error === 'string') {
                try {
                  err.error = JSON.parse(err.error);
                } catch (e) {// do nothing
                }
              }

              console.log('Present Illness error:', err, caught);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          } else {
            console.log('browser');
            var getParams = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
            var httpOptions = {
              params: getParams,
              headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                'Content-Type': 'application/json',
                Authorization: 'Bearer ' + this.token
              })
            };
            return this.httpClient.get(this.url + this.getPastMedOptions, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (results) {
              console.log(results);
              return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              console.log(caught);
              console.error(err);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          }
        }
      }, {
        key: "getPresentIllness",
        value: function getPresentIllness(encounter_no) {
          if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            var params = {
              encounter_no: encounter_no
            };
            var headers = {
              Accept: 'application/json',
              'Content-Type': 'application/json',
              Authorization: 'Bearer ' + this.token
            };
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.get(this.url + this.getPresentIllnessPath, params, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (response) {
              var presentIllness = JSON.parse(response.data);
              console.log('Present Illness:', presentIllness);
              return presentIllness;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              if (typeof err.error === 'string') {
                try {
                  err.error = JSON.parse(err.error);
                } catch (e) {// do nothing
                }
              }

              console.log('Present Illness error:', err, caught);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          } else {
            console.log('browser');
            var getParams = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]().set('encounter_no', encounter_no);
            var httpOptions = {
              params: getParams,
              headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                'Content-Type': 'application/json',
                Authorization: 'Bearer ' + this.token
              })
            };
            return this.httpClient.get(this.url + this.getPresentIllnessPath, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (results) {
              console.log(results);
              return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              console.log(caught);
              console.error(err);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          }
        }
      }, {
        key: "getPastMedicalHistories",
        value: function getPastMedicalHistories(encounter_no) {
          if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            var params = {
              encounter_no: encounter_no
            };
            var headers = {
              Accept: 'application/json',
              'Content-Type': 'application/json',
              Authorization: 'Bearer ' + this.token
            };
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.get(this.url + this.getPastMedicalHistoryPath, params, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (response) {
              var pastMedicalHistories = JSON.parse(response.data);
              console.log('Past Medical Histories:', pastMedicalHistories);
              return pastMedicalHistories;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              if (typeof err.error === 'string') {
                try {
                  err.error = JSON.parse(err.error);
                } catch (e) {// do nothing
                }
              }

              console.log('Past Medical Histories error:', err, caught);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          } else {
            var getParams = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]().set('encounter_no', encounter_no);
            var httpOptions = {
              params: getParams,
              headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                'Content-Type': 'application/json',
                Authorization: 'Bearer ' + this.token
              })
            };
            return this.httpClient.get(this.url + this.getPastMedicalHistoryPath, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (results) {
              console.log(results);
              return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              console.log(caught);
              console.error(err);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          }
        }
      }, {
        key: "getSurgicalHistories",
        value: function getSurgicalHistories(encounter_no) {
          if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            var params = {
              encounter_no: encounter_no
            };
            var headers = {
              Accept: 'application/json',
              'Content-Type': 'application/json',
              Authorization: 'Bearer ' + this.token
            };
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.get(this.url + this.getSurgicalHistoryPath, params, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (response) {
              var surgicalHistories = JSON.parse(response.data);
              console.log('Surgical Histories: ', surgicalHistories);
              return surgicalHistories;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              if (typeof err.error === 'string') {
                try {
                  err.error = JSON.parse(err.error);
                } catch (e) {// do nothing
                }
              }

              console.log('Surgical Histories error:', err, caught);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          } else {
            console.log('browser');
            var getParams = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]().set('encounter_no', encounter_no);
            var httpOptions = {
              params: getParams,
              headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                'Content-Type': 'application/json',
                Authorization: 'Bearer ' + this.token
              })
            };
            return this.httpClient.get(this.url + this.getSurgicalHistoryPath, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (results) {
              console.log(results);
              return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              console.log(caught);
              console.error(err);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          }
        }
      }, {
        key: "getFamilyMedicalHistories",
        value: function getFamilyMedicalHistories(encounter_no) {
          if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            var params = {
              encounter_no: encounter_no
            };
            var headers = {
              Accept: 'application/json',
              'Content-Type': 'application/json',
              Authorization: 'Bearer ' + this.token
            };
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.get(this.url + this.getFamilyMedicalHistoryPath, params, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (response) {
              var familyMedicalHistories = JSON.parse(response.data);
              console.log('Family Medical Histories: ', familyMedicalHistories);
              return familyMedicalHistories;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              if (typeof err.error === 'string') {
                try {
                  err.error = JSON.parse(err.error);
                } catch (e) {// do nothing
                }
              }

              console.log('Family Medical Histories error:', err, caught);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          } else {
            var getParams = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]().set('encounter_no', encounter_no);
            var httpOptions = {
              params: getParams,
              headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                'Content-Type': 'application/json',
                Authorization: 'Bearer ' + this.token
              })
            };
            return this.httpClient.get(this.url + this.getFamilyMedicalHistoryPath, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (results) {
              console.log(results);
              return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              console.log(caught);
              console.error(err);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          }
        }
      }, {
        key: "getSocialMedicalHistory",
        value: function getSocialMedicalHistory(encounter_no) {
          if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            var params = {
              encounter_no: encounter_no
            };
            var headers = {
              Accept: 'application/json',
              'Content-Type': 'application/json',
              Authorization: 'Bearer ' + this.token
            };
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.get(this.url + this.getSocialMedicalHistoryPath, params, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (response) {
              var socialMedicalHistory = JSON.parse(response.data);
              console.log('Social Medical History: ', socialMedicalHistory);
              return socialMedicalHistory;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              if (typeof err.error === 'string') {
                try {
                  err.error = JSON.parse(err.error);
                } catch (e) {
                  console.log('err.error parse failed: ', e);
                }
              }

              console.log('Social Medical History error:', err, caught);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          } else {
            var getParams = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]().set('encounter_no', encounter_no);
            var httpOptions = {
              params: getParams,
              headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                'Content-Type': 'application/json',
                Authorization: 'Bearer ' + this.token
              })
            };
            return this.httpClient.get(this.url + this.getSocialMedicalHistoryPath, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (results) {
              console.log(results);
              return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              console.log(caught);
              console.error(err);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          }
        }
      }, {
        key: "getGynecologicalObstetricHistory",
        value: function getGynecologicalObstetricHistory(encounter_no) {
          if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            var params = {
              encounter_no: encounter_no
            };
            var headers = {
              Accept: 'application/json',
              'Content-Type': 'application/json',
              Authorization: 'Bearer ' + this.token
            };
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.get(this.url + this.getGynecologicalHistoryPath, params, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (response) {
              var gynecologicalHistory = JSON.parse(response.data);
              console.log('Gynecological Obstetric History: ', gynecologicalHistory);
              return gynecologicalHistory;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              if (typeof err.error === 'string') {
                try {
                  err.error = JSON.parse(err.error);
                } catch (e) {
                  console.log('err.error parse failed: ', e);
                }
              }

              console.log('Gynecological Obstetric History error:', err, caught);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          } else {
            var getParams = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]().set('encounter_no', encounter_no);
            var httpOptions = {
              params: getParams,
              headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                'Content-Type': 'application/json',
                Authorization: 'Bearer ' + this.token
              })
            };
            return this.httpClient.get(this.url + this.getGynecologicalHistoryPath, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (results) {
              console.log(results);
              return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              console.log(caught);
              console.error(err);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          }
        }
      }, {
        key: "getImmunizationRecord",
        value: function getImmunizationRecord(encounter_no) {
          if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            var params = {
              encounter_no: encounter_no
            };
            var headers = {
              Accept: 'application/json',
              'Content-Type': 'application/json',
              Authorization: 'Bearer ' + this.token
            };
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.get(this.url + this.getImmunizationRecordPath, params, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (response) {
              var immunizationRecord = JSON.parse(response.data);
              console.log('Immunization Record: ', immunizationRecord);
              return immunizationRecord;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              if (typeof err.error === 'string') {
                try {
                  err.error = JSON.parse(err.error);
                } catch (e) {
                  console.log('err.error parse failed: ', e);
                }
              }

              console.log('Immunization Record error:', err, caught);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          } else {
            var getParams = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]().set('encounter_no', encounter_no);
            var httpOptions = {
              params: getParams,
              headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                'Content-Type': 'application/json',
                Authorization: 'Bearer ' + this.token
              })
            };
            return this.httpClient.get(this.url + this.getImmunizationRecordPath, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (results) {
              console.log(results);
              return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              console.log(caught);
              console.error(err);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          }
        }
      }, {
        key: "savePresentIllness",
        value: function savePresentIllness(presentDisease) {
          if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            var body = {
              encounter_no: presentDisease.encounter_no,
              history: presentDisease.history,
              modified_by: presentDisease.modified_by
            };
            var headers = {
              Accept: 'application/json',
              Authorization: 'Bearer ' + this.token
            };
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.post(this.url + this.savePresentIllnessPath, body, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (response) {
              var presentIllness = JSON.parse(response.data);
              console.log('Present Illness: ', presentIllness);
              return presentIllness;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              if (typeof err.error === 'string') {
                try {
                  err.error = JSON.parse(err.error);
                } catch (e) {
                  console.log('err.error parse failed: ', e);
                }
              }

              console.log('Present Illness error:', err, caught);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          } else {
            var _body = new FormData();

            _body.append('encounter_no', presentDisease.encounter_no);

            _body.append('history', presentDisease.history);

            _body.append('modified_by', presentDisease.modified_by);

            var httpOptions = {
              headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                Accept: 'application/json',
                Authorization: 'Bearer ' + this.token
              })
            };
            return this.httpClient.post(this.url + this.savePresentIllnessPath, _body, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (results) {
              console.log(results);
              return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              console.log(caught);
              console.error(err);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          }
        }
      }, {
        key: "addPastMedicalHistory",
        value: function addPastMedicalHistory(newDisease) {
          if (this.platform.is('ios') || this.platform.is('android')) {
            var body = {
              encounter_no: newDisease.encounter_no,
              specific_disease_description: newDisease.specific_disease_description,
              disease_id: newDisease.disease_id,
              modified_by: newDisease.modified_by
            };
            console.log('native');
            var headers = {
              Accept: 'application/json',
              Authorization: 'Bearer ' + this.token
            };
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.post(this.url + this.addPastMedicalHistoryPath, body, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (response) {
              var responseData = JSON.parse(response.data);
              console.log('Past Medical History: ', responseData);
              return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              if (typeof err.error === 'string') {
                try {
                  err.error = JSON.parse(err.error);
                } catch (e) {
                  console.log('err.error parse failed: ', e);
                }
              }

              console.log('Past Medical History error:', err, caught);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          } else {
            var _body2 = new FormData();

            _body2.append('encounter_no', newDisease.encounter_no);

            _body2.append('specific_disease_description', newDisease.specific_disease_description);

            _body2.append('disease_id', newDisease.disease_id);

            _body2.append('modified_by', newDisease.modified_by);

            var httpOptions = {
              headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                Accept: 'application/json',
                Authorization: 'Bearer ' + this.token
              })
            };
            return this.httpClient.post(this.url + this.addPastMedicalHistoryPath, _body2, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (result) {
              console.log(result);
              return result;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              console.log(caught);
              console.error(err);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          }
        }
      }, {
        key: "addSurgicalHistory",
        value: function addSurgicalHistory(newSurgery) {
          if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            var body = {
              encounter_no: newSurgery.encounter_no,
              description: newSurgery.description,
              date_of_operation: newSurgery.date_of_operation,
              remarks: newSurgery.remarks,
              modified_by: newSurgery.modified_by
            };
            var headers = {
              Accept: 'application/json',
              Authorization: 'Bearer ' + this.token
            };
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.post(this.url + this.addSurgicalHistoryPath, body, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (response) {
              var responseData = JSON.parse(response.data);
              console.log('Surgical History: ', responseData);
              return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              if (typeof err.error === 'string') {
                try {
                  err.error = JSON.parse(err.error);
                } catch (e) {
                  console.log('err.error parse failed: ', e);
                }
              }

              console.log('Surgical History error:', err, caught);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          } else {
            var _body3 = new FormData();

            _body3.append('encounter_no', newSurgery.encounter_no);

            _body3.append('description', newSurgery.description);

            _body3.append('date_of_operation', newSurgery.date_of_operation);

            _body3.append('remarks', newSurgery.remarks);

            _body3.append('modified_by', newSurgery.modified_by);

            var httpOptions = {
              headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                Accept: 'application/json',
                Authorization: 'Bearer ' + this.token
              })
            };
            return this.httpClient.post(this.url + this.addSurgicalHistoryPath, _body3, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (result) {
              console.log(result);
              return result;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              console.log(caught);
              console.error(err);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          }
        }
      }, {
        key: "addFamilyHistory",
        value: function addFamilyHistory(newDisease) {
          if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            var body = {
              encounter_no: newDisease.encounter_no,
              disease_id: newDisease.disease_id,
              specific_disease_description: newDisease.specific_disease_description,
              modified_by: newDisease.modified_by
            };
            var headers = {
              Accept: 'application/json',
              Authorization: 'Bearer ' + this.token
            };
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.post(this.url + this.addFamilyMedicalHistoryPath, body, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (response) {
              var responseData = JSON.parse(response.data);
              console.log('Family Medical History: ', responseData);
              return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              if (typeof err.error === 'string') {
                try {
                  err.error = JSON.parse(err.error);
                } catch (e) {
                  console.log('err.error parse failed: ', e);
                }
              }

              console.log('Family Medical error:', err, caught);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          } else {
            var _body4 = new FormData();

            _body4.append('encounter_no', newDisease.encounter_no);

            _body4.append('disease_id', newDisease.disease_id);

            _body4.append('specific_disease_description', newDisease.specific_disease_description);

            _body4.append('modified_by', newDisease.modified_by);

            var httpOptions = {
              headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                Accept: 'application/json',
                Authorization: 'Bearer ' + this.token
              })
            };
            return this.httpClient.post(this.url + this.addFamilyMedicalHistoryPath, _body4, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (result) {
              console.log(result);
              return result;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              console.log(caught);
              console.error(err);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          }
        }
      }, {
        key: "saveSocialHistory",
        value: function saveSocialHistory(socialHistory) {
          if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            var body = {
              encounter_no: socialHistory.encounter_no,
              spin: socialHistory.spin,
              is_smoke: socialHistory.is_smoke,
              years_smoking: socialHistory.years_smoking,
              stick_per_day: socialHistory.stick_per_day,
              stick_per_year: socialHistory.stick_per_year,
              is_alcohol: socialHistory.is_alcohol,
              no_bottles: socialHistory.no_bottles,
              is_drug: socialHistory.is_drug,
              // remarks: socialHistory.remarks,
              modified_by: socialHistory.modified_by
            };
            var headers = {
              Accept: 'application/json',
              Authorization: 'Bearer ' + this.token
            };
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.post(this.url + this.saveSocialHistoryPath, body, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (response) {
              var responseData = JSON.parse(response.data);
              console.log('Social History: ', responseData);
              return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              if (typeof err.error === 'string') {
                try {
                  err.error = JSON.parse(err.error);
                } catch (e) {
                  console.log('err.error parse failed: ', e);
                }
              }

              console.log('Social History error:', err, caught);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          } else {
            var _body5 = new FormData();

            _body5.append('encounter_no', socialHistory.encounter_no);

            _body5.append('spin', socialHistory.spin);

            _body5.append('is_smoke', socialHistory.is_smoke);

            _body5.append('years_smoking', socialHistory.years_smoking);

            _body5.append('stick_per_day', socialHistory.stick_per_day);

            _body5.append('stick_per_year', socialHistory.stick_per_year);

            _body5.append('is_alcohol', socialHistory.is_alcohol);

            _body5.append('no_bottles', socialHistory.no_bottles);

            _body5.append('is_drug', socialHistory.is_drug);

            _body5.append('remarks', socialHistory.remarks);

            _body5.append('modified_by', socialHistory.modified_by);

            var httpOptions = {
              headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                Accept: 'application/json',
                Authorization: 'Bearer ' + this.token
              })
            };
            return this.httpClient.post(this.url + this.saveSocialHistoryPath, _body5, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (results) {
              console.log(results);
              return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              console.log(caught);
              console.error(err);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          }
        }
      }, {
        key: "saveMenstrualHistory",
        value: function saveMenstrualHistory(menstrualHistory) {
          if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            var body = {
              encounter_no: menstrualHistory.encounter_no,
              spin: menstrualHistory.spin,
              is_applicable_menstrual: menstrualHistory.is_applicable_menstrual,
              age_first_menstrual: menstrualHistory.age_first_menstrual,
              last_period_menstrual: menstrualHistory.last_period_menstrual,
              no_days_menstrual_period: menstrualHistory.no_days_menstrual_period,
              interval_menstrual_period: menstrualHistory.interval_menstrual_period,
              no_pads: menstrualHistory.no_pads,
              age_sex_intercourse: menstrualHistory.age_sex_intercourse,
              birth_control_used: menstrualHistory.birth_control_used,
              is_menopause: menstrualHistory.is_menopause,
              age_menopause: menstrualHistory.age_menopause,
              remarks: menstrualHistory.remarks,
              modified_by: menstrualHistory.modified_by
            };
            console.log('body: ', body);
            var headers = {
              Accept: 'application/json',
              'Content-Type': 'application/json',
              Authorization: 'Bearer ' + this.token
            };
            console.log('headers: ', headers);
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.post(this.url + this.saveMenstrualHistoryPath, body, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (response) {
              var responseData = JSON.parse(response.data);
              console.log('Menstrual History: ', responseData);
              return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              if (typeof err.error === 'string') {
                try {
                  err.error = JSON.parse(err.error);
                } catch (e) {
                  console.log('err.error parse failed: ', e);
                }
              }

              console.log('Menstrual History error:', err, caught);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          } else {
            var _body6 = new FormData();

            _body6.append('encounter_no', menstrualHistory.encounter_no);

            _body6.append('spin', menstrualHistory.spin);

            _body6.append('is_applicable_menstrual', menstrualHistory.is_applicable_menstrual);

            _body6.append('age_first_menstrual', menstrualHistory.age_first_menstrual);

            _body6.append('last_period_menstrual', menstrualHistory.last_period_menstrual);

            _body6.append('no_days_menstrual_period', menstrualHistory.no_days_menstrual_period);

            _body6.append('interval_menstrual_period', menstrualHistory.interval_menstrual_period);

            _body6.append('no_pads', menstrualHistory.no_pads);

            _body6.append('age_sex_intercourse', menstrualHistory.age_sex_intercourse);

            _body6.append('birth_control_used', menstrualHistory.birth_control_used);

            _body6.append('is_menopause', menstrualHistory.is_menopause);

            _body6.append('age_menopause', menstrualHistory.age_menopause);

            _body6.append('remarks', menstrualHistory.remarks);

            _body6.append('modified_by', menstrualHistory.modified_by);

            var httpOptions = {
              headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                Accept: 'application/json',
                Authorization: 'Bearer ' + this.token
              })
            };
            return this.httpClient.post(this.url + this.saveMenstrualHistoryPath, _body6, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (results) {
              console.log(results);
              return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              console.log(caught);
              console.error(err);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          }
        }
      }, {
        key: "savePregnantHistory",
        value: function savePregnantHistory(pregnanthistory) {
          if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            var body = {
              encounter_no: pregnanthistory.encounter_no,
              spin: pregnanthistory.spin,
              is_applicable_pregnant: pregnanthistory.is_applicable_pregnant,
              date_gravidity: pregnanthistory.date_gravidity,
              date_parity: pregnanthistory.date_parity,
              type_delivery: pregnanthistory.type_delivery,
              no_full_term_preg: pregnanthistory.no_full_term_preg,
              no_premature: pregnanthistory.no_premature,
              no_abortion: pregnanthistory.no_abortion,
              no_living_children: pregnanthistory.no_living_children,
              induced_hyper: pregnanthistory.induced_hyper,
              family_planning: pregnanthistory.family_planning,
              remarks: pregnanthistory.remarks,
              modified_by: pregnanthistory.modified_by
            };
            console.log('body: ', body);
            var headers = {
              Accept: 'application/json',
              'Content-Type': 'application/json',
              Authorization: 'Bearer ' + this.token
            };
            console.log('headers: ', headers);
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.post(this.url + this.savePregnantHistoryPath, body, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (response) {
              var responseData = JSON.parse(response.data);
              console.log('Pregnant History: ', responseData);
              return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              if (typeof err.error === 'string') {
                try {
                  err.error = JSON.parse(err.error);
                } catch (e) {
                  console.log('err.error parse failed: ', e);
                }
              }

              console.log('Pregnant History error:', err, caught);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          } else {
            var _body7 = new FormData();

            _body7.append('encounter_no', pregnanthistory.encounter_no);

            _body7.append('spin', pregnanthistory.spin);

            _body7.append('is_applicable_pregnant', pregnanthistory.is_applicable_pregnant);

            _body7.append('date_gravidity', pregnanthistory.date_gravidity);

            _body7.append('date_parity', pregnanthistory.date_parity);

            _body7.append('type_delivery', pregnanthistory.type_delivery);

            _body7.append('no_full_term_preg', pregnanthistory.no_full_term_preg);

            _body7.append('no_premature', pregnanthistory.no_premature);

            _body7.append('no_abortion', pregnanthistory.no_abortion);

            _body7.append('no_living_children', pregnanthistory.no_living_children);

            _body7.append('induced_hyper', pregnanthistory.induced_hyper);

            _body7.append('family_planning', pregnanthistory.family_planning);

            _body7.append('remarks', pregnanthistory.remarks);

            _body7.append('modified_by', pregnanthistory.modified_by);

            var httpOptions = {
              headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                Accept: 'application/json',
                Authorization: 'Bearer ' + this.token
              })
            };
            return this.httpClient.post(this.url + this.savePregnantHistoryPath, _body7, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (results) {
              console.log(results);
              return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              console.log(caught);
              console.error(err);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          }
        }
      }, {
        key: "saveImmunizationRecord",
        value: function saveImmunizationRecord(immunizationRecord) {
          if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            var body = {
              encounter_no: immunizationRecord.encounter_no,
              spin: immunizationRecord.spin,
              child_id: immunizationRecord.child_id,
              young_id: immunizationRecord.young_id,
              // preg_id: immunizationRecord.preg_id,
              elder_id: immunizationRecord.elder_id,
              other_code: immunizationRecord.other_code,
              remarks: immunizationRecord.remarks
            };
            var headers = {
              Accept: 'application/json',
              Authorization: 'Bearer ' + this.token
            };
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.post(this.url + this.saveImmunizationRecordPath, body, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (response) {
              var immunizationRecordResponse = JSON.parse(response.data);
              console.log('Immunization Record: ', immunizationRecordResponse);
              return immunizationRecordResponse;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              if (typeof err.error === 'string') {
                try {
                  err.error = JSON.parse(err.error);
                } catch (e) {
                  console.log('err.error parse failed: ', e);
                }
              }

              console.log('Immunization Record error:', err, caught);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          } else {
            var _body8 = new FormData();

            _body8.append('encounter_no', immunizationRecord.encounter_no);

            _body8.append('spin', immunizationRecord.spin);

            _body8.append('child_id', immunizationRecord.child_id);

            _body8.append('young_id', immunizationRecord.young_id); // body.append('preg_id', immunizationRecord.preg_id);


            _body8.append('elder_id', immunizationRecord.elder_id);

            _body8.append('other_code', immunizationRecord.other_code);

            _body8.append('remarks', immunizationRecord.remarks); // body.append('modified_by', immunizationRecord.modified_by);


            var httpOptions = {
              headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                Accept: 'application/json',
                Authorization: 'Bearer ' + this.token
              })
            };
            return this.httpClient.post(this.url + this.saveImmunizationRecordPath, _body8, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (results) {
              console.log(results);
              return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              console.log(caught);
              console.error(err);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          }
        }
      }, {
        key: "deletePastMedicalHistory",
        value: function deletePastMedicalHistory(encounter_no, disease_id) {
          if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            var body = {
              encounter_no: encounter_no,
              id: disease_id
            };
            var headers = {
              Accept: 'application/json',
              Authorization: 'Bearer ' + this.token
            };
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.post(this.url + this.deletePastMedicalHistoryPath, body, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (response) {
              var responseData = JSON.parse(response.data);
              console.log('Past medical History: ', responseData);
              return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              if (typeof err.error === 'string') {
                try {
                  err.error = JSON.parse(err.error);
                } catch (e) {
                  console.log('err.error parse failed: ', e);
                }
              }

              console.log('Past medical history error:', err, caught);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          } else {
            var _body9 = new FormData();

            _body9.append('encounter_no', encounter_no);

            _body9.append('id', disease_id);

            var httpOptions = {
              headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                Accept: 'application/json',
                Authorization: 'Bearer ' + this.token
              })
            };
            return this.httpClient.post(this.url + this.deletePastMedicalHistoryPath, _body9, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (results) {
              console.log(results);
              return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              console.log(caught);
              console.error(err);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          }
        }
      }, {
        key: "deleteSurgicalHistory",
        value: function deleteSurgicalHistory(encounter_no, disease_id) {
          if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            var body = {
              encounter_no: encounter_no,
              id: disease_id
            };
            var headers = {
              Accept: 'application/json',
              Authorization: 'Bearer ' + this.token
            };
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.post(this.url + this.deleteSurgicalMedicalHistoryPath, body, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (response) {
              var responseData = JSON.parse(response.data);
              console.log('surgical medical History: ', responseData);
              return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              if (typeof err.error === 'string') {
                try {
                  err.error = JSON.parse(err.error);
                } catch (e) {
                  console.log('err.error parse failed: ', e);
                }
              }

              console.log('surgical medical history error:', err, caught);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          } else {
            var _body10 = new FormData();

            _body10.append('encounter_no', encounter_no);

            _body10.append('id', disease_id);

            var httpOptions = {
              headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                Accept: 'application/json',
                Authorization: 'Bearer ' + this.token
              })
            };
            return this.httpClient.post(this.url + this.deleteSurgicalMedicalHistoryPath, _body10, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (results) {
              console.log(results);
              return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              console.log(caught);
              console.error(err);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          }
        }
      }, {
        key: "deleteFamilyHistory",
        value: function deleteFamilyHistory(encounter_no, disease_id) {
          if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            var body = {
              encounter_no: encounter_no,
              id: disease_id
            };
            var headers = {
              Accept: 'application/json',
              Authorization: 'Bearer ' + this.token
            };
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.post(this.url + this.deleteFamilyMedicalHistoryPath, body, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (response) {
              var responseData = JSON.parse(response.data);
              console.log('Family medical History: ', responseData);
              return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              if (typeof err.error === 'string') {
                try {
                  err.error = JSON.parse(err.error);
                } catch (e) {
                  console.log('err.error parse failed: ', e);
                }
              }

              console.log('Family medical history error:', err, caught);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          } else {
            var _body11 = new FormData();

            _body11.append('encounter_no', encounter_no);

            _body11.append('id', disease_id);

            var httpOptions = {
              headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                Accept: 'application/json',
                Authorization: 'Bearer ' + this.token
              })
            };
            return this.httpClient.post(this.url + this.deleteFamilyMedicalHistoryPath, _body11, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (results) {
              console.log(results);
              return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(function (err, caught) {
              console.log(caught);
              console.error(err);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          }
        }
      }]);

      return PastMedicalHistoryApiService;
    }();

    PastMedicalHistoryApiService.ctorParameters = function () {
      return [{
        type: _ionic_angular__WEBPACK_IMPORTED_MODULE_5__["Platform"]
      }, {
        type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"]
      }, {
        type: _ionic_native_http_ngx__WEBPACK_IMPORTED_MODULE_6__["HTTP"]
      }];
    };

    PastMedicalHistoryApiService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
      providedIn: 'root'
    }), tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_ionic_angular__WEBPACK_IMPORTED_MODULE_5__["Platform"], _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"], _ionic_native_http_ngx__WEBPACK_IMPORTED_MODULE_6__["HTTP"]])], PastMedicalHistoryApiService);
    /***/
  }
}]);
//# sourceMappingURL=past-medical-history-past-medical-history-module-es5.js.map
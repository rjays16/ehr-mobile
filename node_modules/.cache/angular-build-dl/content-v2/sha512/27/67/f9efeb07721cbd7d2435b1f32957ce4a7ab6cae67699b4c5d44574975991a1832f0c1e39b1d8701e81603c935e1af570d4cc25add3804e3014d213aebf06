(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~doctor-order-doctor-order-module~laboratory-order-laboratory-order-module~plan-management-pl~5fb2b03d"],{

/***/ "./src/app/services/plan-management-api.service.ts":
/*!*********************************************************!*\
  !*** ./src/app/services/plan-management-api.service.ts ***!
  \*********************************************************/
/*! exports provided: PlanManagementApiService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlanManagementApiService", function() { return PlanManagementApiService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ionic/angular */ "./node_modules/@ionic/angular/dist/fesm5.js");
/* harmony import */ var _ionic_native_http_ngx__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ionic-native/http/ngx */ "./node_modules/@ionic-native/http/ngx/index.js");







let PlanManagementApiService = class PlanManagementApiService {
    constructor(platform, httpClient, http) {
        this.platform = platform;
        this.httpClient = httpClient;
        this.http = http;
        this.url = 'http://localhost:3000';
        this.getAllOrdersPath = '/api/doctor/planmanagement/getAllOrders';
        this.postFinalizeRequrestOrdersPath = '/api/doctor/planmanagement/finalize/orders';
        this.postMedicineSearchPath = '/api/doctor/medicine/search';
        this.postPrescriptionSavePath = '/api/doctor/prescription/save';
        this.getPrescriptionPrintFilePath = '/api/doctor/patient/prescription/file/path';
        this.postCoursewardSavePath = '/api/doctor/courseward/save';
        this.postCoursewardDeletePath = '/api/doctor/courseward/delete';
        this.postReferralSavePath = '/api/doctor/referral/save';
        this.postReferralDeletePath = '/api/doctor/referral/delete';
        this.postDiagnosticLaboratorySavePath = '/api/doctor/diagnostic/lab/save';
        this.postDiagnosticLaboratoryDeletePath = '/api/doctor/diagnostic/lab/delete';
        this.postDiagnosticRadiologySavePath = '/api/doctor/diagnostic/rad/save';
        this.postDiagnosticRadiologyDeletePath = '/api/doctor/diagnostic/rad/delete';
        this.postRepetitiveDeletePath = '/api/doctor/repetitive/delete';
        this.postRepetitiveSavePath = '/api/doctor/repetitive/save';
        this.postFinalizedRepetitiveDeletePath = '/api/doctor/finalized/repetitive/delete';
    }
    setUrl(url) {
        this.url = url;
    }
    setToken(token) {
        this.token = token;
    }
    finalizeRequestOrders(encounter_no) {
        if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            const headers = {
                Accept: 'application/json',
                Authorization: 'Bearer ' + this.token
            };
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.post(this.url + this.postFinalizeRequrestOrdersPath + '?encounterNo=' + encounter_no, {}, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])((response) => {
                const responseData = JSON.parse(response.data);
                console.log('Plan management all orders: ', responseData);
                return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])((err, caught) => {
                if (typeof err.error === 'string') {
                    try {
                        err.error = JSON.parse(err.error);
                    }
                    catch (e) {
                        console.log('err.error parse failed: ', e);
                    }
                }
                console.log('Plan management all orders error: ', err, caught);
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
        }
        else {
            console.log('browser');
            const params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                .set('encounterNo', encounter_no);
            console.log('params: ', params);
            const httpOptions = {
                params,
                headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                    Accept: 'application/json',
                    Authorization: 'Bearer ' + this.token
                })
            };
            console.log('httpOptions', httpOptions);
            return this.httpClient.post(this.url + this.postFinalizeRequrestOrdersPath, {}, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])((results) => {
                console.log(results);
                return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])((err, caught) => {
                console.log(caught);
                console.error(err);
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
        }
    }
    getAllOrders(encounter_no) {
        if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            const headers = {
                Accept: 'application/json',
                Authorization: 'Bearer ' + this.token
            };
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.post(this.url + this.getAllOrdersPath + '?encounterNo=' + encounter_no, {}, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])((response) => {
                const responseData = JSON.parse(response.data);
                console.log('Plan management all orders: ', responseData);
                return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])((err, caught) => {
                if (typeof err.error === 'string') {
                    try {
                        err.error = JSON.parse(err.error);
                    }
                    catch (e) {
                        console.log('err.error parse failed: ', e);
                    }
                }
                console.log('Plan management all orders error: ', err, caught);
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
        }
        else {
            console.log('browser');
            const params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                .set('encounterNo', encounter_no);
            console.log('params: ', params);
            const httpOptions = {
                params,
                headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                    Accept: 'application/json',
                    Authorization: 'Bearer ' + this.token
                })
            };
            console.log('httpOptions', httpOptions);
            return this.httpClient.post(this.url + this.getAllOrdersPath, {}, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])((results) => {
                console.log(results);
                return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])((err, caught) => {
                console.log(caught);
                console.error(err);
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
        }
    }
    searchMedicine(query) {
        if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            const headers = {
                Accept: 'application/json',
                Authorization: 'Bearer ' + this.token
            };
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.post(this.url + this.postMedicineSearchPath + '?q=' + query, {}, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])((response) => {
                const responseData = JSON.parse(response.data);
                console.log('Plan management all orders: ', responseData);
                return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])((err, caught) => {
                if (typeof err.error === 'string') {
                    try {
                        err.error = JSON.parse(err.error);
                    }
                    catch (e) {
                        console.log('err.error parse failed: ', e);
                    }
                }
                console.log('Plan management all orders error: ', err, caught);
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
        }
        else {
            console.log('browser');
            const params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                .set('q', query);
            console.log('params: ', params);
            const httpOptions = {
                params,
                headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                    Accept: 'application/json',
                    Authorization: 'Bearer ' + this.token
                })
            };
            console.log('httpOptions', httpOptions);
            return this.httpClient.post(this.url + this.postMedicineSearchPath, {}, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])((results) => {
                console.log(results);
                return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])((err, caught) => {
                console.log(caught);
                console.error(err);
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
        }
    }
    savePrescription(encounter_no, prescription_list) {
        if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            const params = {
                orders: prescription_list
            };
            const headers = {
                Accept: 'application/json',
                'Content-Type': 'application/json',
                Authorization: 'Bearer ' + this.token
            };
            this.http.setDataSerializer('json');
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.post(this.url + this.postPrescriptionSavePath + '?encounterNo=' + encounter_no, params, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])((response) => {
                const responseData = JSON.parse(response.data);
                console.log('Save prescriptions: ', responseData);
                return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])((err, caught) => {
                if (typeof err.error === 'string') {
                    try {
                        err.error = JSON.parse(err.error);
                    }
                    catch (e) {
                        console.log('err.error parse failed: ', e);
                    }
                }
                console.log('Save prescriptions error: ', err, caught);
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
        }
        else {
            console.log('browser');
            const body = {
                orders: prescription_list
            };
            console.log('body: ', body);
            const params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                .set('encounterNo', encounter_no);
            console.log('params: ', params);
            const httpOptions = {
                params,
                headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                    Accept: 'application/json',
                    Authorization: 'Bearer ' + this.token
                })
            };
            console.log('httpOptions', httpOptions);
            return this.httpClient.post(this.url + this.postPrescriptionSavePath, body, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])((results) => {
                console.log(results);
                return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])((err, caught) => {
                console.log(caught);
                console.error(err);
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
        }
    }
    saveCourseward(courseward) {
        if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            const headers = {
                Accept: 'application/json',
                'Content-Type': 'application/json',
                Authorization: 'Bearer ' + this.token
            };
            const data = {};
            Object.keys(courseward).forEach(key => {
                if (key !== 'encounter_no') {
                    data[key] = courseward[key];
                }
            });
            const body = {
                data
            };
            console.log('body: ', body);
            this.http.setDataSerializer('json');
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.post(this.url + this.postCoursewardSavePath + '?encounterNo=' + courseward.encounter_no, body, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])((response) => {
                const responseData = JSON.parse(response.data);
                console.log('Plan management all orders: ', responseData);
                return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])((err, caught) => {
                if (typeof err.error === 'string') {
                    try {
                        err.error = JSON.parse(err.error);
                    }
                    catch (e) {
                        console.log('err.error parse failed: ', e);
                    }
                }
                console.log('Plan management all orders error: ', err, caught);
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
        }
        else {
            console.log('browser');
            const data = {};
            Object.keys(courseward).forEach(key => {
                if (key !== 'encounter_no') {
                    data[key] = courseward[key];
                }
            });
            const body = {
                data
            };
            console.log('body: ', body);
            const params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                .set('encounterNo', courseward.encounter_no);
            console.log('params: ', params);
            const httpOptions = {
                params,
                headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                    Accept: 'application/json',
                    'Content-Type': 'application/json',
                    Authorization: 'Bearer ' + this.token
                })
            };
            console.log('httpOptions', httpOptions);
            return this.httpClient.post(this.url + this.postCoursewardSavePath, body, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])((results) => {
                console.log(results);
                return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])((err, caught) => {
                console.log(caught);
                console.error(err);
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
        }
    }
    deleteCourseward(encounter_no, id) {
        if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            const headers = {
                Accept: 'application/json',
                Authorization: 'Bearer ' + this.token
            };
            const body = {
                'data[id]': id
            };
            console.log('body: ', body);
            // tslint:disable-next-line: max-line-length
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.post(this.url + this.postCoursewardDeletePath + '?encounterNo=' + encounter_no + '&orders=' + id, {}, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])((response) => {
                const responseData = JSON.parse(response.data);
                console.log('Plan management all orders: ', responseData);
                return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])((err, caught) => {
                if (typeof err.error === 'string') {
                    try {
                        err.error = JSON.parse(err.error);
                    }
                    catch (e) {
                        console.log('err.error parse failed: ', e);
                    }
                }
                console.log('Plan management all orders error: ', err, caught);
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
        }
        else {
            console.log('browser');
            const body = new FormData();
            body.append('data[id]', id);
            console.log('body: ', body);
            const params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                .set('encounterNo', encounter_no)
                .set('orders', id);
            console.log('params: ', params);
            const httpOptions = {
                params,
                headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                    Accept: 'application/json',
                    Authorization: 'Bearer ' + this.token
                })
            };
            console.log('httpOptions', httpOptions);
            return this.httpClient.post(this.url + this.postCoursewardDeletePath, {}, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])((results) => {
                console.log(results);
                return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])((err, caught) => {
                console.log(caught);
                console.error(err);
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
        }
    }
    saveReferral(referral) {
        if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            const headers = {
                Accept: 'application/json',
                'Content-Type': 'application/json',
                Authorization: 'Bearer ' + this.token
            };
            const data = {};
            Object.keys(referral).forEach(key => {
                if (key !== 'encounter_no') {
                    data[key] = referral[key];
                }
            });
            const body = {
                data
            };
            console.log('body: ', body);
            this.http.setDataSerializer('json');
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.post(this.url + this.postReferralSavePath + '?encounterNo=' + referral.encounter_no, body, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])((response) => {
                const responseData = JSON.parse(response.data);
                console.log('Plan management all orders: ', responseData);
                return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])((err, caught) => {
                if (typeof err.error === 'string') {
                    try {
                        err.error = JSON.parse(err.error);
                    }
                    catch (e) {
                        console.log('err.error parse failed: ', e);
                    }
                }
                console.log('Plan management all orders error: ', err, caught);
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
        }
        else {
            console.log('browser');
            const data = {};
            Object.keys(referral).forEach(key => {
                if (key !== 'encounter_no') {
                    data[key] = referral[key];
                }
            });
            const body = {
                data
            };
            console.log('body: ', body);
            const params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                .set('encounterNo', referral.encounter_no);
            console.log('params: ', params);
            const httpOptions = {
                params,
                headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                    Accept: 'application/json',
                    Authorization: 'Bearer ' + this.token
                })
            };
            console.log('httpOptions', httpOptions);
            return this.httpClient.post(this.url + this.postReferralSavePath, body, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])((results) => {
                console.log(results);
                return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])((err, caught) => {
                console.log(caught);
                console.error(err);
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
        }
    }
    deleteReferral(encounter_no, id) {
        if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            const headers = {
                Accept: 'application/json',
                Authorization: 'Bearer ' + this.token
            };
            const body = {
                'data': {
                    'id': id
                }
            };
            this.http.setDataSerializer('json');
            console.log('body: ', body);
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.post(this.url + this.postReferralDeletePath + '?encounterNo=' + encounter_no, body, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])((response) => {
                const responseData = JSON.parse(response.data);
                console.log('Plan management all orders: ', responseData);
                return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])((err, caught) => {
                if (typeof err.error === 'string') {
                    try {
                        err.error = JSON.parse(err.error);
                    }
                    catch (e) {
                        console.log('err.error parse failed: ', e);
                    }
                }
                console.log('Plan management all orders error: ', err, caught);
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
        }
        else {
            console.log('browser');
            const body = new FormData();
            body.append('data[id]', id);
            console.log('body: ', body);
            const params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                .set('encounterNo', encounter_no);
            console.log('params: ', params);
            const httpOptions = {
                params,
                headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                    Accept: 'application/json',
                    Authorization: 'Bearer ' + this.token
                })
            };
            console.log('httpOptions', httpOptions);
            return this.httpClient.post(this.url + this.postReferralDeletePath, body, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])((results) => {
                console.log(results);
                return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])((err, caught) => {
                console.log(caught);
                console.error(err);
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
        }
    }
    saveDiagnosticLaboratory(encounter_no, orders) {
        if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            const params = {
                orders
            };
            const headers = {
                Accept: 'application/json',
                'Content-Type': 'application/json',
                Authorization: 'Bearer ' + this.token
            };
            this.http.setDataSerializer('json');
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.post(this.url + this.postDiagnosticLaboratorySavePath + '?encounterNo=' + encounter_no, params, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])((response) => {
                const responseData = JSON.parse(response.data);
                console.log('Save prescriptions: ', responseData);
                return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])((err, caught) => {
                if (typeof err.error === 'string') {
                    try {
                        err.error = JSON.parse(err.error);
                    }
                    catch (e) {
                        console.log('err.error parse failed: ', e);
                    }
                }
                console.log('Save prescriptions error: ', err, caught);
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
        }
        else {
            console.log('browser');
            const body = {
                orders
            };
            console.log('body: ', body);
            const params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                .set('encounterNo', encounter_no);
            console.log('params: ', params);
            const httpOptions = {
                params,
                headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                    Accept: 'application/json',
                    Authorization: 'Bearer ' + this.token
                })
            };
            console.log('httpOptions', httpOptions);
            return this.httpClient.post(this.url + this.postDiagnosticLaboratorySavePath, body, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])((results) => {
                console.log(results);
                return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])((err, caught) => {
                console.log(caught);
                console.error(err);
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
        }
    }
    deleteDiagnosticLaboratory(encounter_no, id) {
        if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            const body = {
                'data[id]': id
            };
            console.log('body: ', body);
            const headers = {
                Accept: 'application/json',
                Authorization: 'Bearer ' + this.token
            };
            // tslint:disable-next-line: max-line-length
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.post(this.url + this.postDiagnosticLaboratoryDeletePath + '?encounterNo=' + encounter_no, body, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])((response) => {
                const responseData = JSON.parse(response.data);
                console.log('Save prescriptions: ', responseData);
                return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])((err, caught) => {
                if (typeof err.error === 'string') {
                    try {
                        err.error = JSON.parse(err.error);
                    }
                    catch (e) {
                        console.log('err.error parse failed: ', e);
                    }
                }
                console.log('Save prescriptions error: ', err, caught);
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
        }
        else {
            console.log('browser');
            const body = new FormData();
            body.append('data[id]', id);
            console.log('body: ', body);
            const params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                .set('encounterNo', encounter_no);
            console.log('params: ', params);
            const httpOptions = {
                params,
                headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                    Accept: 'application/json',
                    Authorization: 'Bearer ' + this.token
                })
            };
            console.log('httpOptions', httpOptions);
            return this.httpClient.post(this.url + this.postDiagnosticLaboratoryDeletePath, body, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])((results) => {
                console.log(results);
                return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])((err, caught) => {
                console.log(caught);
                console.error(err);
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
        }
    }
    saveDiagnosticRadiology(encounter_no, orders) {
        if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            const params = {
                orders
            };
            const headers = {
                Accept: 'application/json',
                'Content-Type': 'application/json',
                Authorization: 'Bearer ' + this.token
            };
            this.http.setDataSerializer('json');
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.post(this.url + this.postDiagnosticRadiologySavePath + '?encounterNo=' + encounter_no, params, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])((response) => {
                const responseData = JSON.parse(response.data);
                console.log('Save prescriptions: ', responseData);
                return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])((err, caught) => {
                if (typeof err.error === 'string') {
                    try {
                        err.error = JSON.parse(err.error);
                    }
                    catch (e) {
                        console.log('err.error parse failed: ', e);
                    }
                }
                console.log('Save prescriptions error: ', err, caught);
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
        }
        else {
            console.log('browser');
            const body = {
                orders
            };
            console.log('body: ', body);
            const params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                .set('encounterNo', encounter_no);
            console.log('params: ', params);
            const httpOptions = {
                params,
                headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                    Accept: 'application/json',
                    Authorization: 'Bearer ' + this.token
                })
            };
            console.log('httpOptions', httpOptions);
            return this.httpClient.post(this.url + this.postDiagnosticRadiologySavePath, body, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])((results) => {
                console.log(results);
                return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])((err, caught) => {
                console.log(caught);
                console.error(err);
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
        }
    }
    deleteDiagnosticRadiology(encounter_no, id) {
        if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            const body = {
                'data[id]': id
            };
            console.log('body: ', body);
            const headers = {
                Accept: 'application/json',
                Authorization: 'Bearer ' + this.token
            };
            // tslint:disable-next-line: max-line-length
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.post(this.url + this.postDiagnosticRadiologyDeletePath + '?encounterNo=' + encounter_no, body, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])((response) => {
                const responseData = JSON.parse(response.data);
                console.log('Save prescriptions: ', responseData);
                return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])((err, caught) => {
                if (typeof err.error === 'string') {
                    try {
                        err.error = JSON.parse(err.error);
                    }
                    catch (e) {
                        console.log('err.error parse failed: ', e);
                    }
                }
                console.log('Save prescriptions error: ', err, caught);
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
        }
        else {
            console.log('browser');
            const body = new FormData();
            body.append('data[id]', id);
            console.log('body: ', body);
            const params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                .set('encounterNo', encounter_no);
            console.log('params: ', params);
            const httpOptions = {
                params,
                headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                    Accept: 'application/json',
                    Authorization: 'Bearer ' + this.token
                })
            };
            console.log('httpOptions', httpOptions);
            return this.httpClient.post(this.url + this.postDiagnosticRadiologyDeletePath, body, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])((results) => {
                console.log(results);
                return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])((err, caught) => {
                console.log(caught);
                console.error(err);
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
        }
    }
    saveRepetitive(encounter_no, repetitiveData) {
        if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            const headers = {
                Accept: 'application/json',
                Authorization: 'Bearer ' + this.token
            };
            const data = {};
            Object.keys(repetitiveData).forEach(key => {
                data[key] = repetitiveData[key];
            });
            const body = {
                data
            };
            console.log('body: ', body);
            this.http.setDataSerializer('json');
            // tslint:disable-next-line: max-line-length
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.post(this.url + this.postRepetitiveSavePath + '?encounterNo=' + encounter_no, body, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])((response) => {
                const responseData = JSON.parse(response.data);
                return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])((err, caught) => {
                if (typeof err.error === 'string') {
                    try {
                        err.error = JSON.parse(err.error);
                    }
                    catch (e) {
                        console.log('err.error parse failed: ', e);
                    }
                }
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
        }
        else {
            console.log('browser');
            const data = {};
            Object.keys(repetitiveData).forEach(key => {
                data[key] = repetitiveData[key];
            });
            const body = {
                data
            };
            console.log('body: ', body);
            const params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                .set('encounterNo', encounter_no);
            console.log('params: ', params);
            const httpOptions = {
                params,
                headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                    Accept: 'application/json',
                    Authorization: 'Bearer ' + this.token
                })
            };
            console.log('httpOptions', httpOptions);
            return this.httpClient.post(this.url + this.postRepetitiveSavePath, body, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])((results) => {
                console.log(results);
                return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])((err, caught) => {
                console.log(caught);
                console.error(err);
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
        }
    }
    deleteRepetitive(encounter_no, id) {
        if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            const body = {
                'data': id
            };
            console.log('body: ', body);
            const headers = {
                Accept: 'application/json',
                Authorization: 'Bearer ' + this.token
            };
            // tslint:disable-next-line: max-line-length
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.post(this.url + this.postRepetitiveDeletePath + '?encounterNo=' + encounter_no, body, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])((response) => {
                const responseData = JSON.parse(response.data);
                return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])((err, caught) => {
                if (typeof err.error === 'string') {
                    try {
                        err.error = JSON.parse(err.error);
                    }
                    catch (e) {
                        console.log('err.error parse failed: ', e);
                    }
                }
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
        }
        else {
            console.log('browser');
            const body = new FormData();
            body.append('data', id);
            console.log('body: ', body);
            const params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                .set('encounterNo', encounter_no);
            console.log('params: ', params);
            const httpOptions = {
                params,
                headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                    Accept: 'application/json',
                    Authorization: 'Bearer ' + this.token
                })
            };
            console.log('httpOptions', httpOptions);
            return this.httpClient.post(this.url + this.postRepetitiveDeletePath, body, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])((results) => {
                console.log(results);
                return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])((err, caught) => {
                console.log(caught);
                console.error(err);
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
        }
    }
    deleteFinalizedRepetitive(encounter_no, id, encounterCourseWardID) {
        if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            const body = {
                'data': id,
                'encounterCourseWardID': encounterCourseWardID
            };
            console.log('body: ', body);
            const headers = {
                Accept: 'application/json',
                Authorization: 'Bearer ' + this.token
            };
            // tslint:disable-next-line: max-line-length
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.post(this.url + this.postFinalizedRepetitiveDeletePath + '?encounterNo=' + encounter_no, body, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])((response) => {
                const responseData = JSON.parse(response.data);
                return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])((err, caught) => {
                if (typeof err.error === 'string') {
                    try {
                        err.error = JSON.parse(err.error);
                    }
                    catch (e) {
                        console.log('err.error parse failed: ', e);
                    }
                }
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
        }
        else {
            console.log('browser');
            const body = new FormData();
            body.append('data', id);
            body.append('encounterCourseWardID', encounterCourseWardID);
            console.log('body: ', body);
            const params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                .set('encounterNo', encounter_no);
            console.log('params: ', params);
            const httpOptions = {
                params,
                headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                    Accept: 'application/json',
                    Authorization: 'Bearer ' + this.token
                })
            };
            console.log('httpOptions', httpOptions);
            return this.httpClient.post(this.url + this.postFinalizedRepetitiveDeletePath, body, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])((results) => {
                console.log(results);
                return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])((err, caught) => {
                console.log(caught);
                console.error(err);
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
        }
    }
    getPrescriptionPrintFile(encounter_no, prescriptions) {
        if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            const params = {
                encounter_no,
                is_group: '1',
            };
            Object.keys(prescriptions).forEach(key => {
                params[key] = prescriptions[key];
            });
            console.log('params: ', params);
            const headers = {
                Accept: 'application/json',
                'Content-Type': 'application/json',
                Authorization: 'Bearer ' + this.token
            };
            console.log('headers: ', headers);
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.get(this.url + this.getPrescriptionPrintFilePath, params, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])((response) => {
                const responseData = JSON.parse(response.data);
                console.log('Prescription Print File: ', responseData);
                return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])((err, caught) => {
                if (typeof err.error === 'string') {
                    try {
                        err.error = JSON.parse(err.error);
                    }
                    catch (e) {
                        console.log('err.error parse failed: ', e);
                    }
                }
                console.log('Prescription Print File error: ', err, caught);
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
        }
        else {
            console.log('browser');
            let params;
            params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                .set('encounterNo', encounter_no)
                .set('is_group', '1');
            Object.keys(prescriptions).forEach(key => {
                params.append(key, prescriptions[key]);
            });
            console.log('params: ', params);
            const httpOptions = {
                params,
                headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                    Accept: 'application/json',
                    'Content-Type': 'application/json',
                    Authorization: 'Bearer ' + this.token
                })
            };
            console.log('httpOptions', httpOptions);
            return this.httpClient.get(this.url + this.getPrescriptionPrintFilePath, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])((results) => {
                console.log(results);
                return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])((err, caught) => {
                console.log(caught);
                console.error(err);
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
        }
    }
};
PlanManagementApiService.ctorParameters = () => [
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_5__["Platform"] },
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] },
    { type: _ionic_native_http_ngx__WEBPACK_IMPORTED_MODULE_6__["HTTP"] }
];
PlanManagementApiService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_ionic_angular__WEBPACK_IMPORTED_MODULE_5__["Platform"],
        _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"],
        _ionic_native_http_ngx__WEBPACK_IMPORTED_MODULE_6__["HTTP"]])
], PlanManagementApiService);



/***/ }),

/***/ "./src/app/services/plan-management-data.service.ts":
/*!**********************************************************!*\
  !*** ./src/app/services/plan-management-data.service.ts ***!
  \**********************************************************/
/*! exports provided: PlanManagementDataService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlanManagementDataService", function() { return PlanManagementDataService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let PlanManagementDataService = class PlanManagementDataService {
    constructor() { }
    setUnfinalizedBatch(batch) {
        this.batch = batch;
    }
    getUnfinalizedBatch() {
        return this.batch;
    }
};
PlanManagementDataService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
], PlanManagementDataService);



/***/ })

}]);
//# sourceMappingURL=default~doctor-order-doctor-order-module~laboratory-order-laboratory-order-module~plan-management-pl~5fb2b03d-es2015.js.map
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~audit-trail-audit-trail-module~soap-soap-module"], {
  /***/
  "./src/app/services/soap-api.service.ts":
  /*!**********************************************!*\
    !*** ./src/app/services/soap-api.service.ts ***!
    \**********************************************/

  /*! exports provided: SoapApiService */

  /***/
  function srcAppServicesSoapApiServiceTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "SoapApiService", function () {
      return SoapApiService;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/fesm2015/core.js");
    /* harmony import */


    var rxjs_operators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! rxjs/operators */
    "./node_modules/rxjs/_esm2015/operators/index.js");
    /* harmony import */


    var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! rxjs */
    "./node_modules/rxjs/_esm2015/index.js");
    /* harmony import */


    var _angular_common_http__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! @angular/common/http */
    "./node_modules/@angular/common/fesm2015/http.js");
    /* harmony import */


    var _ionic_native_http_ngx__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! @ionic-native/http/ngx */
    "./node_modules/@ionic-native/http/ngx/index.js");
    /* harmony import */


    var _ionic_angular__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! @ionic/angular */
    "./node_modules/@ionic/angular/dist/fesm5.js");

    var SoapApiService =
    /*#__PURE__*/
    function () {
      function SoapApiService(httpClient, http, platform) {
        _classCallCheck(this, SoapApiService);

        this.httpClient = httpClient;
        this.http = http;
        this.platform = platform;
        this.url = 'http://localhost:3000';
        this.patientSoapPath = '/api/doctor/patient/soap/data';
        this.patientSoapOptionsPath = '/api/doctor/patient/soap/options';
        this.saveSubjectivePath = '/api/doctor/patient/soap/subjective/save';
        this.saveObjectivePath = '/api/doctor/patient/soap/objective/save';
        this.saveClinicalImpressionPath = '/api/doctor/patient/soap/assessment/clinicalimp/save';
        this.saveDiagnosisPath = '/api/doctor/patient/soap/assessment/diagnosis/save';
        this.saveClinicalSummaryPath = '/api/doctor/patient/soap/plan/save';
        this.searchIcdPath = '/api/selectData/GetICDFinalDiagnosisWho';
        this.addIcdPath = '/api/doctor/patient/soap/assessment/icd/save';
        this.removeIcdPath = '/api/doctor/patient/soap/assessment/icd/delete';
        this.getAuditTrailPath = '/api/doctor/patient/soap/assessment/diagnosis/trail';
      }

      _createClass(SoapApiService, [{
        key: "setUrl",
        value: function setUrl(url) {
          this.url = url;
        }
      }, {
        key: "setToken",
        value: function setToken(token) {
          this.token = token;
        }
      }, {
        key: "getPatientSoapData",
        value: function getPatientSoapData(encounter_no) {
          if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            var params = {
              id: encounter_no
            };
            var headers = {
              Accept: 'application/json',
              'Content-Type': 'application/json',
              Authorization: 'Bearer ' + this.token
            };
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.get(this.url + this.patientSoapPath, params, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (response) {
              var responseData = JSON.parse(response.data);
              console.log('Soap: ', responseData);
              return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["catchError"])(function (err, caught) {
              if (typeof err.error === 'string') {
                try {
                  err.error = JSON.parse(err.error);
                } catch (e) {
                  console.log('err.error parse failed: ', e);
                }
              }

              console.log('Sopa error: ', err, caught);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          } else {
            console.log('browser');
            var httpOptions = {
              params: new _angular_common_http__WEBPACK_IMPORTED_MODULE_4__["HttpParams"]().set('id', encounter_no),
              headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_4__["HttpHeaders"]({
                Accept: 'application/json',
                'Content-Type': 'application/json',
                Authorization: 'Bearer ' + this.token,
                'Access-Control-Allow-Origin': '*'
              })
            };
            return this.httpClient.get(this.url + this.patientSoapPath, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (results) {
              console.log(results);
              return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["catchError"])(function (err, caught) {
              console.log(caught);
              console.error(err);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          }
        }
      }, {
        key: "getPatientSoapOptions",
        value: function getPatientSoapOptions() {
          if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            var params = {};
            var headers = {
              Accept: 'application/json',
              'Content-Type': 'application/json',
              Authorization: 'Bearer ' + this.token
            };
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.get(this.url + this.patientSoapOptionsPath, params, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (response) {
              var responseData = JSON.parse(response.data);
              console.log('Soap: ', responseData);
              return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["catchError"])(function (err, caught) {
              if (typeof err.error === 'string') {
                try {
                  err.error = JSON.parse(err.error);
                } catch (e) {
                  console.log('err.error parse failed: ', e);
                }
              }

              console.log('Sopa error: ', err, caught);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          } else {
            console.log('browser');
            var httpOptions = {
              // params: new HttpParams(),
              headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_4__["HttpHeaders"]({
                Accept: 'application/json',
                'Content-Type': 'application/json',
                Authorization: 'Bearer ' + this.token,
                'Access-Control-Allow-Origin': '*'
              })
            };
            return this.httpClient.get(this.url + this.patientSoapOptionsPath, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (results) {
              console.log(results);
              return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["catchError"])(function (err, caught) {
              console.log(caught);
              console.error(err);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          }
        }
      }, {
        key: "saveSubjective",
        value: function saveSubjective(encounter_no, chiefComplaint_tag, chiefComplaint_others) {
          if (this.platform.is('ios') || this.platform.is('android')) {
            var body = {
              chiefComplaint_others: '',
              chiefComplaint_tag: []
            };

            for (var i = 0; i < chiefComplaint_tag.length; i++) {
              body.chiefComplaint_tag.push(chiefComplaint_tag[i]);
            }

            body.chiefComplaint_others = chiefComplaint_others;
            console.log('body: ', body);
            console.log('native');
            var headers = {
              Accept: 'application/json',
              Authorization: 'Bearer ' + this.token
            };
            this.http.setDataSerializer('json');
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.post(this.url + this.saveSubjectivePath + '?id=' + encounter_no, body, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (response) {
              var responseData = JSON.parse(response.data);
              console.log('Soap Subj: ', responseData);
              return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["catchError"])(function (err, caught) {
              if (typeof err.error === 'string') {
                try {
                  err.error = JSON.parse(err.error);
                } catch (e) {
                  console.log('err.error parse failed: ', e);
                }
              }

              console.log('Soap Subj error: ', err, caught);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          } else {
            var input = new FormData();

            for (var _i = 0; _i < chiefComplaint_tag.length; _i++) {
              input.append('chiefComplaint_tag[' + _i + ']', chiefComplaint_tag[_i]);
            }

            input.append('chiefComplaint_others', chiefComplaint_others);
            var httpOptions = {
              params: new _angular_common_http__WEBPACK_IMPORTED_MODULE_4__["HttpParams"]().set('id', encounter_no),
              headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_4__["HttpHeaders"]({
                Accept: 'application/json',
                Authorization: 'Bearer ' + this.token,
                'Access-Control-Allow-Origin': '*'
              })
            };
            console.log(httpOptions);
            return this.httpClient.post(this.url + this.saveSubjectivePath, input, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (response) {
              console.log('Entered saveSubjective API:', response);
              return response;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["catchError"])(function (err, caught) {
              console.log(err, caught);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          }
        }
      }, {
        key: "saveObjective",
        value: function saveObjective(encounter_no, objective) {
          if (this.platform.is('ios') || this.platform.is('android')) {
            var body = {
              'text-objective': objective
            };
            console.log('native');
            var headers = {
              Accept: 'application/json',
              Authorization: 'Bearer ' + this.token
            };
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.post(this.url + this.saveObjectivePath + '?id=' + encounter_no, body, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (response) {
              var responseData = JSON.parse(response.data);
              console.log('Soap Obj: ', responseData);
              return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["catchError"])(function (err, caught) {
              if (typeof err.error === 'string') {
                try {
                  err.error = JSON.parse(err.error);
                } catch (e) {
                  console.log('err.error parse failed: ', e);
                }
              }

              console.log('Soap Obj error: ', err, caught);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          } else {
            var input = new FormData();
            input.append('text-objective', objective);
            var httpOptions = {
              params: new _angular_common_http__WEBPACK_IMPORTED_MODULE_4__["HttpParams"]().set('id', encounter_no),
              headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_4__["HttpHeaders"]({
                Accept: 'application/json',
                Authorization: 'Bearer ' + this.token,
                'Access-Control-Allow-Origin': '*'
              })
            };
            return this.httpClient.post(this.url + this.saveObjectivePath, input, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (response) {
              console.log('Entered saveObjective API:', response);
              return response;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["catchError"])(function (err, caught) {
              console.log(err, caught);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          }
        }
      }, {
        key: "saveClinicalImpression",
        value: function saveClinicalImpression(encounter_no, impression) {
          if (this.platform.is('ios') || this.platform.is('android')) {
            var body = {
              impression: impression
            };
            console.log('native');
            var headers = {
              Accept: 'application/json',
              Authorization: 'Bearer ' + this.token
            };
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.post(this.url + this.saveClinicalImpressionPath + '?id=' + encounter_no, body, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (response) {
              var responseData = JSON.parse(response.data);
              console.log('Soap clinical: ', responseData);
              return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["catchError"])(function (err, caught) {
              if (typeof err.error === 'string') {
                try {
                  err.error = JSON.parse(err.error);
                } catch (e) {
                  console.log('err.error parse failed: ', e);
                }
              }

              console.log('Soap clinical error: ', err, caught);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          } else {
            var input = new FormData();
            input.append('impression', impression);
            var httpOptions = {
              params: new _angular_common_http__WEBPACK_IMPORTED_MODULE_4__["HttpParams"]().set('id', encounter_no),
              headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_4__["HttpHeaders"]({
                Accept: 'application/json',
                Authorization: 'Bearer ' + this.token,
                'Access-Control-Allow-Origin': '*'
              })
            };
            return this.httpClient.post(this.url + this.saveClinicalImpressionPath, input, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (response) {
              console.log('Entered saveClinicalImpression API:', response);
              return response;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["catchError"])(function (err, caught) {
              console.log(err, caught);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          }
        }
      }, {
        key: "searchIcd",
        value: function searchIcd(keyword) {
          if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            var params = {
              q: keyword
            };
            var headers = {
              Accept: 'application/json',
              'Content-Type': 'application/json',
              Authorization: 'Bearer ' + this.token
            };
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.get(this.url + this.searchIcdPath, params, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (response) {
              var responseData = JSON.parse(response.data);
              console.log('Soap icd: ', responseData);
              return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["catchError"])(function (err, caught) {
              if (typeof err.error === 'string') {
                try {
                  err.error = JSON.parse(err.error);
                } catch (e) {
                  console.log('err.error parse failed: ', e);
                }
              }

              console.log('Soap icd error: ', err, caught);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          } else {
            var httpOptions = {
              params: new _angular_common_http__WEBPACK_IMPORTED_MODULE_4__["HttpParams"]().set('q', keyword),
              headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_4__["HttpHeaders"]({
                Accept: 'application/json',
                'Content-Type': 'application/json',
                Authorization: 'Bearer ' + this.token,
                'Access-Control-Allow-Origin': '*'
              })
            };
            return this.httpClient.get(this.url + this.searchIcdPath, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (results) {
              console.log('Entered searchIcd API:', results);
              return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["catchError"])(function (err, caught) {
              console.log(caught);
              console.error(err);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          }
        }
      }, {
        key: "addICD",
        value: function addICD(encounter_no, icd_code) {
          if (this.platform.is('ios') || this.platform.is('android')) {
            var body = {
              id: encounter_no,
              icd_code: icd_code
            };
            console.log('native');
            var headers = {
              Accept: 'application/json',
              Authorization: 'Bearer ' + this.token
            };
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.post(this.url + this.addIcdPath, body, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (response) {
              var responseData = JSON.parse(response.data);
              console.log('Soap icd: ', responseData);
              return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["catchError"])(function (err, caught) {
              if (typeof err.error === 'string') {
                try {
                  err.error = JSON.parse(err.error);
                } catch (e) {
                  console.log('err.error parse failed: ', e);
                }
              }

              console.log('Soap icd error: ', err, caught);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          } else {
            var input = new FormData();
            input.append('id', encounter_no);
            input.append('icd_code', icd_code);
            var httpOptions = {
              params: new _angular_common_http__WEBPACK_IMPORTED_MODULE_4__["HttpParams"]().set('id', encounter_no),
              headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_4__["HttpHeaders"]({
                Accept: 'application/json',
                Authorization: 'Bearer ' + this.token,
                'Access-Control-Allow-Origin': '*'
              })
            };
            return this.httpClient.post(this.url + this.addIcdPath, input, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (response) {
              console.log('Entered addICD API:', response);
              return response;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["catchError"])(function (err, caught) {
              console.log(err, caught);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          }
        }
      }, {
        key: "removeICD",
        value: function removeICD(id) {
          if (this.platform.is('ios') || this.platform.is('android')) {
            var body = {
              id: id
            };
            console.log('native');
            var headers = {
              Accept: 'application/json',
              Authorization: 'Bearer ' + this.token
            };
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.post(this.url + this.removeIcdPath, body, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (response) {
              var responseData = JSON.parse(response.data);
              console.log('Soap icd: ', responseData);
              return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["catchError"])(function (err, caught) {
              if (typeof err.error === 'string') {
                try {
                  err.error = JSON.parse(err.error);
                } catch (e) {
                  console.log('err.error parse failed: ', e);
                }
              }

              console.log('Soap icd error: ', err, caught);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          } else {
            var input = new FormData();
            input.append('id', id);
            var httpOptions = {
              headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_4__["HttpHeaders"]({
                Accept: 'application/json',
                Authorization: 'Bearer ' + this.token,
                'Access-Control-Allow-Origin': '*'
              })
            };
            return this.httpClient.post(this.url + this.removeIcdPath, input, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (response) {
              console.log('Entered removeICD API:', response);
              return response;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["catchError"])(function (err, caught) {
              console.log(err, caught);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          }
        }
      }, {
        key: "saveDiagnosis",
        value: function saveDiagnosis(encounter_no, final_diagnosis, other_diagnosis) {
          if (this.platform.is('ios') || this.platform.is('android')) {
            var body = {
              'text-assessment-final': final_diagnosis,
              'text-assessment-other': other_diagnosis
            };
            console.log('native');
            var headers = {
              Accept: 'application/json',
              Authorization: 'Bearer ' + this.token
            };
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.post(this.url + this.saveDiagnosisPath + '?id=' + encounter_no, body, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (response) {
              var responseData = JSON.parse(response.data);
              console.log('Soap diagnostics: ', responseData);
              return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["catchError"])(function (err, caught) {
              if (typeof err.error === 'string') {
                try {
                  err.error = JSON.parse(err.error);
                } catch (e) {
                  console.log('err.error parse failed: ', e);
                }
              }

              console.log('Soap diagnostics error: ', err, caught);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          } else {
            var input = new FormData();
            input.append('text-assessment-final', final_diagnosis);
            input.append('text-assessment-other', other_diagnosis);
            var httpOptions = {
              params: new _angular_common_http__WEBPACK_IMPORTED_MODULE_4__["HttpParams"]().set('id', encounter_no),
              headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_4__["HttpHeaders"]({
                Accept: 'application/json',
                Authorization: 'Bearer ' + this.token,
                'Access-Control-Allow-Origin': '*'
              })
            };
            return this.httpClient.post(this.url + this.saveDiagnosisPath, input, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (response) {
              console.log('Entered saveDiagnosis API:', response);
              return response;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["catchError"])(function (err, caught) {
              console.log(err, caught);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          }
        }
      }, {
        key: "saveClinicalSummary",
        value: function saveClinicalSummary(encounter_no, clinical_summary) {
          if (this.platform.is('ios') || this.platform.is('android')) {
            var body = {
              'text-assessment-plan': clinical_summary
            };
            console.log('native');
            var headers = {
              Accept: 'application/json',
              Authorization: 'Bearer ' + this.token
            };
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.post(this.url + this.saveClinicalSummaryPath + '?id=' + encounter_no, body, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (response) {
              var responseData = JSON.parse(response.data);
              console.log('Soap clinical summary: ', responseData);
              return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["catchError"])(function (err, caught) {
              if (typeof err.error === 'string') {
                try {
                  err.error = JSON.parse(err.error);
                } catch (e) {
                  console.log('err.error parse failed: ', e);
                }
              }

              console.log('Soap clinical summary error: ', err, caught);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          } else {
            var input = new FormData();
            input.append('text-assessment-plan', clinical_summary);
            var httpOptions = {
              params: new _angular_common_http__WEBPACK_IMPORTED_MODULE_4__["HttpParams"]().set('id', encounter_no),
              headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_4__["HttpHeaders"]({
                Accept: 'application/json',
                Authorization: 'Bearer ' + this.token,
                'Access-Control-Allow-Origin': '*'
              })
            };
            return this.httpClient.post(this.url + this.saveClinicalSummaryPath, input, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (response) {
              console.log('Entered saveClinicalSummary API:', response);
              return response;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["catchError"])(function (err, caught) {
              console.log(err, caught);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          }
        }
      }, {
        key: "getAuditTrail",
        value: function getAuditTrail(encounter_no) {
          if (this.platform.is('ios') || this.platform.is('android')) {
            console.log('native');
            var params = {
              id: encounter_no
            };
            var headers = {
              Accept: 'application/json',
              'Content-Type': 'application/json',
              Authorization: 'Bearer ' + this.token
            };
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["from"])(this.http.get(this.url + this.getAuditTrailPath + '?id=' + encounter_no, params, headers)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (response) {
              var responseData = JSON.parse(response.data);
              console.log('Soap audit trails: ', responseData);
              return responseData;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["catchError"])(function (err, caught) {
              if (typeof err.error === 'string') {
                try {
                  err.error = JSON.parse(err.error);
                } catch (e) {
                  console.log('err.error parse failed: ', e);
                }
              }

              console.log('Soap audit trails error: ', err, caught);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          } else {
            var httpOptions = {
              params: new _angular_common_http__WEBPACK_IMPORTED_MODULE_4__["HttpParams"]().set('id', encounter_no),
              headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_4__["HttpHeaders"]({
                Accept: 'application/json',
                'Content-Type': 'application/json',
                Authorization: 'Bearer ' + this.token,
                'Access-Control-Allow-Origin': '*'
              })
            };
            return this.httpClient.get(this.url + this.getAuditTrailPath, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["timeout"])(30000), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (results) {
              console.log(results);
              return results;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["catchError"])(function (err, caught) {
              console.log(caught);
              console.error(err);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(err);
            }));
          }
        }
      }]);

      return SoapApiService;
    }();

    SoapApiService.ctorParameters = function () {
      return [{
        type: _angular_common_http__WEBPACK_IMPORTED_MODULE_4__["HttpClient"]
      }, {
        type: _ionic_native_http_ngx__WEBPACK_IMPORTED_MODULE_5__["HTTP"]
      }, {
        type: _ionic_angular__WEBPACK_IMPORTED_MODULE_6__["Platform"]
      }];
    };

    SoapApiService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
      providedIn: 'root'
    }), tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_4__["HttpClient"], _ionic_native_http_ngx__WEBPACK_IMPORTED_MODULE_5__["HTTP"], _ionic_angular__WEBPACK_IMPORTED_MODULE_6__["Platform"]])], SoapApiService);
    /***/
  }
}]);
//# sourceMappingURL=default~audit-trail-audit-trail-module~soap-soap-module-es5.js.map
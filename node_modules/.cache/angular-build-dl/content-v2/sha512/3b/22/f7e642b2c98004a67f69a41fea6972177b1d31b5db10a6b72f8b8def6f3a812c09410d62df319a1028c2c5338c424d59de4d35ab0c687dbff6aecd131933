(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~dashboard-dashboard-module~drugs-and-medicines-drugs-and-medicines-module~drugs-and-medicine~8291062a"],{

/***/ "./src/app/services/array-comparator.service.ts":
/*!******************************************************!*\
  !*** ./src/app/services/array-comparator.service.ts ***!
  \******************************************************/
/*! exports provided: ArrayComparatorService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ArrayComparatorService", function() { return ArrayComparatorService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let ArrayComparatorService = class ArrayComparatorService {
    constructor() { }
    compare(arr1, arr2) {
        const objMap = {};
        arr1.forEach((e1) => arr2.forEach((e2) => {
            if (e1.id === e2.id) {
                objMap[e1.id] = objMap[e1.id] + 1 || 1;
            }
        }));
        const keys = Object.keys(objMap);
        return keys;
    }
};
ArrayComparatorService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
], ArrayComparatorService);



/***/ }),

/***/ "./src/app/services/permission-validator.service.ts":
/*!**********************************************************!*\
  !*** ./src/app/services/permission-validator.service.ts ***!
  \**********************************************************/
/*! exports provided: PermissionValidatorService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PermissionValidatorService", function() { return PermissionValidatorService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _services_array_comparator_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../services/array-comparator.service */ "./src/app/services/array-comparator.service.ts");



let PermissionValidatorService = class PermissionValidatorService {
    constructor(arrayComparatorService) {
        this.arrayComparatorService = arrayComparatorService;
        this.throwsErrorCode = 5011;
        this.perms = {
            allPermission: '_a_0_all',
            manageEhr: '_a_1_ehr_sudomanage',
            viewAllDept: '_a_2_ehr_view_all_dept',
            viewOwnDept: '_a_3_ehr_view_own_dept',
            editAllDept: '_a_2_ehr_edit_all_dept',
            editOwnDept: '_a_3_ehr_edit_own_dept',
            overideInct: '_a_2_ehr_override_my_patient',
            overideInctSoap: '_a_3_ehr_soap',
            overideInctSoapDiag: '_a_2_ehr_override_final_dx',
            overideInctSoapDiag2: '_a_4_ehr_override_final_dx',
            overideInctPastMed: '_a_3_ehr_past_medical_history',
            overideInctPsigns: '_a_3_ehr_pertinent_signs_and_symptoms',
            overideInctHciRef: '_a_3_ehr_referred_hci',
            overideInctPhysExam: '_a_3_ehr_physical_examination',
            overideInctMedicat: '_a_3_ehr_medication',
            overideInctPlanMan: '_a_3_ehr_plan_management',
            overideInctEndCare: '_a_3_ehr_end_of_care',
        };
        this.portlets = {
            soap: 'soap',
            soapDiag: 'soapDiag',
            pastMed: 'pastMed',
            pSigns: 'pSings',
            refHci: 'refHci',
            physExam: 'physExam',
            medict: 'medict',
            planMan: 'planMan',
            endCare: 'endCare',
        };
    }
    setAuthentication(authentication) {
        this.authentication = authentication;
    }
    setSelectedPatient(selectedPatient) {
        this.selectedPatient = selectedPatient;
    }
    validateRole(validate, withIsDischarge = true, soapPerm = false) {
        this.permissions = this.authentication.user.permissions;
        this.roleName = this.authentication.user.role.role_name;
        console.log('user roleName: ', this.roleName);
        const roleNames = validate.role_name;
        const otherPermissions = validate['other-permissions'];
        let result_perm = false;
        this.authentication.user.permissions.map((perm) => {
            if (validate[0] === 'all') {
                result_perm = (perm.permission_id === '_a_0_all') ? true : false;
            }
            else if (validate[0] === 'sudomanage') {
                result_perm = (perm.permission_id === '_a_0_all' ||
                    perm.permission_id === '_a_1_ehr_sudomanage') ? true : false;
            }
            else if (validate[0] === 'view_all_dept') {
                result_perm = (perm.permission_id === '_a_0_all' ||
                    perm.permission_id === '_a_1_ehr_sudomanage' ||
                    perm.permission_id === '_a_2_ehr_view_all_dept') ? true : false;
            }
            else if (validate[0] === 'view_own_dept') {
                result_perm = (perm.permission_id === '_a_0_all' ||
                    perm.permission_id === '_a_1_ehr_sudomanage' ||
                    perm.permission_id === '_a_2_ehr_view_all_dept' ||
                    perm.permission_id === '_a_3_ehr_view_own_dept') ? true : false;
            }
            else if (validate[0] === 'edit_all_dept') {
                result_perm = (perm.permission_id === '_a_0_all' ||
                    perm.permission_id === '_a_1_ehr_sudomanage' ||
                    perm.permission_id === '_a_2_ehr_edit_all_dept') ? true : false;
            }
            else if (validate[0] === 'edit_own_dept') {
                result_perm = (perm.permission_id === '_a_0_all' ||
                    perm.permission_id === '_a_1_ehr_sudomanage' ||
                    perm.permission_id === '_a_2_ehr_edit_all_dept' ||
                    perm.permission_id === '_a_3_ehr_edit_own_dept') ? true : false;
            }
            else if (validate[0] === 'override_my_patient') {
                result_perm = (perm.permission_id === '_a_0_all' ||
                    perm.permission_id === '_a_1_ehr_sudomanage' ||
                    perm.permission_id === '_a_2_ehr_override_my_patient') ? true : false;
            }
            else if (validate[0] === 'soap') {
                result_perm = (perm.permission_id === '_a_0_all' ||
                    perm.permission_id === '_a_1_ehr_sudomanage' ||
                    perm.permission_id === '_a_2_ehr_override_my_patient' ||
                    perm.permission_id === '_a_3_ehr_soap') ? true : false;
            }
            else if (validate[0] === 'override_final_dx') {
                result_perm = (perm.permission_id === '_a_0_all' ||
                    perm.permission_id === '_a_1_ehr_sudomanage' ||
                    perm.permission_id === '_a_2_ehr_override_my_patient' ||
                    perm.permission_id === '_a_4_ehr_override_final_dx' ||
                    perm.permission_id === '_a_3_ehr_soap') ? true : false;
            }
            else if (validate[0] === 'past_medical_history') {
                result_perm = (perm.permission_id === '_a_0_all' ||
                    perm.permission_id === '_a_1_ehr_sudomanage' ||
                    perm.permission_id === '_a_2_ehr_override_my_patient' ||
                    perm.permission_id === '_a_3_ehr_past_medical_history') ? true : false;
            }
            else if (validate[0] === 'pertinent_signs_and_symptoms') {
                result_perm = (perm.permission_id === '_a_0_all' ||
                    perm.permission_id === '_a_1_ehr_sudomanage' ||
                    perm.permission_id === '_a_2_ehr_override_my_patient' ||
                    perm.permission_id === '_a_3_ehr_pertinent_signs_and_symptoms') ? true : false;
            }
            else if (validate[0] === 'referred_hci') {
                result_perm = (perm.permission_id === '_a_0_all' ||
                    perm.permission_id === '_a_1_ehr_sudomanage' ||
                    perm.permission_id === '_a_2_ehr_override_my_patient' ||
                    perm.permission_id === '_a_3_ehr_referred_hci') ? true : false;
            }
            else if (validate[0] === 'physical_examination') {
                result_perm = (perm.permission_id === '_a_0_all' ||
                    perm.permission_id === '_a_1_ehr_sudomanage' ||
                    perm.permission_id === '_a_2_ehr_override_my_patient' ||
                    perm.permission_id === '_a_3_ehr_physical_examination') ? true : false;
            }
            else if (validate[0] === 'medication') {
                result_perm = (perm.permission_id === '_a_0_all' ||
                    perm.permission_id === '_a_1_ehr_sudomanage' ||
                    perm.permission_id === '_a_2_ehr_override_my_patient' ||
                    perm.permission_id === '_a_3_ehr_medication') ? true : false;
            }
            else if (validate[0] === 'plan_managem') {
                result_perm = (perm.permission_id === '_a_0_all' ||
                    perm.permission_id === '_a_1_ehr_sudomanage' ||
                    perm.permission_id === '_a_2_ehr_override_my_patient' ||
                    perm.permission_id === '_a_3_ehr_plan_management') ? true : false;
            }
            else if (validate[0] === 'end_of_care') {
                result_perm = (perm.permission_id === '_a_0_all' ||
                    perm.permission_id === '_a_1_ehr_sudomanage' ||
                    perm.permission_id === '_a_2_ehr_override_my_patient' ||
                    perm.permission_id === '_a_3_ehr_end_of_care') ? true : false;
            }
        });
        if (soapPerm) {
            return result_perm;
        }
        console.log('roleNames: ', roleNames);
        let validRole = true;
        if (Array.isArray(roleNames) && roleNames.length > 0) {
            const index = roleNames.findIndex(element => {
                console.log('element: ', element, ' this.roleName: ', this.roleName);
                return this.roleName.toUpperCase().indexOf(element.toUpperCase()) != -1;
                // return element === this.roleName;
            });
            console.log('index: ', index);
            validRole = (index >= 0);
        }
        console.log('validRole: ', validRole);
        let validOtherPermission = false;
        if (Array.isArray(otherPermissions) && otherPermissions.length > 0) {
            const keys = this.arrayComparatorService.compare(otherPermissions, this.permissions);
            validOtherPermission = (keys.length > 0);
        }
        console.log('validOtherPermission: ', validOtherPermission);
        if (withIsDischarge) {
            console.log('selectedPatient: ', this.selectedPatient);
            if (this.selectedPatient) {
                if (this.selectedPatient.is_discharged == 1) {
                    console.log('is_discharged');
                    return validOtherPermission;
                }
            }
        }
        return true;
        return validRole || validOtherPermission;
    }
    hasAllPermission() {
        return this.authentication.user.permissions.some(p => p.permission_id == this.perms.allPermission);
    }
    hasManageEhr() {
        return this.authentication.user.permissions.some(p => p.permission_id == this.perms.manageEhr);
    }
    hasEdit() {
        if (this.authentication.user.permissions.some(p => p.permission_id == this.perms.editAllDept))
            return true;
        return this.authentication.user.permissions.some(p => p.permission_id == this.perms.editOwnDept) && this.selectedPatient.isInMyDept;
    }
    hasView() {
        if (this.authentication.user.permissions.some(p => p.permission_id == this.perms.viewAllDept))
            return true;
        return this.authentication.user.permissions.some(p => p.permission_id == this.perms.viewOwnDept) && this.selectedPatient.isInMyDept;
    }
    hasHigherPermission() {
        return this.hasAllPermission() || this.hasManageEhr();
    }
    hasOverInct() {
        return this.authentication.user.permissions.some(p => p.permission_id == this.perms.overideInct);
    }
    hasDischPerm(type) {
        if (!(this.hasView() || this.hasEdit()))
            return false;
        if (this.hasOverInct())
            return true;
        switch (type) {
            case this.portlets.soap:
                return this.authentication.user.permissions.some(p => p.permission_id == this.perms.overideInctSoap);
            case this.portlets.soapDiag:
                return this.authentication.user.permissions.some(p => p.permission_id == this.perms.overideInctSoapDiag || p.permission_id == this.perms.overideInctSoapDiag2);
            case this.portlets.pastMed:
                return this.authentication.user.permissions.some(p => p.permission_id == this.perms.overideInctPastMed);
            case this.portlets.pSigns:
                return this.authentication.user.permissions.some(p => p.permission_id == this.perms.overideInctPsigns);
            case this.portlets.refHci:
                return this.authentication.user.permissions.some(p => p.permission_id == this.perms.overideInctHciRef);
            case this.portlets.physExam:
                return this.authentication.user.permissions.some(p => p.permission_id == this.perms.overideInctPhysExam);
            case this.portlets.medict:
                return this.authentication.user.permissions.some(p => p.permission_id == this.perms.overideInctMedicat);
            case this.portlets.planMan:
                return this.authentication.user.permissions.some(p => p.permission_id == this.perms.overideInctPlanMan);
            case this.portlets.endCare:
                return this.authentication.user.permissions.some(p => p.permission_id == this.perms.overideInctEndCare);
        }
        return false;
    }
    isDischarged() {
        if (this.selectedPatient)
            return this.selectedPatient.is_discharged == 1;
        return false;
    }
    hasSoapEdit() {
        if (this.hasHigherPermission())
            return true;
        else if (this.isDischarged())
            return this.hasDischPerm(this.portlets.soap);
        return this.hasEdit();
    }
    hasSoapDiagEdit() {
        if (this.hasHigherPermission())
            return true;
        else if (this.isDischarged())
            return this.hasDischPerm(this.portlets.soapDiag);
        return this.hasEdit();
    }
    hasSoapView() {
        if (this.hasSoapEdit() || this.hasView() || this.hasEdit())
            return true;
        return false;
    }
    hasPastMedEdit() {
        if (this.hasHigherPermission())
            return true;
        else if (this.isDischarged())
            return this.hasDischPerm(this.portlets.pastMed);
        return this.hasEdit();
    }
    hasPastView() {
        if (this.hasPastMedEdit() || this.hasView() || this.hasEdit())
            return true;
        return false;
    }
    hasPSignsEdit() {
        if (this.hasHigherPermission())
            return true;
        else if (this.isDischarged())
            return this.hasDischPerm(this.portlets.pSigns);
        return this.hasEdit();
    }
    hasPSingsView() {
        if (this.hasPSignsEdit() || this.hasView() || this.hasEdit())
            return true;
        return false;
    }
    hasVitalSignsView() {
        if (this.hasHigherPermission())
            return true;
        else if (this.hasView() || this.hasEdit() || this.hasEdit())
            return true;
        return false;
    }
    hasRefHciEdit() {
        if (this.hasHigherPermission())
            return true;
        else if (this.isDischarged())
            return this.hasDischPerm(this.portlets.refHci);
        return this.hasEdit();
    }
    hasRefHciView() {
        if (this.hasRefHciEdit() || this.hasView() || this.hasEdit())
            return true;
        return false;
    }
    hasPhysExamEdit() {
        if (this.hasHigherPermission())
            return true;
        else if (this.isDischarged())
            return this.hasDischPerm(this.portlets.physExam);
        return this.hasEdit();
    }
    hasPhysExamView() {
        if (this.hasPhysExamEdit() || this.hasView() || this.hasEdit())
            return true;
        return false;
    }
    hasResultView() {
        if (this.hasHigherPermission())
            return true;
        else if (this.hasView() || this.hasEdit() || this.hasEdit())
            return true;
        return false;
    }
    hasDrugsMedsEdit() {
        if (this.hasHigherPermission())
            return true;
        else if (this.isDischarged())
            return this.hasDischPerm(this.portlets.medict);
        return this.hasEdit();
    }
    hasDrugsMedsView() {
        if (this.hasDrugsMedsEdit() || this.hasView() || this.hasEdit())
            return true;
        return false;
    }
    hasEncHistView() {
        if (this.hasHigherPermission())
            return true;
        else if (this.hasView() || this.hasEdit() || this.hasEdit())
            return true;
        return false;
    }
    hasReferalsView() {
        if (this.hasHigherPermission())
            return true;
        else if (this.hasView() || this.hasEdit() || this.hasEdit())
            return true;
        return false;
    }
    hasEndCareEdit() {
        if (this.hasHigherPermission())
            return true;
        else if (this.isDischarged())
            return this.hasDischPerm(this.portlets.endCare);
        return this.hasEdit();
    }
    hasEndCareView() {
        if (this.hasEndCareEdit() || this.hasView() || this.hasEdit())
            return true;
        return false;
    }
    hasPlanManEdit() {
        if (this.hasHigherPermission())
            return true;
        else if (this.isDischarged())
            return this.hasDischPerm(this.portlets.planMan);
        return this.hasEdit();
    }
    hasPlanManView() {
        if (this.hasPlanManEdit() || this.hasView() || this.hasEdit())
            return true;
        return false;
    }
};
PermissionValidatorService.ctorParameters = () => [
    { type: _services_array_comparator_service__WEBPACK_IMPORTED_MODULE_2__["ArrayComparatorService"] }
];
PermissionValidatorService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_services_array_comparator_service__WEBPACK_IMPORTED_MODULE_2__["ArrayComparatorService"]])
], PermissionValidatorService);



/***/ })

}]);
//# sourceMappingURL=default~dashboard-dashboard-module~drugs-and-medicines-drugs-and-medicines-module~drugs-and-medicine~8291062a-es2015.js.map